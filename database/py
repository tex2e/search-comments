"/' Used when a value is quoted.
"Convert" the plist so that any weird whitespace changes from the preprocessor do not affect the XML parser in mac_tool.
"all" is a concatenation of the "all" targets from all the included sub-makefiles.
"foo/bar" when we're constructing targets for "foo/bar/baz.gyp".
"git add" the result.
"gyp_all_modules" is a concatenation of the "gyp_all_modules" targets from all the included sub-makefiles.
"include" is specified relative to subdict_path, so compute the real path to include by appending the provided "include" to the directory in which subdict_path resides.
"include" should use the new style "foo/bar.h" instead of just "bar.h"
"isa" isn't in the _properties dictionary, it's an intrinsic property of the class which the object belongs to.
"ls" sometimes prints on stderr
"noqa" is used to suppress this warning.
"out/gypfiles"
'/' is notably absent from this list, because there's no way for a regular expression to be treated as a path.
'all' is special cased to mean all the root targets.
'auto' debugger
'cmake -E copy src dst' will create the 'dst' directory if needed.
'mac_framework_dirs', input already handles _dirs endings.
'pointsize': '10pt', Additional stuff for the LaTeX preamble.
'target_build_files' keeps track of the keys corresponding to "target" files.
'truncatingBitPattern' initializer is defined if the conversion is truncating on any platform that Swift supports.
'type foo string' will make foo a plain struct in the eyes of gdb, circumventing the pretty print triggering.
, then it's likely to be owned by the target file.
- If there is no 'make_global_settings' for CC.host/CXX.host or 'CC_host'/'CXX_host' enviroment variable, cc_host/cxx_host should be set to cc/cxx.
- Make .INTERMEDIATE depend on the intermediate.
- The intermediate file depends on the inputs and executes the actual command.
- The intermediate recipe will 'touch' the intermediate file.
- The multi-output rule will have an do-nothing recipe.
- We are forward-declaring an inner class that is semantically private, but needed to be public for implementation reasons.
- We wish to explicitly set the owner and group of the archive.
- Will insert HH_FIXME comments in the body of XHP elements, where they will be rendered to the page.
- _BlockInfo: some other type of block.
- _NamespaceInfo: a namespace.
- missing/empty description - missing/incorrect repository - missing/incorrect version - missing/incorrect scripts/test property
-- Print body template for printing coverage report for each file.
-- Print footer
-- Print header size of separator is determined by 3 column sizes: file name, coverage percentage and lines.
-- the following methods are only used in Python 2.7 --
-- the following methods do not depend on the internal structure --
--allow_concurrent_memtable_write with --filter_deletes is not supported.
--list is mutually exclusive with both --additional-sections and --category.
--no-circular-check disables the check for circular relationships between .gyp files.
--no-duplicate-basename-check disables the check for duplicate basenames in a static_library/shared_library project.
-D on the command line sets variable defaults - D isn't just for define, it's for default.
./convert_make_target_to_command.py SlowVM ./convert_make_target_to_command.py QuickRepoJit ./convert_make_target_to_command.py ZendJitIR
.csr file is intermediate.
.o files are added to Xcode Frameworks phases, but conceptually aren't frameworks, they're more like sources or intermediates.
.so seems an odd choice because it's used as the extension on many other systems that don't distinguish between linkable shared libraries and non-linkable loadable modules, but there's precedent: Python loadable modules on Mac OS X use an .so extension.
/ALLOWISOLATION
/ASSEMBLYDEBUG
/ASSEMBLYDEBUG:DISABLE
/ASSEMBLYLINKRESOURCE
/ASSEMBLYMODULE
/ASSEMBLYRESOURCE
/CLRIMAGETYPE:IJW
/CLRSupportLastError
/CLRSupportLastError:NO /CLRSupportLastError:SYSTEMDLL
/CLRTHREADATTRIBUTE:MTA
/CLRTHREADATTRIBUTE:NONE
/CLRTHREADATTRIBUTE:STA
/CLRUNMANAGEDCODECHECK
/DELAY:NOBIND
/DELAY:UNLOAD
/DRIVER:UPONLY
/DRIVER:WDM
/DYNAMICBASE
/ERRORREPORT:NONE
/ERRORREPORT:PROMPT
/ERRORREPORT:QUEUE
/ERRORREPORT:SEND
/FAu Defines a setting that needs very customized processing
/FORCE /FORCE:MULTIPLE
/FORCE:UNRESOLVED
/FUNCTIONPADMIN
/FUNCTIONPADMIN:16
/FUNCTIONPADMIN:5
/FUNCTIONPADMIN:6
/KEYCONTAINER
/LARGEADDRESSAWARE
/LIBPATH /MANIFESTDEPENDENCY:
/LTCG:PGInstrument
/LTCG:PGOptimize
/LTCG:PGUpdate
/LTCG:STATUS
/MACHINE:ARM
/MACHINE:EBC
/MACHINE:IA64
/MACHINE:MIPS
/MACHINE:MIPS16
/MACHINE:MIPSFPU
/MACHINE:MIPSFPU16
/MACHINE:SH4
/MACHINE:THUMB
/MACHINE:X64
/MACHINE:X86
/MANIFESTUAC
/MAPINFO:EXPORTS
/ManifestFile
/NOASSEMBLY
/NODEFAULTLIB
/NXCOMPAT:NO
/PDBSTRIPPED
/SUBSYSTEM:CONSOLE
/SUBSYSTEM:EFI_APPLICATION
/SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER
/SUBSYSTEM:EFI_ROM
/SUBSYSTEM:EFI_RUNTIME_DRIVER
/SUBSYSTEM:NATIVE
/SUBSYSTEM:POSIX
/SUBSYSTEM:WINDOWS
/SUBSYSTEM:WINDOWSCE
/SWAPRUN:CD
/SWAPRUN:NET
/VERBOSE:CLR
/VERBOSE:ICF
/VERBOSE:Lib
/VERBOSE:REF
/VERBOSE:SAFESEH
/WX Options found in MSVS that have been renamed in MSBuild.
/Wall Options found in MSVS that have been renamed in MSBuild.
/Zc:forScope
/Zc:wchar_t
/app_config
/char ascii7
/char signed
/char unsigned
/client none
/client stub
/error allocation
/error bounds_check
/error enum
/error none
/error stub_data
/errorReport:none
/errorReport:prompt
/errorReport:queue
/errorReport:send"
/fp:precise
/hashupdate
/inputresource
/l arg must be in hex without leading '0x'
/lcid DECIMAL
/managedassemblyname
/mktyplib203
/no_def_idir
/nodependency
/oldtlb Directives for converting VCLibrarianTool to Lib.
/outputresource
/path/to/bin/dir/swift-api-dump.py -3 -o output-dir -m UIKit -s iphoneos
/replacements
/robust MSBuild options not found in MSVS.
/showIncludes
/u MSBuild options not found in MSVS.
/v There is no UI in VisualStudio 2008 to set the following properties.
/verbose Options that have moved location.
1 means line-buffered.
25 lines seems like a good cutoff since that's the usual height of terminals, and any class that can't fit in one screen can't really be considered "small".
6564240 Xcode "custom script" build rules always dump all environment variables.
6584839 I need a way to declare additional inputs to a custom rule.
6584932 Need to declare that custom rule outputs should be excluded from compilation.
6588600 Xcode compiles custom script rule outputs too soon, compilation fails.
8859-15, CP866, and ROMAN all cause issues with this generator.
:rfc1034identifier is used in the standard project template these days, and :identifier was used earlier.
:standardizepath
A "concrete output" is a rule output with input-dependent variables resolved.
A "rule source" is a file that was listed in a target's "sources" list and will have a rule applied to it on the basis of matching the rule's "extensions" attribute.
A .gyp file is allowed to refer back to itself.
A GNU-style inline assembler statement.
A MS inline assembly statement extension.
A Objective-C dynamic decl
A Objective-C synthesize decl
A PBXBuildFile that refers to this object will call this method to obtain additional hashables specific to this XCFileLikeElement.
A PBXProject is really just an XCObject, the XCContainerPortal thing is just to allow PBXProject to be used in the containerPortal property of PBXContainerItemProxy.
A Type alias decl.
A bit hacky.
A break statement.
A bundle directory depends on its dependencies such as bundle resources and bundle binary.
A case statement.
A character literal.
A closing punctuation without matching opening punctuations.
A compound statement
A context manager for changing the current working directory.
A continue statement.
A default statement.
A dictionary mapping supported target types to extensions.
A dictionary of settings converters.
A do statement.
A few keys that we don't want to propagate.
A file must be specified when using --list.
A floating point number literal.
A for statement.
A function may not exist, if these bindings are used with an older or incompatible version of libclang.so.
A function may not exist, if these bindings are used with an older or incompatible version of sourcekitd.
A function or method parameter.
A function.
A good enough test.
A goto statement.
A labelled statement in a function.
A line describing a dependency.
A linkage specification, e.g. 'extern "C"'.
A list of dependencies associated with a project.
A list of dependency build file paths that haven't been scheduled yet.
A list of ignored prefixes for module index sorting.
A list of sections that contain links to other targets.
A list of types that are treated as linkable.
A map of Domain names to HandlerDomains.
A map of header name to linenumber and the template entity.
A mapping from BMP first-level index to BMP data block index.
A mapping from supp first-level index to an index of the second-level lookup table.
A minimal memoizing decorator.
A parent of an XCTarget must be a PBXProject object.
A parent reference is required for a PBXNativeTarget during construction to be able to set up the target defaults for productReference, because a PBXBuildFile object must be created for the target and it must be added to the PBXProject's mainGroup hierarchy.
A particular header is only expanded once, so this script will break if there are multiple inclusions of the same header that are expected to expand differently.
A pet peeve of mine: no spaces after an if, while, switch, or for
A piece of text that describes something about the result but should not be inserted into the buffer.
A possible workaround is a shell script phase prior to compilation that touches a rule's primary input files if any would-be additional inputs are newer than the output.
A possible workaround is to lie to Xcode about a rule's output, giving it a dummy file it doesn't know how to compile.
A reference to a class template, function template, template template parameter, or class template partial specialization.
A reference to a labeled statement.
A reference to a member of a struct, union, or class that occurs in some non-expression context, e.g., a designated initializer.
A reference to a namespace or namepsace alias.
A reference to a set of overloaded functions or function templates that has not yet been resolved to a specific function or function template.
A reference to a type declaration.
A regex matching an argument corresponding to the output filename passed to link.exe.
A return statement.
A set of all intra-cluster edges
A single unnamed argument for a function tends to look like old style cast.
A small utility to take the output of a Swift validation test run where some compiler crashers have been fixed, and move them into the "fixed" testsuite, removing the "--crash" in the process.
A statement whose specific kind is not exposed via this interface.
A static library should not depend on another static library unless the dependency relationship is "hard," which should only be done when a dependent relies on some side effect other than just the build product, like a rule or action output.
A string literal.
A subset of target_outputs.
A switch statement.
A text node does not have properties.
A trie with one lookup table consists of two memory blocks:
A trie with two-stage lookup tables consists of three memory blocks.
A type reference occurs anywhere where a type is named but not declared.
A variable.
A warning about missing end of namespace comments will be issued instead.
A while statement.
ASM-ATT does not support .S files.
Absolute paths are in dstSubfolderSpec 0.
Abstract base for objects that can be used as the containerPortal property of PBXContainerItemProxy.
Abstract base for objects that can be used as the fileRef property of PBXBuildFile.
Abstract base for objects that can be used as the remoteGlobalIDString property of PBXContainerItemProxy.
Accept any year number from 2009 to the current year.
Accept unicode where str is specified.
Access to a protected member.
Actions cd into the base directory.
Actions must come first, since they can generate more OBJs for use below.
Actual conversion gives ''
Actually we didn't see any function name on this line, so this is likely a multi-line parameter list.
Adaptor class for mixing declarations with statements and expressions.
Add "copies".
Add "mac_bundle_resources" and "mac_framework_private_headers" if it's a bundle of any type.
Add "mac_framework_headers".
Add "sources".
Add -F / -I arguments.
Add Post-build.
Add Pre-build.
Add a build action to call makefile.
Add a dependency to a target in a different project file.
Add a dependency to another target in the same project file.
Add a folder for excluded files.
Add a new PBXBuildFile to get file_ref into the phase.
Add a rule that declares it can build each concrete output of a rule source.
Add actions.
Add all concrete outputs to the project.
Add all inputs to sources and excluded sources.
Add all the files to the queue
Add an alias from the gyp target name to the Android module name.
Add any dependencies whose settings should be imported to the list if not already present.
Add any paths that contain custom themes here, relative to this directory.
Add any paths that contain templates here, relative to this directory.
Add attributes to root element
Add children that the schema doesn't know about.
Add configuration node and its attributes
Add copies.
Add custom shell script phases driving "make" for "rules" sections.
Add custom shell script phases for "actions" sections.
Add defines.
Add dependencies before libraries, because adding a dependency may imply adding a library.
Add dependencies to visit as well as updating back pointers for deps.
Add dependency from bundle to bundle binary.
Add disabled warnings.
Add each rule.
Add excluded items to the excluded list.
Add excluded sources into sources for good measure.
Add gyp/gypi files to project
Add header and write it out.
Add in 'action' inputs and outputs.
Add in 'copies' inputs and outputs.
Add in dependency-tracking rules.
Add in files.
Add in libraries, note that even for empty libraries, we want this set, to prevent inheriting default libraries from the enviroment.
Add in libraries.
Add in the gyp file.
Add in the outputs from this rule.
Add in this configuration.
Add in this tool.
Add in user specified msvs_settings.
Add it there.
Add it to in_degree_zeros where it will be processed in a future iteration of the outer loop.
Add it to the makefile.
Add its children.
Add makefile to list of sources.
Add or get a PBXFileReference.
Add or get a PBXGroup corresponding to the outermost path component, and then recurse into it, chopping off that path component.
Add or get a PBXVariantGroup.
Add our outputs to the list of targets we read depfiles from.
Add precompile if needed
Add prefix "user.nuclide" to avoid collision.
Add props files.
Add rules file to project.
Add run_as and test targets.
Add sections only found in the MSBuild settings.
Add special-case rules for our installable targets.
Add the DebugSettings onto the appropriate config.
Add the _asm suffix as msvs is capable of handling .cc and .asm files of the same name without collision.
Add the action.
Add the command to trigger build of the target type depending on the toolset.
Add the config to the file node
Add the custom build action for one input file.
Add the custom build step for one input file.
Add the filter to the group.
Add the hashables of the remote PBXProject that it's related to.
Add the information to the appropriate tool
Add the library's directory to LIBRARY_SEARCH_PATHS if necessary.
Add the new targets.
Add the path to the dict.
Add the path to this python here so that if it's not in the path when ninja is run later, python will still be found.
Add the run target to the project file.
Add the special "objects" property, which will be caught and handled separately during printing.
Add them to the dependencies list if they're not already present.
Add this one.
Add to new_data.
Add to new_target_dicts.
Add to new_target_list, new_target_dicts and new_data.
Add to new_target_list.
Add to the properties of primary input for each config.
Add to the set of targets which represent the gyp 'all' target.
Add tool nodes and their attributes
AddSourceToTarget will add the file to a root group if it's not already there.
Adding an extra quote would correct the problem in the VCProj but cause the same problem on the final command-line.
Adding an object file to an Xcode target's frameworks phase works properly.
Adds the appropriate environment variable.
Adds the link flags for extensions.
Adjust it for calls.
Admittedly not the best name, but it's what Xcode uses.
Admittedly, this is different than the evaluation order in other contexts.
After some discussion, hacking around it here seems like the least amount of pain.
After the framework is built, package it.
All control frames MUST have a payload length of 125 some_bytes or less
All items in list_actions are initialized to -1 because no excludes or includes have been processed yet.
All of the dependent's dependencies are already in flat_list.
All of the out params of the functions that follow use names like extra_foo.
All of this stuff about generator variables was lovingly ripped from gypd.py.
All paths as written into the .ninja files are relative to the build directory.
All projects, their clsid and paths.
All rights reserved.
All such debugger tests live under something/debugger/foo.php.
All the certificate/key files share the same prefix "nuclide.random_id".
All the lines have been processed, report the errors found.
Allow 8Gb per link on Linux because Gold is quite memory hungry
Allow comparison of these types.
Allow the template to import .py files from its own directory
Already been well guarded, no need for further checking.
Already defined
Already loaded.
Also check if we are starting or ending an inline assembly block.
Also ignore things that look like operators.
Also ignores cases where the previous line ends with a backslash as can be common when defining classes in C macros.
Also pop these stack for these.
Also remove duplicate entries, leaving only the last duplicate, while preserving order.
Also set the "PRODUCT_NAME" build setting in each configuration, but only if the setting is not present in any build configuration.
Also skip checks if we are on the first line.
Also use quotation marks to represent empty strings.
Also validate actions and run_as elements in targets.
Also, for list expansions, there can be no other text besides the variable expansion in the input string.
Alternative tokens and their replacements.
Although XCProjectFile is implemented here as an XCObject, it's not a proper object in the Xcode sense, and it certainly doesn't have its own ID.
Always NO, because we generate a manifest file that has what we want.
Always add 'executable' targets.
Always force dependent targets to relink if this library reexports something.
Always include targets matching target_extras.
Always look at dependencies of the initial target, and always look at dependencies of non-linkables.
An Objective-C "bridged" cast expression, which casts between Objective-C pointers and C pointers, transferring ownership in the process.
An Objective-C class method.
An Objective-C instance method.
An Objective-C instance variable.
An XCTarget is really just an XCObject, the XCRemoteObject thing is just to allow PBXProject to be used in the remoteGlobalIDString property of PBXContainerItemProxy.
An additional grant of patent rights can be found in the PATENTS file in the same directory.
An amalgamation consists of a header that includes the contents of all public headers and a source file that includes the contents of all source files and private headers.
An array of BMP data blocks.
An array of second-level lookup tables.
An array of supp data blocks.
An else clause should be on the same line as the preceding closing brace.
An enumeration.
An enumerator constant.
An error code has been sent, just exit
An expression that calls a function.
An expression that refers to a member of a struct, union, class, Objective-C class, etc.
An expression that refers to some value declaration, such as a function, varible, or enumerator.
An expression that represents a block literal.
An expression that sends a message to an Objective-C object or class.
An extent has a `start` and `end` property, each of which have a `line` and `column` property.
An if statement.
An imaginary number literal.
An indirect goto statement.
An inherited dict maps keys to values.
An integer literal.
An unknown error occurred
And always add static_libraries that have no dependencies on them from linkables.
And count them later, when we see something real.
And since you should never have braces at the beginning of a line, this is an easy test.
Android NDK requires a strict link order.
Android uses separate flags for assembly file invocations, but gyp expects the same CFLAGS to be applied:
Android's envsetup.sh adds a number of directories to the path including the built host binary directory.
Anonymous namespace
Another process can be created in the meantime
Any changes to these affect the resulting output.
Any dict merged into the_dict will be recursively processed for nested conditionals and other expansions, also according to phase, immediately prior to being merged.
Any keys in the_dict's "variables" dict, if it has one, becomes a variable.
Any keys with plain string values in the_dict become automatic variables.
Any other error
Any string that doesn't begin with a "-" is a singleton - it can only appear once in a list, to be enforced by the list merge append or prepend.
Any tests that fail will be added to the global skipif via a makework PHP program by this script.
Any values set globally are applied to all configurations, then any per-configuration values are applied.
Apparently putting the script step after the link step isn't sufficient to ensure proper ordering in all cases.
Append and prepend are the only policies that can coexist.
Append the src dir
Apply "latelate" variable expansions and condition evaluations.
Apply "post"/"late"/"target" variable expansions and condition evaluations.
Apply "pre"/"early" variable expansions and condition evaluations.
Apply globals so that the worker process behaves the same.
Arrange to strip off the quotes so that it shows up in the output as expected.
As a result, link_directories must come before the target definition.
As a workaround, manually expand variables at gyp time.
As in the referenced document, the rules are specified in order of decreasing priority.
As short names are  not necessarily unique only do this for short names that haven't already been output for another target.
AsioContexts are numbered from 1.
Assertion macros.
Assign that to 'comm' field.
Associate the frame pointer with the un-inlined frame.
Assume it is.
Assume it's a dict, otherwise a callable to do the remap.
Assume that the TC is above the data section, but restricted to low memory.
Assume the child's properties, including its children.
Assume to be Facebook linux devserver.
Assuming file locations: utils/swift_build_support/tests/test_migration.py utils/build-script-impl
Assure that the rule name is only characters and numbers
AsyncFunction, AwaitAll, and Condition wait handles.
AsyncFunctionWaitHandles have a slightly different layout.
At least one of "name" and "target" is required.
At least one of the operands must be a constant literal.
At least, it provides a way to workaround this warning for people who use multi-line comments in preprocessor macros.
At this moment, the port is either open, or we have an existing server running.
At this point, all that should be left is actual casts.
At this stage, check that child class types are PBXGroup exactly, instead of using isinstance.
Atom 1.5.3 for sure, maybe later ones too:
Atom 1.6.1 for sure:
Atom 1.6.2 for sure:
Attach actions to the gyp file if nothing else is there.
Attempt to make the file writable before deleting it.
Attempting to unpack a non-sequence.
Automatically adapt CIndex/ctype pointers to python objects
Avoid preprocessor lines
BMP code points are 16-bit values.
Bad indent.
Based on http://code.activestate.com/recipes/576694/.
Be careful to convert "4.2" to "0420":
Be consistent with the main Nuclide logs.
Be sure not to return anything and potentially call a destructor on nothing.
Be sure the script runs in exec, and that if exec fails, the script exits signalling an error.
Because Xcode's rule engine is not being used, they need to be expanded as they are written to the makefile.
Because only whitespaces are allowed before the keywords, this will also ignore most do-while-loops, since those lines should start with closing brace.
Because this parser has no nesting state about templates, by the time it saw "class Comparator", it may think that it's a new class.
Before nixing comments, check if the line is blank for no good reason.
Below is the logic to compute the dependency graph and sort it.
Benchmarks that are run as part of other benchmarks are excluded.
Besides these, we don't accept anything else, otherwise we might get false negatives when existing comment is a substring of the expected namespace.
Better yet, callers can just call AddFile with a pathname and not worry about building their own PBXBuildFile objects.
Big-O running times for all methods are the same as for regular dictionaries.
Block bodies should not be followed by a semicolon.
Boolean to declare that this target does not want its name mangled.
Both spellings are acceptable:
Both the original parent and child have paths set.
Braces are also used for brace initializers inside function calls.
Bring such projects up one level.
Bucket targets by file.
BufferingHandler is old styled class, so we can't use super here.
Build 'self.symbolic_values' -- an array that maps numeric property values to symbolic values.
Build a dict to access each target's subdict by qualified name.
Build and start the HTTP response
Build systems that operate serially or that need to have dependencies defined before dependents reference them should generate targets in the order specified in flat_list.
Build up a list of outputs.
Build up a list of products in the remote project file, ordered the same as the targets that produce them.
Builtins don't have source files.
Bump up the version for upgrade.
Bundle all of the above together, if needed.
Bundle dependencies.
Bundle postbuilds can depend on the whole bundle, so run them after the bundle is packaged, not already after the bundle binary is done.
Bundle resources.
But XCTarget is defined below, so it can't be put into the schema yet.
But don't append empty tool node.
But if the new text contains any line breaks, we can create one
But in many cases, after trie compression there will be fewer than 256 unique second-level lookup tables and/or data storage blocks, which allows one to use 8-bit words in lookup tables.
But it's still good enough for CheckSectionSpacing.
But the naive approach would put the TOC file into the bundle, so don't do this for bundles for now.
But we still issue warnings for macros that we know are safe to warn, specifically: - TEST, TEST_F, TEST_P, MATCHER, MATCHER_P - TYPED_TEST - INTERFACE_DEF - EXCLUSIVE_LOCKS_REQUIRED, SHARED_LOCKS_REQUIRED, LOCKS_EXCLUDED:
By convention, it's called "all".
By default, it only gets you your Nuclide server processes.
By doing this we detach the socket from the CherryPy stack avoiding memory leaks
CFLAGS et al overrides must be target-local.
CHROMIUM_STRIP_SAVE_FILE is a chromium-specific hack.
CMAKE_CURRENT_LIST_DIR is where the CMakeLists.txt lives.
CMake by default names the object resulting from foo.c to be foo.c.o.
CMake gets upset when executable targets provide no sources.
CMake gets upset with custom targets with OUTPUT which specify no output.
CMake has it's own implicit 'all' target, one is not created explicitly.
CMake is opposed to setting linker directories and considers the practice of setting linker directories dangerous.
CMake unfortunately has no means of removing entries from LINK_DIRECTORIES.
CMakeList multi-source
CMakeList single-source
Cache code completion information on parse.
Cache return value
Cache the libclang version.
Cache values for speed.
Calculate a MD5 signature for the seed and name.
Calculate the population standard deviation
Call MergeLists, which will make copies of objects that require it.
Call these "gyp paths".
Call these paths "ninja paths".
Cannot find a pretty printer.
Capture stderr output such as 'tar: Failed to open ...'.
Capture these now so we can adjust them later.
Cast to string from possible unicode.
Change all dependencies clsid to name instead.
Change program database directory to prevent collisions.
Change stderr to write with replacement characters so we don't die if we try to print something containing non-ASCII characters.
Change strings into bits.
Change the default common name and verify it upgrades the existing server.
Changing this will break server upgrade, as we rely on it to find existing servers.
Characters above the ASCII range are passed through to the output encoded as UTF-8 without any escaping.
Cheap and easy.
Check first line
Check for None, corresponding to the root node.
Check for a cached value to avoid executing commands, or generating file lists more than once.
Check for custom main gyp name, otherwise use the default CHROMIUM_GYP_FILE and prepend .ninja before the .gyp extension.
Check for express.
Check for full.
Check for non-const references in function parameters.
Check for people declaring static/global STL strings at the top level.
Check for templated parameter that is split across multiple lines
Check for those first.
Check for use of unnamed namespaces in header files.
Check how many lines is enclosed in this namespace.
Check if multiple architectures are supported by the object file.
Check if people are using the verboten C basic types.
Check if some verboten C functions are being used.
Check if the // may be in quotes.
Check if the line is a header guard.
Check if this file is copied into the current bundle, and if so add it to the bundle depends so that dependent targets get rebuilt if the copy input changes.
Check if we are running in the SDK command line environment and use the setup script from the SDK if so.
Check if we need to display coverage info for interested files.
Check ipv4 address.
Check ipv6 address.
Check last line
Check matching closing brace
Check pointer casts for other than string constants
Check that closing brace is aligned with beginning of the class.
Check that no two targets in the same directory have the same name.
Check that rhs do not contain logical operators.
Check the configurations to see if they contain invalid keys.
Check the map using a lowercase extension.
Check the token before the matching opening parenthesis, and don't warn if it looks like a macro.
Check to see if the compiler was specified as an environment variable.
Check to see if they're using an conversion function cast.
Checking stat of ' ' races with mkdir_variation1
Checks passed, perform the assignment.
Chrome lines start at 0
Chromium uses DXSDK_DIR in include/lib paths, but it may or may not be set.
Chromium's .gyp files currently have some circular relationships on non-Mac platforms, so this option allows the strict behavior to be used on Macs and the lenient behavior to be used elsewhere.
Clang 3.8 comes with CXTranslationUnit_CreatePreambleOnFirstParse, which allows us to skip the forced reparse.
Clang indexes for line and column are 1-based.
Class-like cursors.
Clean up bad processes and old files.
Clean up by restoring the backup.
Clean up multiple Nuclide processes on same port.
Clean up old core dumps.
Cleaning up resources
Clear cache.
Client is initiating connection.
Client is not yet ready to process next token
Close tmp file.
Close up the file.
Closure class name
Closure names change
Closure::bind.
Coalesce multiple "copies" sections in the same target with the same "destination" property into the same PBXCopyFilesBuildPhase, otherwise they'll wind up with ID collisions.
Collapse into a single command.
Collapse settings with lists.
Collapse singles.
Collect a list of all of the build configuration names used by the various targets in the file.
Collect all of the framework names
Collect all the run test targets.
Collect the names of the directories that are required.
Collect the output dirs we'll need.
Collect the set of frameworks we should dump
Collect the set of submodules for the given module.
Collect the submodules
Combine the rest tokens into the full command.
Comma not followed by space.
Command-line --include files come after the default include.
Commands for precompiled header files.
Compilation flags often contain symlinks.
Compile regular expression that matches all the above keywords.
Compile targets are found by searching up from changed targets.
Compiled XIB files are referred to by .nib.
Compiled storyboard files are referred to by .storyboardc.
Complain if this target is already used.
Components are:
Compute an rpath for this output if needed.
Compute filename extension: the product extension, or a default for the product type.
Compute filename prefix: the product prefix, or a default for the product type.
Compute predepends for all rules.
Compute the list of variables we'll need to provide.
Compute the relative path from there to the output_file for including.
Concatenate back into a single string
Concrete outputs were already added when they were computed.
Condensed ISO-8601 date/time format
Conditional processing may have resulted in changes to automatics or the variables dict.
Configure the options.
Consequently, until Xcode rules are made more capable, "rules" input sections will be handled in Xcode output by shell script build phases performed prior to the compilation phase.
Consider target "t" rule "A_r" and target "t_A" rule "r".
Construct the set of API dumps we should perform.
Consume braces or semicolons from what's left of the line
Consume namespace declaration at the beginning of the line.
Continue right now without falling into the index increment below.
Continue scanning backward
Continue scanning forward
Controls whether or not the generator supports multiple toolsets.
Convenience Functions
Convenient functions for printing out information on the build process.
Conversion to opposite signedness is never truncating.
Convert Xcode-type variable references to sh-compatible environment variable references.
Convert all strings that are canonically-represented integers into integers.
Convert into a tree of dicts on path.
Convert it to a string
Convert ns to ms
Convert the macros
Convert to folders and the right slashes.
Convert to folders recursively.
Convert to proper windows form.
Converts a Clang `SourceLocation` into a dict.
Converts a Clang `SourceRange` into a dict.
Converts a python source from stdin to JSON formatted AST on stdout.
Copies all the phplang-spec tests to a temporary directory, runs them in interp mode, then copies the good ones to test/spec/good and the bad ones to test/spec/bad.
Copy a reference to the TranslationUnit to prevent premature GC.
Copy additional generator configuration data from VS, which is shared by the Eclipse generator.
Copy additional generator configuration data from VS, which is shared by the Windows Ninja generator.
Copy additional generator configuration data from Xcode, which is shared by the Mac Make generator.
Copy additional generator configuration data from Xcode, which is shared by the Mac Ninja generator.
Copy out only the edges we're interested in from the full edge list.
Copy passed list
Copy test_dir and its contents to backup so we can restore it later.
Copying the environment variables into global make variables doesn't work either, because then the .d files will potentially contain spaces after variable expansion, and .d file handling cannot handle spaces.
Copyright 2013 Google Inc.
Copyright 2015-present, Facebook, Inc.
Count non-blank/non-comment lines.
Count parentheses.
Count sleep and external thread events.
Count the number of contexts, and print the topmost.
Count the number of queued runnables.
Create a .swift file we can feed into swift-ide-test
Create a DependencyGraphNode for each gyp file containing a target.
Create a DependencyGraphNode for each target.
Create a bogus validator that looks for '0', '1', or '2'
Create a graph of the protocol refinement relationships, associated types, operator requirements, and defaulted generic operators.
Create a source entry.
Create a tool in the compiler that knows how to dump the passes and the pipelines themselves.
Create an "All" target if there's more than one target in this project file and the project didn't define its own "All" target.
Create an XCTarget subclass object for the target.
Create an extended_line, which is the concatenation of the current and next lines, for more effective checking of code that may span more than one line.
Create an intermediate file based on the path.
Create an intermediate file to store preprocessed results.
Create folder hierarchy.
Create new server objects to rebind and check states again.
Create object for this project.
Create reference to TU so it isn't GC'd before Cursor.
Create solution.
Create sources target.
Create the name of that sub-filter.
Create the sets of arguments to dump_module_api.
Create the various element names, following the example set by the Visual Studio 2008 to 2010 conversion.
Create variables for the output, as 'local' variable will be unset.
Currently any versions have the same effect, but in future the behavior could be different.
Currently the only local property we support is PlatformToolset
Currently these are all "dummy" values that we're just setting in the default manner that MSVS does it.
Currently this weird argument munging is used to duplicate the way a python script would need to be run as part of the chrome tree.
Currently we can't even get the diagnostics on failure because they refer to locations in an object that will have been invalidated.
Currently, all tests appear to be able to be run in parallel.
Currently, only 'pymod_do_main' is supported.
Custom Nuclide fields
Cyclic import.
DB should have atleast one value for scan to work
Decide the guid of the project.
Decide the set of replacement macros that should be suggested
Declarations and trivial functions
Default core dump location on Linux machines.
Default debug modes for GYP
Default defines already processed in the loop above.
Default encoding UTF-8.
Default filters always have less priority than the flag ones.
Default home folder.
Default is True.
Default is the same as html_title.
Default open ports.
Default parsing mode.
Default to 2005 if we couldn't find anything
Default to Win32 for platforms.
Default variables provided by this program and its modules should be named WITH_CAPITAL_LETTERS to provide a distinct "best practice" namespace, avoiding collisions with user and automatic variables.
Define a dir function that can handle spaces.
Define an escape_quotes function to escape single quotes.
Define how each output is generated.
Delegate everything else to self.tmp_file
Delete the file
Delete the lists that are known to be unneeded at this point.
Delete the old filter file.
Deleting an existing item uses self.__map to find the link which is then removed by updating the links in the predecessor and successor nodes.
Dependencies
Derived properties
Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and ClCompile in MSBuild.
Destructors should still be visible, so add two of them.
Detach/Kill inferior.
Detect variable-length arrays.
Detects errors in Nuclide pacakge.json files.
Determine how much of the prefix the two paths share.
Determine if different.
Determine the SDK root and collect the set of frameworks.
Determine the default target.
Determine the output idirectory
Determine the set of extra arguments we'll use.
Determine which targets need shimming.
Dictionaries of settings validators.
Dicts to map between values found in rules' 'rule_name' and 'extension' keys and the rule dicts themselves.
Did not find endchar before end of file, give up
Did not find startchar before beginning of file, give up
Didn't find a known root, just return the original path
Directives for MASM.
Directives for converting MSVS VCLinkerTool to MSBuild Link.
Directives for converting VCMIDLTool to Midl.
Directives for converting VCManifestTool to Mt.
Directives for converting VCResourceCompilerTool to ResourceCompile.
Directly depend on all the runners as they depend on the target that builds them.
Directory all our build output goes into.
Display types for variables and typedefs.
Do a first round of toolsets expansion so that conditions can be defined per toolset.
Do a quick scan to determine if an expensive regex search is warranted.
Do a regular expression match here to make sure that we are matching the expected CHECK macro, as opposed to some other macro that happens to contain the CHECK substring.
Do an extra check to avoid work when we're not debugging.
Do expansions on the condition itself.
Do not check those function parameters.
Do not parse function bodies.
Do not write out dependency files.
Do nothing if there was no precompiled source.
Do the same kind of validation.
Do this after sorting the targets, because the Products group is sorted based on the order of the targets.
Documents to append as an appendix to all manuals.
Does not apply to projects, only folders
Doesn't generate .o.d files.
Doesn't work with spaces, but that's fine: .d files have spaces in their names replaced with other characters."""
Don't add actions if we are using an external builder like ninja.
Don't add quotes around it because then built-ins like 'echo', etc.
Don't allow clicks/tooltips on most declarations, as their content is usually obvious.
Don't bother creating the extra targets in that case.
Don't call normpath in this case, as it might collapse the path too aggressively if it features '..'.
Don't declare any inputPaths or outputPaths.
Don't define a truncating conversion between a type and itself.
Don't do this for ones that are precompiled header related.
Don't even pull these into the repo.
Don't excluded sources with actions attached, or they won't run.
Don't forget there's a dummy line at the front.
Don't generate rules if we are using an external builder like ninja.
Don't include extension.
Don't insert a msvs_system_include_dirs key if not needed.
Don't issue warning for missing namespace comments if there aren't enough lines.
Don't just insert everything at index 0.
Don't leave turds behind.
Don't merge the 'Name' attribute.
Don't mutate the caller's copy of the arguments.
Don't see a whitelisted function on this line.
Don't set default value of certs_dir, so that we can just check certs_dir for None.
Don't setup_env every time.
Don't traverse 'none' targets if explicitly excluded.
Don't use "elided" lines here, otherwise we can't check commented lines.
Don't warn on any kind of template arguments.
Don't warn on assignments to function pointers, but keep warnings for unnamed parameters to pure virtual functions.
Don't warn on function pointer declarations.
Don't waste time here if line doesn't contain 'CHECK' or 'EXPECT'
Don't write postbuilds for target's output.
Done if not processing outputs as sources.
Drop abstract.
Drop last 2 NULs, one for list terminator, one for trailing vs.
Dump and load in hex
Dump and load with WAL disabled
Dump and load with lots of extra params specified
Dump and load without any additional params specified
Dump command fails because of typo in params
Dump each submodule.
Dump only a portion of the key range
Dump out/ directory.
Dump resources to files and set up mock files.
Dump sleep and external thread event stacktraces.
Dump the API for the given module.
Dump the async stacktrace.
Dump the top-level module
Dump upto max_keys rows
Dump with count_only
Each Gyp configuration creates a different CMakeLists.txt file to avoid incompatibilities between Gyp and CMake configurations.
Each WaitHandle has its own states...
Each character is 6 bits: 5 of value and the high bit is the continuation.
Each file will have two lines of report, from which we can extract the file name, total lines and coverage percentage.
Each item in a conditions list consists of cond_expr, a string expression evaluated as the condition, and true_dict, a dict that will be merged into the_dict if cond_expr evaluates to true.
Each item is a list of all of the concrete outputs for the rule_source.
Each of the child benchmarks emit their own line.
Each second-level lookup table is a mapping from a supp second-level index to supp data block index.
Else a postbuild might pick up an export from an earlier target.
Else returns whether x is in l.
Emit failure tag, and keep going.
Emulate this behavior for mac.
Emulates the frontend of a -whole-module-optimization compilation.
Emulates the frontend of an -embed-bitcode job.
Enable core dump by change ulimit to infinity.
Enable project in this solution configuration.
Enable v3_req extensions.
End the object.
Enter assembly block
Entry type GUID
Escape all quotes so that they are interpreted literally.
Escape codes should already be removed by ESCAPES.
Establish the link.
Evaluate conditions sections, allowing variable expansions within them as well as nested conditionals.
Even if strip_save_file is empty, explicitly write it.
Even though they may be built by other targets that depend upon them it makes detection of what is going to be built easier.
Event loop terminates, shutdown chrome server app.
Eventually we should add some sort of rule_default option to set this per project.
Every request should have an id that must also be present in the response.
Every target will appear in flat_list after all of its dependencies, and before all of its dependents.
Everything else gets its replacement from the class' _encode_transforms array.
Everything else in this function operates on class declarations.
Everything else needs to be relative to an Xcode variable.
Ex: BUILD_STATIC_LIBRARY vs.
Exactly mirror spec's directories We'll only move things we want into 'good'
Exactly mirror zend's directories incase some tests depend on random crap.
Example: "main.cc in Sources"
Exclude anything in BUILT_PRODUCTS_DIR.
Exclude excluded sources coming into the generator.
Exclude excluded sources from being built.
Exclude lines with sizeof, since sizeof looks like a cast.
Exclude them now.
Excluded files can also go into the project file.
Executables are for build and test purposes only, so they're installed to a directory that doesn't get included in the system image.
Executables, mac kernel extensions and loadable modules are already fully and finally linked.
Execute swift-ide-test to print the interface.
Execute the API dumps
Execute the code with our __children__ in scope
Exhausted all earlier lines and still no matching angle bracket.
Exhausted all remaining lines and still no matching angle bracket.
Exit assembly block
Expand macros in all_system_includes.
Expand the rules into a matrix.
Expand variables and nested conditinals in the merge_dict before merging it.
Expanding in list context.
Expanding in string context.
Expecting closing angle bracket
Expecting closing parenthesis or closing bracket
Expecting opening angle bracket
Expecting opening parenthesis or opening bracket
Explicitly absolutify these.
Explicitly telling make that it has nothing to do for them makes it go faster.
Extend the Clang C bindings with the additional required functions.
Extend the list of vsprops with all vsprops contained in the current vsprops.
Extension override.
Extensions to the recipe.
Extra functions from the libclang API.
Extra rule inputs also go into the project file.
Extract environment variables for subprocesses.
Extract the list of include dirs from the output, which has this format: ...
Extract value.
Extracts the build file from the fully qualified target.
FIXME Support slice objects.
FIXME: Document this assertion in API.
FIXME: Expose iteration from CIndex, PR6125.
FIXME: It would be great to support an efficient version of this, one day.
FIXME: There should just be an isNull method.
FIXME: redeclaring qux.php is unnecessary
FIXME: self.assertRaises context manager is not py2.6 compatible.
FIXME: sil-opt does not have the '-F' option.
Fail: did not receive proper initialization sequence.
Fallback to reg.exe if we fail to import _winreg.
False positives include C-style multi-line comments and multi-line strings but those have always been troublesome for cpplint.
Fetch the generator specific info that gets fed to input, we use getattr so we can default things and the generators only have to provide what they need.
Figure out all the projects that will be generated and their guids
Figure out the pathname that this project needs to use to refer to the other one.
Figure out the underlying type of the enum to know if it is a signed or unsigned quantity.
Figure out what the contents of the variable parens are.
File representing the completion of actions/rules/copies, if any.
File representing whether any input dependencies necessary for dependent actions have completed.
File representing whether any input dependencies necessary for dependent compiles have completed.
Files that aren't added to a sources or frameworks build phase can still go into the project file, just not as part of a build phase.
Files that have no dependencies are treated as dependent on root_node.
Filter junk out of stdout, and write filtered versions.
Filter out comm and command column and then append it to the end so that we can use space as delimiter.
Filter out empty strings.
Filter out those which do not match prefix and suffix and produce the resulting list without prefix and suffix.
Filter the system libraries, which are added by default by the Android build system.
Finalize1 is responsible for sorting duty, and once all project files are sorted, Finalize2 can come in and update these references.
Finalize2 needs to happen in a separate step because the process of updating references to other projects depends on the ordering of targets within remote project files.
Finally, we use the prett xml function to print the vcproj back to the user.
Finally, wrap the whole thing in quotes so that the above quote rule applies and whitespace isn't a word break.
Find Xcode.
Find all of the submodule imports.
Find and use existing Nuclide server's port if there is a match, or obtain an open port.
Find cl.exe location for this architecture.
Find compiler's default include dirs.
Find cygwin style versions of some paths.
Find end of the boolean expression by matching parentheses
Find lower bound.
Find opening parenthesis.
Find path to cygwin.
Find reference to base class.
Find standard gyp include dirs.
Find the "real" replacement, matching the appropriate closing paren, and adjust the replacement start and end.
Find the build file's directory, so commands can be run or file lists generated relative to it.
Find the config, and add it if it doesn't exist.
Find the end of the conditional expression
Find the ending paren, and re-evaluate the contained string.
Find the excluded ones, minus the precompiled header related ones.
Find the file node with the right relative path
Find the max width for each column
Find the name of the binary based on the part before the ".framework".
Find the path to a CMake executable on the host machine.
Find the path to a Clang executable on the host machine that is most suitable for building Swift.
Find the position to start extracting text.
Find the previous operator
Find the rightmost space that would obey our width constraint and that's not an escaped space.
Find the starting native frame.
Find the test targets first.
Find the upper bound for our PC.
First create XML content definition
First element of included_files is the file itself.
First element that is found is copied to clipboard
First filter out pipelines.
First half of the duration, keep doing kill test.
First thing we need to do is find the Configuration Node and merge them with the vsprops they include.
First write out a rule for the action.
First write out a rule for the rule action.
First yield any literal we've accumulated
First, see if the compiler is configured in make's settings.
First, some definitions:
First, try to read the file using plistlib that only supports XML, and if an exception is raised, convert a temporary copy to XML and load that copy.
First, we need to normalize the paths so they are all relative to the toplevel dir.
Fix all the semicolon separated attributes to be sorted, and we also remove the dups.
Fix it up to make it relative to the build file dict that it's going into.
Fix the filenames to be absolute.
Fix up command with platform specific workarounds.
Fix up the path.
Flag to indicate if there was an error in a child process.
Flags to make gcc output dependency info.
Flags with values 16 and 32 are deprecated and intentionally omitted.
Flatten lists to strings.
Folder mappings Omit this section if there are no folders
Folder name
For Emacs's flymake.
For MSVS 2008 and earlier, we need to process all files before walking the sub folders.
For a list of options available for each theme, see the documentation.
For a non-literal quote, CommandLineToArgv requires an even number of backslashes preceding it, and it produces half as many literal backslashes.
For a variant path/to/Language.lproj/MainMenu.nib, put a variant group named MainMenu.nib inside path/to, and give it a variant named Language.
For any generated source, if it is coming from the shared intermediate directory then we add a Make rule to copy them to the local intermediate directory first.
For each dependencies in this project
For each node, take a copy, and remove it from the list.
For each remote project file, sort the associated ProductGroup in the same order that the targets are sorted in the remote project file.
For each source file, write an edge that generates all the outputs.
For each static library target, remove "dependencies" entries referring to other static libraries, unless the dependency has the "hard_dependency" attribute set.
For example, an action may have inputs in /usr/include, which are not in the source tree.
For example, if a method call is suggested, this chunk will be equal to the method return type.
For example, this allows unused code to appear as a warning instead of an error.
For example, to dump the API for all frameworks across OS X, iOS, watchOS, and tvOS, with the Swift 3 rules, use:
For example:
For if/for/while/switch, the left and right parens should be consistent about how many spaces are inside the parens, and there should either be zero or one spaces inside the parens.
For marking tests as always failing.
For migration, stop the forever monitor processes of Nuclide server.
For most actions, add 'call' so that actions that invoke batch files return and continue executing.
For now the behavior chrome needs is the default.
For now we do not warn for this case.
For now, return a dummy resource tree so various initializations in client happens.
For now, we don't do any special validation on these types:
For reasons of convention, the Android build system requires that all shared library modules are named 'libfoo' when generating -l flags.
For static libraries, no dSYMs are created.
For supp tables, perform bottom-up deduplication: first, deduplicate data blocks.
For the next half, try different modes.
For the rest, work with both comments and strings removed.
Force a re-parse, in case the user e.g. changed a header file.
Force app to exit on Ctrl-C.
Force ninja to use rsp files.
Format can be a custom python file, or by default the name of a module within gyp.generator.
Format upgrade_check_project_version with leading zeros as needed.
Fortunately, for most symboles, we do not need to perform a function call.
Fortunately, this logic is very fast, so it doesn't seem like we'll have to make it multi-threaded any time soon, so we can get away with sharing this field.
Found an operator, update nesting stack
Found matching angle bracket
Found the end of the string, match leading space for this line and resume copying the original lines, and also insert a "" on the last line.
Frame opcodes defined in the spec.
Frameworks Directory
FrameworksGroup and ProjectsGroup are top-level groups used to collect frameworks and projects.
Fresh init tests don't care about which files changed, so we can just use the default .hhconfig in the template repo
From Alex Martelli, http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52560 ASPN: Python Cookbook: Remove duplicates from a sequence First comment, dated 2001/10/13.
From SCons, not done in google style.
From http://stackoverflow.com/a/1160227.
Fully qualify all dependency links.
Function signature specialization of a generic specialization.
Function/method cursor kinds.
Functions calls through the python interface are rather slow.
Functions strictly alphabetical order.
Further, if a target has a non-hard dependency, but that dependency exports a hard dependency, the non-hard dependency can safely be removed, but the exported hard dependency must be added to the target to keep the same dependency ordering.
G will be non-null if any postbuild fails.
GDB doesn't add the script's dir to sys.path when sourcing.
GET required
GUIDs for project types
GYP allows such modules to be specified by setting a target type to loadable_module without having mac_bundle set.
GYP generated outputs.
GYP rules/actions express being no-ops by not touching their outputs.
Gather a list here to use later.
Gather a list of precompiled header related sources.
Gather files into the final result, excluded, or folders.
Gather list of unique platforms.
Gather stuff needed to emit all: target.
Gather the targets to shard, and how many pieces.
General information about the project.
Generate a key pair and a certificate signing request.
Generate a list that has all the include dirs.
Generate certificate authority.
Generate each project.
Generate other file names.
Generate suffix rules for all compilable extensions.
Generate the .xml file
Generate version file for the mock.
Generates a BFS of the views tree starting at the given view as root.
Generator flags should be prefixed with the target generator since they are global across all generator runs.
Generator-specific gyp specs.
Generators might not expect ints.
Get Nuclide server process info from ps.
Get a list of dependency targets that should be linked into this target.
Get all the inputs and outputs for this rule for this trigger file.
Get cert, key and ca.
Get commands for a given job from the determinator file
Get defines declared in the gyp files.
Get directory project file is in.
Get either the last message in the queue or None.
Get projects in the solution, and their dependents.
Get rid of '.ca.key'.
Get rid of the leading colon.
Get rid of unnecessary levels of depth in groups like the Source group.
Get the address and value of `mcg', the global MCGenerator pointer.
Get the entire list of matches as a list of MatchObject instances.
Get the information for this configuration
Get the inheritance relationship right by making a copy of the target dict.
Get the name of the current node.
Get the number of attributes
Get the old content
Get the port from the started Nuclide server, and use it in the next step.
Get the project file format version back out of where we stashed it in GeneratorCalculatedVariables.
Get the property sheets associated with this configuration.
Get the protocol version of the build.
Get the type name.
Get the unique output directories for this rule.
Give CMake as little information as possible so that it doesn't mess it up.
Give a warning.
Give everything an ID.
Give opening punctuations to get the matching close-punctuations.
Give the generator the opportunity to set additional variables based on the params it will receive in the output phase.
Give the generator the opportunity to set generator_input_info based on the params it will receive in the output phase.
Give up on breaking.
Given a remote_object, which should be a PBXFileReference in another project file, this method will return this group's PBXReferenceProxy object serving as a local proxy for the remote PBXFileReference.
Given ca path, get client cert and key file paths.
Given non-default column family to single CF DB.
Given the body_text of a protocol definition, return a list of associated type and operator requirements.
Global cache of results from running commands so they don't have to be run more then once.
Global section
Global settings and utility functions are currently stuffed in the toplevel Makefile.
Go backwards through the list_actions list so that as items are deleted, the indices of items that haven't been seen yet don't shift.
Go through all the environment variables and replace them as variables in the file.
Go through their associated PBXContainerItem to get the remote PBXFileReference, which will be present in the remote_products list.
Good enough for now.
Good enough.
Got a comma after a bracket, this is most likely a template argument.
Got a comma before a bracket, this is most likely a template argument.
Got some other operator.
Grab 'new' operator, if it's there
Grab make settings for CC/CXX.
Grab the clusters with more than one member.
Grab the existing certificates.
Grab the path of the .gyp file as the base to relativize against.
Grit intentionally doesn't touch the timestamp of its output file when the file doesn't change, which is fine in hash-based dependency systems like scons and forge, but not kosher in the make world.
Group multiple nodes together in a subgraph.
Group the processes by port.
Grouping the document tree into LaTeX files.
Gyp does not retain or enforce specifying enough information to do so.
Gyp expects the following variables to be expandable by the build system to the appropriate locations.
Gyp separates the sheep from the goats based on file extensions.
Gyp source paths are always posix.
Gyp traditionally names the object resulting from foo.c foo.o.
GypPathToUniqueOutput generates a path relative to the product dir, so insert product_dir in front if it is provided.
HACK: This is ugly.
HTTPConnection is more inner than HTTPRequest so we can leave once we're done here
Hack is 1-indexed, py lists 0-indexed
Hack to remove icu because the diff is too different.
Handle TEST...
Handle defaults
Handle dependent settings of various types.
Handle rules that use a native rules file.
Handle the associated variables dict first, so that any variable references within can be resolved prior to using them as variables.
Handling this case properly would also be problematic because bash allows the history character to be changed with the histchars shell variable.
Handling this correctly would require recursive TOC dumping but this is rare in practice, so punt.
Hang the support target off the main target so it can be tested/found by the generator during Finalize.
Hardcode support for the variables used in chromium for now, to unblock people using the make build.
Hashtable nodes contain only a pointer to the next node in the bucket, but are always immediately followed by the value pair.
Haven't found the end yet, append a blank line.
Having // dummy comments makes the lines non-empty, so we will not get unnecessary blank line warnings later in the code.
Header of toplevel Makefile.
Helper for running hphp/test in fbconfig builds.
Helper that executes all postbuilds until one fails.
Helper that expands to a shell command to echo a string exactly as it is in make.
Helper that is non-empty when a prerequisite changes.
Helper that unpacks the contents of an .aar file into given destination.
Helper to compare the command we're about to run against the command we logged the last time we ran the command.
Hence, some targets use copies for this.
Here and below 'supp' stands for 'supplementary characters'.
Here are the categories.
Here we can just use a shallow copy since we are the last reference to it.
Here, we will look at possible includes.
Hierarchical recursion.
However it's still important to strip trailing slashes.
However they are found in CL and other tools.
However, CMake does provide the command link_directories, which adds link directories to targets defined after it is called.
However, IncrediBuild BuildConsole will parse the solution file, but then silently skip building the target causing hard to track down errors.
However, do apply checks if there is already an end of namespace comment and it's incorrect.
However, in some cases, especially when multiple projects are open or when Xcode is busy, things don't work so seamlessly.
However, in that case the system will trigger an error with the level E_NOTICE
However, that would make this class harder to subclass.
However, the specific kind of the declaration is not reported.
However, the specific kind of the expression is not reported.
However, the specific kind of the statement is not reported.
However, we often build compilation units from header files here, so avoid the nag.
I don't know if VS2010 is sensitive to the exact names.
I hope that these shortcomings are addressed, I really liked having the rules handled directly in Xcode during the period that I was prototyping this.
I just try to capture the most common basic types, though there are more.
I wanted to name the parameter "from" but it's a Python keyword...
I wish Xcode handled this automatically.
I'm just scared for my life.
I'm not quite sure what :standardizepath does.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
INTERMEDIATE_DIR and SHARED_INTERMEDIATE_DIR are used by gyp.generator.xcode.
INTERMEDIATE_DIR is a place for targets to build up intermediate products.
Ideally this would modify every non-primary file, but that's harder to infer without actually parsing the arguments.
Ideas for the harness improvement and development are welcomed here: rdar://problem/18072938
If 2nd arg is zero, snprintf is used to calculate size.
If DISALLOW_EVIL_CONSTRUCTORS, DISALLOW_COPY_AND_ASSIGN, or DISALLOW_IMPLICIT_CONSTRUCTORS is present, then it should be the last thing in the class declaration.
If `idx' is a string, it must be converted to an index via the underlying FixedStringMap.
If a "BSD Dynamic Library" target is added in the Xcode UI, Xcode sets EXECUTABLE_PREFIX.
If a "name" property was supplied, set "productName" if it is not present.
If a 'none' target has rules or actions we assume it requires a build.
If a relative path, parsed_build_file is relative to the directory containing build_file.
If a rule specifies multiple outputs, each input file that the rule is applied to will have the same number of concrete outputs.
If a source file gets copied, we still need to add the orginal source directory as header search path, for GCC searches headers in the directory that contains the source file by default.
If all configurations don't define the 'SYMROOT' attribute, an empty set is returned.
If all files have dependencies, add the first file as a dependent of root_node so that the cycle can be discovered from root_node.
If all targets have dependencies, add the first target as a dependent of root_node so that the cycle can be discovered from root_node.
If another PBXBuildFile references this XCFileLikeElement, there's a problem.
If any concrete outputs are outdated or missing relative to their corresponding rule_source or to any specified additional input, the rule action must be performed to generate the concrete outputs.
If any configuration doesn't define the 'SYMROOT' attribute, None is added to the returned set.
If any non-native rules use 'idl' as an extension exclude idl files.
If any of the resulting tokens are not compile time constants then report the error.
If any of the root targets match, we remove it and replace it with 'all'.
If any of these conditions is not true then the shim logic will fail below.
If anything was excluded, put the excluded list into the_dict at excluded_key.
If appending a singleton that's already in the list, don't append.
If asked to recurse, recurse.
If both groups are in the listed order, go by the defined order.
If braces come on one side of an else, they should be on both.
If build_file is a symlink, we must not follow it because there's a chance it could point to a path above toplevel_dir, and we cannot correctly deal with that case at the moment.
If build_file is just a leaf filename indicating a file in the current directory, build_file_dir might be an empty string.
If build_file is not in the current directory, parsed_build_file is not a usable path as-is.
If cpplint is invoked from Emacs's flymake, a temporary file is generated by flymake and that file name might end with '_flymake.cc'.
If current_file is not set, we reach the last line of report, which contains the summarized coverage percentage.
If depth is set, predefine the DEPTH variable to be a relative path from this build file's directory to the directory identified by depth.
If explicitly set to preprocess the plist, invoke the C preprocessor and specify any defines as -D flags.
If false, no module index is generated.
If given port is being used by somebody else, you shall not pass.
If invoked in non-primary-file mode, it only creates the output file.
If is_strong is True, each element is an XCObject, so it's safe to call Copy.
If it ever needs to move backwards, CheckNextIncludeOrder will raise an error.
If it is false, this method returns a path to the symlink.
If it were me, I would have put a space in there after the opening curly, but I guess this is just another one of those inconsistencies between how Xcode prints PBXFileReference and PBXBuildFile objects as compared to other objects.
If it's a string, append a text node.
If it's already a list, make a copy.
If it's disabled in any config, turn it off in the reference.
If it's equal, we leave it untouched, otherwise we concatenate it.
If it's not set, we don't want to leave the unexpanded variable in the path, so simply strip it.
If item is a relative path, it's relative to the build file dict that it's coming from.
If namespace or class hasn't seen a opening brace yet, mark namespace/class head as complete.
If new operator, then this isn't a cast
If no column specified, we will get all columns.
If no depth variable was set on the command line, try to find a "src" directory by looking at the absolute path to each build file's directory.
If no existing servers, find an open port.
If no format was given on the command line, then check the env variable.
If no specific override, use the configuration's.
If not '', a 'Last updated on:' timestamp is inserted at every page bottom, using the given strftime format.
If one but not all certificate files are given.
If parsed_build_file is absolute, it is usable as a path regardless of the current directory, and os.path.join will return it as-is.
If path is already just a leaf name, name will not be set.
If path is set and name is not, name may have a default value.
If port is given, match it.
If port not specified, skip port check and add to result list.
If port_filter is given, only list servers in that list.
If prepending a singleton that's already in the list, remove the existing instance and proceed with the prepend.
If previous line was _END_ASM, we will now shift to _NO_ASM state.
If previous line was a blank line, assume that the headers are intentionally sorted the way they are.
If previous section is different from current section, _last_header will be reset to empty string, so it's always less than current header.
If self.bmp_data contains identical data blocks, keep the first one, remove duplicates and change the indexes in self.bmp_lookup to point to the first one.
If that's why, make it writable and try the op again.
If the GUID contains lowercase hex letters, MSVS will be fine.
If the NXCOMPAT flag has not been specified, default to on.
If the active build configuration is changed, the project file must be closed and reopened if it is desired for the tree view to update.
If the argument starts with a slash or dash, it's probably a command line switch
If the attribute was a property sheet attributes, we remove it, since they are useless.
If the base address is not specifically controlled, DYNAMICBASE should be on by default.
If the child is a filter, we want to append all its children to this same list.
If the closing parenthesis is preceded by only whitespaces, try to give a more descriptive error message.
If the common names don't match, we restart.
If the dependencies list is empty, it's not needed, so unhook it.
If the directory is relative to the documentation root, use os.path.abspath to make it absolute, like shown here.
If the expression didn't yield anything then it's likely a class.
If the file came from the mac_bundle_resources list or if the rule is marked to process outputs as bundle resource, do so.
If the file itself is a symlink, always resolve it.
If the framework doesn't contain a binary, then nothing depends on the actions -- make the framework depend on them directly too.
If the from-key has          ...the to-list will have this action this character appended:...
If the groups aren't in the listed order, do a name comparison.
If the inner loop found something, break without advancing to another build file.
If the line is empty or consists of entirely a comment, no need to check it.
If the line's pattern doesn't fall into the above categories.
If the list contains any descendant dicts, path fixing will occur.
If the name attribute seems unnecessary now, get rid of it.
If the name is all caps and underscores, figure it's a macro and ignore it, unless it's TEST or TEST_F.
If the original parent didn't have a name but the child did, let the child's name live on.
If the original parent had a name set, keep using it.
If the output path has variables in it, which happens in practice for 'copies', writing the environment as target-local doesn't work, because the variables are already needed for the target name.
If the property doesn't exist yet, create a new empty list to receive the item.
If the resource lives in a .lproj bundle, add that to the destination.
If the schema indicates that "name" is required, try to access the property even if it doesn't exist.
If the setting name has the _excluded suffix, then check the root name.
If the target and include share some initial basename component, it's possible the target is implementing the include, so it's allowed to be first, but we'll never complain if it's not there.
If the target file and the include we're checking share a basename when we drop common extensions, and the include lives in .
If the two objects are of the same sort rank, compare their names.
If the value is the same all configurations, just add one unconditional entry.
If the variable is already set, don't set it.
If the websocket was terminated and there are no messages left in the queue, return None immediately otherwise the client will block forever
If there are any object files in our input file list, link them into our output.
If there is a filter and the target does not match, exclude the target.
If there is a parent 'src' or 'java' folder, navigate up to it - these are canonical package root names in Chromium.
If there is a reason for either of those to differ, then this mapping can be overridden after an instance of this class is created.
If there's a .svn file in the current directory, we recursively look up the directory tree for the top of the SVN checkout
If there's only one node for this file, simplify the display by making it a box without an internal node.
If these are present, then we check the second character instead.
If they generate any extra headers etc., the per-.o file dep tracking will catch the proper rebuilds, so order only is still ok here.
If they're present, Xcode will provide a slight optimization by only running the script phase if any output is missing or outdated relative to any input.
If this entry has been visited, nothing to do.
If this is a folder, check its entries too.
If this is a subsequent target and it's linkable, don't look any further for linkable dependencies, as they'll already be linked into this target linkable.
If this target already has an explicit 'toolset', and no 'toolsets' list, don't modify it further.
If this target has a 'run_as' attribute, add its target to the targets, and add it to the test targets.
If this triggers an AttributeError, the instance was not properly created.
If this triggers an AttributeError, the instance was not properly instantiated.
If toplevel-dir is not set, we assume that depth is the root of our source tree.
If true, "Created using Sphinx" is shown in the HTML footer.
If true, SmartyPants will be used to convert quotes and dashes to typographically correct entities.
If true, show URL addresses after external links.
If we can make it an int, use that, otherwise, use the string.
If we can't find the header file for a .cc, assume it's because we don't know where to look.
If we change the pattern above, we would decrease the accuracy of matching identifiers.
If we detected a type split across two lines, join the previous line to current line so that we can match const references accordingly.
If we didn't find the end of the class, last_line would be zero, and the check will be skipped by the first condition.
If we get a reply, it's the place to resume tokenizing
If we get no tokens, no memory was allocated.
If we got a result, the code was an expression, so append its value
If we have a colon indented 4 spaces, it is an initializer list.
If we have actions/rules/copies, we depend directly on those, but otherwise we depend on dependent target's actions/rules/copies etc.
If we have not yet seen the opening brace for the innermost block, run checks here.
If we have selected clang-cl, use that instead.
If we haven't seen an opening brace yet, but we already saw a semicolon, this is probably a forward declaration.
If we only interested in several files, it makes no sense to report the total_coverage
If we reach this stage, it's because the frame wasn't masked and we didn't expect it anyway.
If we see those, don't issue warnings for deprecated casts, instead issue warnings for unnamed arguments where appropriate.
If we were given an explicit name, use that.
If we were not sent a new position by our client, resume tokenizing at the end of this match.
If we were unable to exec for some reason, we want to exit with an error, and fixup variable references to be shell syntax instead of xcode syntax.
If we're not listing excluded files, then they won't appear in the project, so don't try to configure them to be excluded.
If x is hashable, returns whether x is in s.
If xcodebuild fails, there will be no valid SDKs
If you can connect socket, that means the somebody is listening to the port.
If you have a type that spans more than 2 lines, please use a typedef.
If you need more, speak up at http://crbug.com/122592
If you put an exception in here, please send a pull request upstream to php-src.
Ignore bad syntax
Ignore control structures.
Ignore errors if the file doesn't exist.
Ignore non-stopping events.
Ignore pointers/references to arrays.
Ignore pointers/references to functions.
Ignore the interrupt signal so that the parent process catches it and kills all multiprocessing children.
Ignore toolset specification in the dependency if it is specified.
Ignore unhandled extensions.
Import hashlib if available, avoiding a deprecation warning under 2.6.
Import md5 otherwise, preserving 2.4 compatibility.
Import sha otherwise, preserving 2.4 compatibility.
In 2.6, md5 is deprecated.
In 2.6, sha is deprecated.
In Xcode, this is only activated when GCC_COMPILER_VERSION is clang or llvm-gcc.
In addition to macros, we also don't want to warn on compound literals.
In addition, we look for people taking the address of a cast.
In another one-off, let's set flatten_list on buildSettings properties of XCBuildConfiguration objects, because that's how Xcode treats them.
In auto mode, check environment variable for override.
In fact, if this code was responsible for creating the xcodeproj directory, get rid of that too.
In order for linking to succeed, DYLIB_CURRENT_VERSION and DYLIB_COMPATIBILITY_VERSION must be cleared.
In order to gradually migrate away from build-script-impl, this module provides tools to handle parsing of these args.
In practice, this strips the top-level "src/" dir from the hierarchy in the solution.
In principle this could be extended to more nesting
In ps, 'comm' means the base command and 'command' is the full command.
In range-based for, we wanted spaces before and after the colon, but not around "::" tokens that might appear.
In reality we handle this with the Python tokenizer, which avoids mis-detections due to nesting, comments and strings.
In that case we'll give up as we're not sure they didn't include it in the .h file.
In that case, restore original file name here so that the corresponding header file can be found.
In that case, the expansion should result in a list.
In the future, maybe it should just accept a list, and not the whole data dict.
In the latter case, we want to package just the API exposed by the outermost module.
In the same way, a do/while should never be on one line
In this case, we also need to save the compile_deps for the target, so that the the target that directly depends on the .objs can also depend on those.
In this example, grandparent would be set to path/to and parent_root would be set to Language.
Incidentally, they have names denoting which part of the client made the request.
Include a dummy out folder so that Eclipse doesn't use the default /bin folder in the root of the project.
Include both possible locations.
Include dirs will occasionally use the SHARED_INTERMEDIATE_DIR variable as part of the path when dealing with generated headers.
Include extra plist items that are per-target, not per global XcodeSettings.
Include template information.
Include the inputs from any actions.
Include the optional message
Include the standard JRE container and a dummy out folder
Include them here for completeness, as they are very likely to have the same usage pattern.
Includes and excludes override previous actions.
Indent and print the output.
Indicates that an unknown error occurred.
Indicates that errors during translation prevented saving.
Indicates that the translation unit is incomplete.
Indicates that the translation unit was somehow invalid.
Initialize random number generator
Initialize the list_actions list, which is parallel to the_list.
Initialize the specifications of the various sections.
Initialize this here to speed up MakePathRelative.
Initially, it is a copy of the children of this node, because when the graph was built, nodes with no dependencies were made implicit dependents of the root node.
Inject replacement versions of a function and a method.
Inject system includes from gyp files into INCLUDE.
Insert after the "All" target, which must exist if there is more than one run_test_target.
Insert fixme lines bottom up, so that changes don't change line numbers later in the file.
Insert makefile as 0'th input, so it gets the action attached there, as this is easier to understand from in the IDE.
Insert the nodes in the correct order.
Insert the test runner after the related target.
Inside a raw string, look for the end
Inside inline assembly block
Installable target aliases are created below.
Instantiate the various generic types.
Instead just save them up...
Instead of appending to lhs one character at a time, we do another regular expression match to consume several characters at once if possible.
Instead of sorting alphabetically, sort things in the order of the targets that produce the products.
Instead of throwing out 64 bits of the digest, xor them into the portion that gets used.
Instead of using the MANIFESTUAC flags, we generate a .manifest to include into the list of manifests.
Instead, it favors the use of find_library and passing absolute paths to target_link_libraries.
Instruct the parser to create a detailed processing record containing metadata not normally retained.
Instruct the parser to create a pre-compiled preamble for the translation unit.
IntermediatesGroup is used to collect source-like files that are generated by rules or script phases and are placed in intermediate directories such as DerivedSources.
Invalidating the cache should trigger a new fetch.
Invoke the translation function.
Issue warning if the line before public/protected/private was not a blank line, but don't do this if the previous line contains "class" or "struct".
It also requires a fairly recent libtool, and if the system clang isn't used, DYLD_LIBRARY_PATH needs to contain the path to the libLTO.dylib that matches the used clang.
It can be run with either Python 2 or 3.
It checks consistency in case of unsafe crashes in RocksDB.
It defaults to True.
It depends on the copy target.
It does, however, keep a name.
It gets emptied out every time the script is run
It has changed, write it
It includes each non_runtest_target that does not have suppress_wildcard set.
It is based on make.py, the standard makefile generator.
It is defined below because it uses PBXContainerItemProxy, defined below.
It is merged with a list that can come from the generator to create non_configuration_keys.
It is no longer incredibly sucky, but this list needs to be extended.
It is not sufficient to just rely on name and parent to build a unique hashable : a node could have two child PBXGroup sharing a common name.
It is only guaranteed to exist and be constant within the context of a project, corresponding to a single input file.
It is specific to each build environment.
It is weird that GET and SCAN raise exception for non-existent key, while delete does not
It just means that it's going to load a build file that contains targets and is expected to provide a targets dict that contains the targets...
It just removes the monitor so that we can kill them on upgrade.
It may make sense to generate some .mk files on the side to keep the the files readable.
It might be nice to ensure that needed output directories exist here rather than in each target in the Makefile, but that wouldn't work if there ever was a concrete output that had an input-dependent variable anywhere other than in the leaf position.
It needs every file separate, not a string else ./run barfs
It seems there's a race between the creation of the .pdb by the precompiled header step for .cc and the compilation of .c files.
It should have one dependency, the parent xcode target.
It supports https if key_file and cert_file are given.
It takes into account quoted quotes, and makes sure that the quotes match.
It will get a default common name like user.nuclide.host
It will raise an exception if not valid.
It'll blow up if the args aren't immutable, among other "problems".
It's a source.
It's an error for a target to depend on all other targets in the same file, because a target cannot depend on itself.
It's best when the caller provides the path.
It's going to be created below if needed.
It's handled in LoadTargetBuildFileCallback.
It's hard to tell, though, so we punt on this one for now.
It's important to get the "All" target first, though.
It's ok to have many commands in a switch case that fits in 1 line
It's preferable to keep dependencies listed first during a link phase so that they can override symbols that would otherwise be provided by libraries, which will usually include system libraries.
It's stupid to replace and append simultaneously, for example.
Iterate over local dict of types to determine if a printer is registered for that type.
Iterate over rules in the order of increasing priority.
Iterate using an index so that new values can be assigned into the_list.
Just some paranoia
Keep a dict going from 'subdirectory:target_name' to 'foo.gyp'.
Keep a dict keyed on filename to speed up access.
Keep a reference to the originating CompileCommands to prevent garbage collection
Keep it moving.
Keep reference to original results object alive.
Keep this legacy behavior for now.
Keeping the path to each generator that is used in sys.path is likely harmless and arguably a good idea.
Keys are names of packages and values are the corresponding configs.
Keys that do not belong inside a configuration dictionary.
Keys with these suffixes should be treated the same as keys without.
Known issues: - pretty printing only works for the 'native' strings.
Known problems:
LLDB will not emit any stopping event during attach.
LOCAL_CXXFLAGS is obsolete and LOCAL_CPPFLAGS is preferred.
Last ditch effort to avoid multi-line comments.
Last line of inline assembly block
Leave output alone if it's a list of lists.
Left over Closure class names
Let CMake know if the 'all' target should depend on this target.
Let gyp-time envvars win over global settings.
Let make it concurrent for others to tag along
Let msbuild-only properties get translated as-is from msvs_settings.
Let's avoid unmasking when there is no payload
Let's copy the include_state so it is only messed up within this function.
Let's handle IPv4 and IPv6 addresses Simplified from CherryPy's code
Let's just warn the user.
Libs can have multiple words.
Libtool on Mac also generates warnings when duplicate basenames are passed into Make generator on Mac.
Like /bin/touch, but takes a time using the LLVM epoch.
Like actions, but implicitly depend on the target's output.
Likewise, an else should never have the else clause on the same line
Line too long.
Link as 'C' if there are no other files
Linker flags
Linux lldb has a bug of not emitting stopping event during launch.
List files this target depends on so that actions/rules/copies/sources can depend on the list.
List of "official" debug modes, but you can use anything you like.
List of HandlerDomainSets for the server to respond to reqs with.
List of patterns, relative to source directory, that match files and directories to ignore when looking for source files.
List of precompiled header related keys.
List processes for all users.
List processes from all users.
Literal text
Load and normalize the manifests.
Load build files.
Load into an existing db, create_if_missing is not specified
Load the data file.
Logical and/or operators.
Look at dependents of the node just added to flat_list.
Look at each project's target_defaults dict, and merge settings into targets.
Look at this configuration.
Look for a bare ':'
Look for a class declaration in whatever is left of the line after parsing namespaces.
Look for any include dirs that were explicitly added via cflags.
Look for beginning of a raw string.
Look for dependencies.
Look for matching comment at end of namespace.
Look for single-argument constructors that aren't marked explicit.
Look for the bracket that matches the first bracket seen in a string, and return the start and end as a tuple.
Look for the pattern that gets expanded into variables
Look for the project name matching this cldis
Look through all the nodes to find a match.
Looks like an unnamed parameter.
Loop over the entire list of phases and assert if more than one of the desired type is found.
Loop this way instead of "for dependency in" or "for index in xrange" because the dependencies list will be modified within the loop body.
Loop through the targets in the other build file, adding them to this target's list of dependencies in place of the removed wildcard.
Loop to take over the innermost only-child group possible.
MSBuild options not found in MSVS.
MSBuild rules are implemented using three files: an XML file, a .targets file and a .props file.
MSVC08 and prior version cannot handle duplicate basenames in the same target.
MSVS and MBuild names of the tools.
MSVS options not found in MSBuild.
Mac does not use readelf/nm for .TOC generation, so avoiding polluting the master ninja with extra unused variables.
Main parsing loop
Make Windows paths like Unix.
Make a copy of the dictionary, continuing to look for paths to fix.
Make a copy of the list for descending this node.
Make a copy of the variables dict so that it won't influence anything outside of its own scope.
Make a copy of the variables_in dict that can be modified during the loading of automatics and the loading of the variables dict.
Make a deep copy of the defaults for each target, merge the target dict as found in the input file into that copy, and then hook up the copy with the target-specific data merged into it as the replacement target dict.
Make a fake frame for our `fp' and `rip'.
Make a target to run something.
Make an exception for variable declarations, as these can often have auto types.
Make copies of the build_files argument that we can modify while working.
Make does not supports '.xcassets' emulation.
Make each output depend on the main output, with an empty command to force make to notice that the mtime has changed.
Make file executable.
Make it less likely for people to manipulate hashes by following the pattern of always pushing an object type value onto the list first.
Make progressively weaker assumptions about "other"
Make some replacements in the signature to limit the graph size
Make sources relative to root build file.
Make supports multiple toolsets
Make sure all files we write out end with a trailing newline.
Make sure all the local variables are added to the variables list before we process them so that you can reference one variable from another.
Make sure anything appearing in a list other than "dependencies" also appears in the "dependencies" list.
Make sure every dependency appears at most once.
Make sure it's not a function.
Make sure our dependencies are built first.
Make sure partial executables don't end up in a bundle or the regular output directory.
Make sure rule_sources isn't already there.
Make sure static libraries don't declare dependencies on other static libraries, but that linkables depend on all unlinked static libraries that they need so that their link steps will be correct.
Make sure that any targets in a.gyp don't contain dependencies in other .gyp files that further depend on a.gyp.
Make sure that no two objects in the project file have the same ID.
Make sure that output directories exist before executing the rule action.
Make sure that the list of targets being replaced is the same length as the one replacing it, but allow for the added test runner targets.
Make sure that the product is already in the products group.
Make sure that the rules make sense, and build up rule_sources lists as needed.
Make sure that the target being added to the sorted list is already in the unsorted list.
Make sure that there's no conflict among rule names and extensions.
Make sure that this process doesn't miss anything that was already in the products group.
Make sure that using the dump with --path will result in identical output as just using manifest_dump.
Make sure the actions and rules run first.
Make sure the path to the custom generator is in sys.path Don't worry about removing it once we are done.
Make sure the property conforms to the schema.
Make sure the property is in the schema.
Make sure this 'toolsets' definition is only processed once.
Make sure we can pack one row of the matrix into a 'uint16_t'.
Make sure we order by priority.
Make sure we're using the version of pylib in this repo, not one installed elsewhere on the system.
Make the output of this target referenceable as a source.
Make the postbuild step depend on the output of ld or ar from this target.
Makes migrating from make to cmake easier, cmake doesn't put anything here.
Makes migrating from make to ninja easier, ninja doesn't put anything here.
Many tests include modules they don't use.
Many unit tests use cout, so we exempt them.
Map from platform to architecture.
Map from qualified target to any linkable output.
Map from qualified target to path to output.
Map gyp target types to Android module classes.
Map of android build system variables to set.
Mapping from Xcode product-types to settings.
Mapping from a parent protocol to set of children.
Mapping from protocol to associated type / operator requirements
Mapping from protocol to generic operators taking instances as arguments
Maps every compilable file extension to the do_cmd that compiles it.
Maps from target name to Target.
Maps to CXTokenKind.
Mark it with note: so Xcode picks it up in build output.
Mark object sources as linkable.
Mark uncompiled sources as uncompiled.
Match a list of code points.
Match first brace, semicolon, or closed parenthesis.
Match group 1 is "DIR", match group 3 is "path" or None.
Match start of namespace.
MatchStatus is used indicate if and how a target depends upon the supplied sources.
Matches characters.
Matches strings.
Matches the first component of a filename delimited by -s and _s.
Measure time for one iteration If it's too small, increase number of iteration until it's measurable
Membership in this set means that the cygwin environment has been set up, and does not need to be set up again.
Merge buckets until everything is a root entry.
Merge in parents.
Merge in the included files.
Merge it into the new config.
Merge the intermediate one with ours to .assert.manifest, then check that .assert.manifest is identical to ours.
Merge with stdout if stderr isn't specified.
Mimic Xcode's behavior here by using an empty string for sep.
Minor version is the server protocol version
Missing in many other places too.
Mode 0 covers all kill points.
Mode 1 covers less kill points but increases change of triggering them.
Mode 2 covers even less frequent kill points and further increases triggering change.
Modify all files after the primary file.
Modify the file
Modifying the source tree - even just modification times - feels dirty.
Module class and name.
Monkeypatch pygments so it will know about the Swift lexers
Monkeypatch pygments.lexers.get_lexer_by_name to return our lexers.
Most callers probably want GetChildByPath.
Most likely people who think this should be hospitalized, but who am I to argue.
Most likely the input was incomplete, otherwise we should have seen a semicolon and returned early.
Most targets use no precompiled headers, so only write these if needed.
Move everything that can go into a "configurations" section into one.
Move into the framework directory to set the symlinks correctly.
Move the test over to the fixed suite.
Moving the item to the end of the list does works, but that's only possible if there's only one such item.
Munge and print the code location if we have one.
Must be a valid, released version from php download site
Must be one of the open ports.
NOTE: Contrary to most objects, it is advisable to set parent when constructing PBXNativeTarget.
NOTE: Eclipse generator DOES NOT take 'build-jobs' into account, nor 'verbose-build'.
NOTE: It does not handle quotes that span more than one line, or cases where an escaped quote is preceeded by an escaped backslash.
NOTE: Python 2's `map` function returns a list.
NOTE: This still has the problem that if an absolute path is encountered, including paths with a sourceTree, they'll still inherit their parents' hashables, even though the paths aren't relative to their parents.
NOTE: Xcode generator DOES NOT take 'verbose-build' into account.
NOTE: excluded_sources goes from being a set to a list here.
NOTE: flat_list is the flattened dependency graph specifying the order that targets may be built.
NOTE: gyp paths are always posix style.
NOTE: here are the conditions rob pike used for his tests.
NOTE: rsplit is used to disambiguate the Windows drive letter separator.
NOTE: setuptools generated console_scripts calls function with no arguments
NOTE: sources goes from being a set to a list here.
NOTE: there is no need to update the translation unit here.
NOTE: there may be overlap between this an empty_target_names.
NOTE: there may be overlap between this an non_empty_target_names.
NOTE: this stanza must appear after all actions have been decided.
Name should be fully qualified if outside the parent.
Name will be set to the basename of path, if the basename of path is different from the full value of path.
Named namespace
Names of function parameters.
Names of template parameters.
Need to add proper argument here
Need to change the calling convention of the whole function to process multiple line to handle it.
Need to join with the build_dir here as we're writing it during generation time, but we return the un-joined version because the build will occur in that directory.
Needed by test/mac/gyptest-rebuild.py.
Needed for NaCl.
Needed for remoting.
Needed so XCode doesn't hang if tap on Continue while lldb is waiting for user input in 'vs' mode
Needs to happen before postbuilds, since postbuilds depend on this.
New flag required in 2013 to maintain previous PDB behavior.
New in Clang 3.8: not in the Python bindings yet.
Newly-added items will be checked for their own imports when the list iteration reaches them.
Next we will look for issues with function calls.
Next, deduplicate second-level lookup tables.
Next, we complain if there's a comment too near the text
Ninja prefers paths to be known at gyp time.
Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the SHARED_INTERMEDIATE_DIR.
No additions to the schema relative to PBXGroup.
No additions to the schema relative to XCBuildPhase.
No copy is necessary here.
No longer needed.
No member of that name.
No need to explore subdirectories once package.json is found.
No need to generate a .o file.
No nohup logging.
No param called he
No quoting necessary.
No server on port 9092
No suffixes provided, default to using empty suffix only
No value supplied, treat it as a boolean and set it.
No warning for all other cases, including whitespace or newline, since we have a separate check for semicolons preceded by whitespace.
Nodes in in_degree_zeros have no dependencies not in flat_list, so they can be appended to flat_list.
Non-relational operator
None is a synonym for 'store'.
Normalize encoding.
Normalize paths everywhere.
Normalize the node, and remove all extranous whitespaces.
Normalize the path so trailing slashes don't confuse us.
Normally make does this implicitly, but we force rules to always run so we can check their command lines.
Normally the xcode-ninja generator includes only valid executable targets.
Not a wildcard.
Not all generators will need to use the rule_sources lists, but some may, and it seems best to build the list in a common spot.
Not entering assembly block.
Not exactly the same as disable.
Not exception type specified.
Not using urlparse here as it does not handle unknown schemes well.
Not very inspired, but it's what Xcode uses.
Note 3rd 's'.
Note on Dependencies and Libraries: CMake wants to handle link order, resolving the link line up front.
Note that .tlb is not included in the outputs as it is not always generated depending on the content of the input idl file.
Note that Python sort is stable.
Note that for configuration-relative files such as anything relative to _intermediate_var, for the purposes of UI tree view display, Xcode will only resolve the configuration name once, when the project file is opened.
Note that ldflags goes at the end so that it has the option of overriding default settings earlier in the command line.
Note that not all possible configuration values are present in this autogenerated file.
Note that prefix should already be all lowercase.
Note that the _M versions need to come first for substring matching to work.
Note that the caller is to be expecting a list in return, and not all callers do because not all are working in list context.
Note that the code below adds actions to this target, so if you move these two lines, move the lines below as well.
Note that the first argument is assumed to be the command.
Note that this does /not/ update the translation unit.
Note that this must be two directories beneath src/ for unit tests to pass, as they reach into the src/ directory for data with relative paths.
Note that this only happens with the BuildConsole, and does not occur if IncrediBuild is executed from inside Visual Studio.
Note that this only scans back one line, since scanning back arbitrary number of lines would be expensive.
Note that this pattern will also pass on assignments of "0" to function pointers, but the preferred values for those would be "nullptr" or "NULL".
Note that this relies on the Python dict comparison operator comparing componentwise lexicographically based on the alphabetical ordering of keys.
Note that we can't use an assertion because some of the gyp tests depend on this.
Note that you need to be careful here to use the flags that ccache and distcc can understand.
Note, if no dot is found, this will give the entire filename as the ext.
Note, not Iterable because we don't want to handle strings like that.
Note: OpenBSD has sysutils/flock.
Note: This flag is a no-op for clang, it only has an effect for gcc.
Note: actool crashes if inputs path are relative, so use os.path.abspath to get absolute path name for inputs.
Note: because we are scanning forward for opening braces, and outputting warnings for the matching closing brace, if there are nested blocks with trailing semicolons, we will get the error messages in reversed order.
Note: flat_list is already sorted in the order from dependencies to dependents.
Note: if you change any of these parameters, don't forget to update the ASCII art above.
Note: std::hash is their hash, ::hash is our hash
Nothing else can be a link dependency of them, there can only be dependencies in the sense that a dependent target might run an executable or load the loadable_module.
Nothing in the variable, default based on platform.
Nothing to add Write out the user file.
Notice that evaluateExpression doesn't work with variable arguments.
Notify all children of their new parent.
Now add unescaped quotes so that any whitespace is interpreted literally.
Now comes the plumbing to hook up the C library.
Now compute number of samples we can take in the given time limit
Now drop all the abstract ones.
Now recurse into subdicts and lists that may contain dicts.
Now that all of the target's configurations have been built, go through the target dict's keys and remove everything that's been moved into a "configurations" section.
Now that everything is merged, we need to cleanup the xml.
Now that we have all the vsprops, we need to merge them.
Now that we've placed all the nodes within subgraphs, output all the edges between nodes.
Now write out PkgInfo file now that the Info.plist file has been "compiled".
Nuclide can't open these remotely, so resolve them to the real path.
Nuclide server shall be able to find open port and upgrade it on the same port.
Number of bits in the biggest int type
OK, we have a blank line at the start of a code block.
ObjCEncodeExpr, used for in Objective-C.
ObjCSelectorExpr used for in Objective-C.
ObjCStringLiteral, used for Objective-C string literals i.e. "foo".
Object output directory.
Objective-C
Objective-C's autorealease pool statement.
Objective-C's for collection statement.
Objective-C's protocol expression.
Objective-c Boolean Literal.
Obviously, we don't want that chunk in spelling.
Octal-encode to work around that.
Oddly, Xcode will quote any string with a run of three or more underscores.
Old method of searching for which VS version is installed We don't use the 2010-encouraged-way because we also want to get the path to the binaries, which it doesn't offer.
On Windows, we can't create a relative path to a different drive, so just use the absolute path.
On mac, products are created in install_path immediately.
On newer releases of FreeBSD, the default Clang is sufficient.
On older releases, or on releases for which we cannot determine the release date, we search for the most modern version available.
On some systems, ld is finicky and even requires the libraries to be ordered in such a way that unresolved symbols in earlier-listed libraries may only be resolved by later-listed libraries.
On success, return stdout.
On those platforms linker flags are set via xcode_settings and msvs_settings, respectively.
Once chrome is fixed, we can remove this flag.
One by one, copy each test in test_dir_backup into test_dir, run the test, and then remove that file.
One can execute it to dump the API of a given module within a particular SDK, e.g., UIKit from the iOS SDK as seen in Swift 3 after the "grand renaming":
One can supply multiple SDKs, written as a list.
Only "grammars" are allowed to be cson.
Only 3 types of objects are possible: - _ClassInfo: a class or struct.
Only apply checks if we got all parts of the boolean expression
Only create PkgInfo for executable types.
Only create files for ninja files that actually have contents.
Only do this if the closing brace is indented by only whitespaces.
Only emit LOCAL_MODULE_STEM if it's different to LOCAL_MODULE.
Only generate Makefiles for gyp files with targets.
Only need HKLM for now.
Only return this marker if the comment goes beyond this line
Only support setting breakpoints in real files.
Only the original parent has a path, use it.
Only use one target from each rule as the dependency for 'all' so we don't try to build each rule multiple times.
Only use xcrun on Darwin
Only write the lists if they are non-empty.
Open 'stdlib.swift' in this directory if no path specified.
Open file and print header
Open pipe for anything else so Popen works on python2.4.
Open the vcproj and parse the xml.
Opening punctuations left without matching close-punctuations.
Operator not preceded/followed by space.
Optimization: only do copies if more than one toolset is specified.
OptionParser will throw in the case where you want just one big long argument and no options and you enter something that starts with '-' in the argument.
Optional arguments.
Optionally configure each spec to use ninja as the external builder.
Optionally in second position is a dictionary of the attributes.
Optionally shard targets marked with 'msvs_shard': SHARD_COUNT.
Optionally use the large PDB workaround for targets marked with 'msvs_large_pdb': 1.
Optionally, a third item, false_dict, may be present.
Options that have the same name in MSVS and MSBuild
Options that have the same name in MSVS and MSBuild.
Or changing the location.
Order only rule: Just write a simple rule.
Other shared-object link notes: - Set SONAME to the library filename so our binaries don't reference the local, absolute paths used on the link command-line.
Other targets just get built into their intermediate dir.
Others, too many to sort.
Otherwise just show executable targets.
Otherwise link and ar lines can get too long, resulting in 'Argument list too long' errors.
Otherwise not.
Otherwise recurse over that child definition
Otherwise, "all" could just contain the entire list of concrete_outputs_all.
Otherwise, Xcode will fill them in when it opens the project file, which will result in unnecessary diffs.
Otherwise, derive a name from the target name.
Otherwise, do not resolve '/mnt' paths, since Nuclide can't open them remotely.
Otherwise, groups in the listed order should come before those that aren't.
Otherwise, if there are any spaces, quote the whole arg.
Otherwise, it would have extra automatics added for everything that should just be an ordinary variable in this scope.
Otherwise, raise CalledProcessError with combined stdout and stderr.
Otherwise, skip version checking.
Otherwise, sort groups before everything else.
Otherwise, the standard x86 compiler.
Otherwise, we try to remove spaces from the right side, if this doesn't work we try on left side but only if there's a non-character on the right.
Our only solution here is to convert our string to a bytearray.
Our root_makefile lives at the source root.
Our segmentation algorithm works on UTF-16 sequences, so encoding a surrogate would produce an invalid code unit sequence.
Our segmentation algorithm works on UTF-8 sequences, so encoding a surrogate would produce an invalid code unit sequence.
Output directory
Output name
Output name and location.
Output nodes by file.
Output warning if what follows the condition expression is a semicolon.
Outside of inline assembly block
Overwrite the existing value, if any.
PBXBuildFile's settings property is represented in the output as a dict, but a hack here has it represented as a string.
PBXReferenceProxy is also an XCFileLikeElement subclass.
PHP puts a newline in that we don't
Pack bits into an integer.
Parenthesized operand
Parse JSON into python object.
Parse expression so that we can take parentheses into account.
Parse the JSON to extract the commands to run
Parse the keys
Pass a copy of the variables dict so that subdicts can't influence parents.
Pass a copy of the variables dict to avoid having it be tainted.
Pass in proc for an existing Nuclide server.
Pass through an attempt to update IDs to the real root object.
Passed all filters, issue warning here.
Passes Python2.7's test suite and incorporates all the latest updates.
Path to the file representing the completion of building the bundle, if any.
Path to the output of the link step, if any.
PathHashables returns hashables unique enough that no two PBXBuildFiles should wind up with the same set of hashables, unless someone adds the same file multiple times to the same target.
Paths in gyp files are relative to the .gyp file, but we want paths relative to the source root for the master makefile.
Paths within a given .gyp file are always relative to the directory containing the .gyp file.
Pattern to expect from SST dump.
Pattern to expect from WAL dump.
Pattern to expect from manifest_dump.
Patterns for matching call-by-reference parameters.
Per-target 'xcode_settings' are pushed down into configs earlier by gyp.
Performs a depth-first search of the project root for package.json files.
Perhaps it should also remove references from this pbxproject that are no longer present in other_pbxproject.
Perhaps it should update various properties if they change.
Pick a random version to start with.
Pick temporary file.
Pick where to stick this action.
Pick which project configuration to build for this solution configuration.
Placates pylint.
Please profile carefully if you would like to add CachedProperty back.
Pluck out one.
Pluck out the default configuration.
Point the target alias to the final binary output.
Pop native frames until we hit our caller's rip.
Pop the stack for these.
Populate all the folders.
Populated lazily by GetIOSPostbuilds.
Port is an optional filter.
Positional arguments.
Possible unbalanced tuple unpacking with sequence.
Postbuild actions.
Postbuilds expect to be run in the gyp file's directory, so insert an implicit postbuild to cd to there.
Pre-commit checker
Prefer arguments from JSON.
Prefer arm64 if available.
Prefix of the string returned by clang_getClangVersion.
Prepare a dict indicating which project configurations are used for which solution configurations for this target.
Prepare a flat lookup table for fast access.
Prepare a key like 'path/to:target_name'.
Prepare command.
Prepare configuration attributes.
Prepare for the next match iteration.
Prepare list of sources and excluded sources.
Prepare the actual command.
Prepare the command line for this rule.
Prepare the list of tools as a dictionary.
Prepare the set of configurations.
Preserve current xml.dom.minidom functions.
Pretty Printers
Prevent default library inheritance from the environment.
Print a line
Print each row
Print each row.
Print invalid JSON requests to stderr.
Print logs to stdout if verbose is specified.
Print out the command we're about to execute
Print out the file paths in JSON.
Print the headers.
Print the main tag
Print the server port on lldb import.
Print two colums
Process a 'conditions' or 'target_conditions' section in the_dict, depending on phase.
Process conditions in this dict.
Process the input specific to this generator.
Processes toolsets in all the targets.
ProductGroup is strong.
Products Directory Other types that can be chosen via the Xcode UI.
Project GUID
Project build config for that solution config
Project entries
Project files generated by this module will use _intermediate_var as a custom Xcode setting whose value is a DerivedSources-like directory that's project-specific and configuration-specific.
Property data for BMP code points is stored as a one-stage trie.
Property data for supplementary code points is stored as a two-stage trie.
Provide a single configuration by default if none exists.
Proxy all of these through to the build configuration list.
Prune filters with a single child to flatten ugly directory structures such as ../../src/modules/module1 etc.
Prune unwanted targets from each build_file's data dict.
Pull in the Swift lexers
Pull out the relevnt data.
Pull the function name.
Push a new block onto the stack otherwise.
Put a generated "All" target first so that people opening up the project for the first time will build everything by default.
Put build-time support tools next to the root Makefile.
Put enough ".." components to back up out of relative_to to the common prefix, and then append the part of path_split after the common prefix.
Put it into a dict for easy access.
Put sources_to_index in it's own gyp.
Put the name in first, ensuring that if TakeOverOnlyChild collapses children into a top-level group like "Source", the name always goes into the list of hashables without interfering with path components.
Put the new configurations back into the target dict as a configuration.
Put to-be-removed items in a set and remove them all in a single pass if this becomes a performance issue.
Putting a directory inside a variant group is not currently supported.
Python 2.6.1 and below don't parse ws or wss urls properly.
Python code
Python documentation recommends objects which do not support hash set this value to None.
Python doesn't deal well with this circular relationship, and doesn't have a real way to do forward declarations.
Python generators must be initialized once.
Python is dumb: http://bugs.python.org/issue16333.
Python library objects follow this rule.
Python on AIX is compiled with LARGEFILE support, which changes the struct size.
Python wrappers for invoking `xcrun` on the command-line.
Query for the line table.
Querying the same location should hit the cache.
Queue of targets to visit.
Random other files that zend wants
Rather than attempting to enumerate the bad shell characters, just whitelist common OK ones and quote anything else.
Rather than simply appending new items, insert them after the dependency that exported them.
Raw string ended on same line
Read stdout from inferior.
Read the resource and write it to a given dir using the resource name as file name.
Read the source Info.plist into memory.
Read version from version file if it exists.
Really, almost everything should go into target-specific build settings sections.
Recompute target "dependencies" properties.
Record any of the cursor types listed above.
Recurse and add its dependents.
Recurse into child dicts, or process child lists which may result in further recursion into descendant dicts.
Recurse into subdictionaries.
Recurse to expand variables in the contents
Recurse, guaranteeing copies will be made of objects that require it.
Recurse, making a copy of the list.
Recursively explorer the tree of dicts looking for projects which are the sole item in a folder which has the same name as the project.
Red links are a bit too garish
Redefine the type of the "target" property.
Redirect stdout to a stream for capturing.
Redirect them to show up in one of those other groups.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
Reduces the cpu time usage by skipping lines.
Refer to documentation for a list of supported languages.
Regex to remove comments when we're counting braces.
Regex to remove quoted strings when we're counting braces.
Regexps would need twice the time of this function.
Register all convenience functions and CLI commands
Register callback types in common container.
Regular expression for validating Visual Studio GUIDs.
Regular expression match.
Regular expression to detect keys that were generated by exclusion lists
Regular expressions that matches the SLN format.
Regular rule, more than one output: Multiple outputs are tricky in make.
Regular rule, one output: Just write a simple rule.
Rehash required, so just give up.
Relational operator
Relative includes may go outside the source tree.
Relative path from base dir to build dir.
Relative path from build dir to gyp dir.
Relative path from build dir to top dir.
Relative path from build output dir to base dir.
Relative path from source root to our output files.
Rely on exception handling to report errors.
Rely on system service configuration being a particular way.
Remember initial indentation level for this class.
Remember the whole nesting stack up to this point.
Remove "// XFAIL: whatever" lines.
Remove all dependencies marked as 'link_dependency' from the targets of type 'none'.
Remove all files in test_dir leaving directory structure intact.
Remove any keys with values that haven't been replaced.
Remove any of the targets for all that were not explicitly supplied, 'all' is subsequentely added to the matching names below.
Remove comments from the line, but leave in strings for now.
Remove duplicate entries
Remove escaped backslashes before looking for undefined escapes.
Remove escaped characters first to make quote/single quote collapsing basic.
Remove every non-hard static library dependency and remove every non-static library dependency that isn't a direct dependency.
Remove file.
Remove self-dependencies from targets that have 'prune_self_dependencies' set to 1.
Remove system includes shared by all targets from the targets.
Remove the .swift file we fed into swift-ide-test
Remove the final output if any postbuild failed.
Remove the oldest core dumps first.
Remove this when we have ParamCoerceMode working for PHP methods
Remove variable references, but not if they refer to the magic rule variables.
Rename the new file to the permanent name.
Reparsing isn't cheap, so skip it if nothing changed.
Replace "not --crash" with "not", and remove XFAIL lines.
Replace all double-quotes with double-double-quotes to escape them for cmd shell, and then quote the whole thing if there are any.
Replace originals with files generated from templates
Replace the XCConfigurationList attached to the PBXProject object with a new one specifying all of the configuration names used by the various targets.
Replace the dependencies file with the input file.
Replacement macros for CHECK/DCHECK/EXPECT_TRUE/EXPECT_FALSE
Represents a C11 generic selection.
Represents a unary expression.
Represents an expression that computes the length of a parameter pack.
Represents the "self" expression in a ObjC method.
Request sorted dependencies in the order from dependents to dependencies.
Reset include state across preprocessor directives.
Reset the object group so old frame variable objects don't linger forever.
Reset the visited status for _GetBuildTargets.
Resolve dynamic type.
Resolve it by interpreting it as relative to build_file.
Respect environment variables related to build, but target-specific flags can still override them.
Restore stdout.
Restore the bindings
Restores original filename in case that cpplint is invoked from Emacs's flymake.
Results must be pre-sorted by typed_name.
Resume and hit next stop.
Resume tokenizing after the end of the code.
Retrieve a row that corresponds to this first code point.
Retrieve the default value of 'SHARED_LIB_SUFFIX'
Return False, becuase we don't support changing source at runtime.
Return None.
Return a list of process info.
Return an instantiation of the printer if found.
Return early if the top of the nesting stack is not a class, or if the class head is not completed yet.
Return existing server port if the protocol matches.
Return previously calculated value, if there is one
Return the diagnostics.
Return the file path.
Return types for function pointers also look like casts if they don't have an extra space.
Return version if it is cached.
Return whether the user is the owner of the server process.
Returns True if all configurations have a unique 'SYMROOT' attribute.
Returns a boolean of whether the log directory exists or was successfully created.
Returns a full path to self relative to the project file, or relative to some other source tree.
Returns all values for the 'SYMROOT' attribute defined in all configurations for this target.
Returns stderr.
Reuse global functions from make backend.
Reverse the list of matches so that replacements are done right-to-left.
Root targets across all files.
Rule definitions may specify additional inputs in their "inputs" attribute.
Rule sources are direct inputs to rules.
Rules can potentially make use of some special variables which must vary per source file.
Rules must be early like actions.
Rules to determine extended grapheme cluster boundaries, as defined in 'Grapheme Break Chart', http://www.unicode.org/Public/6.3.0/ucd/auxiliary/GraphemeBreakTest.html, Unicode 6.3.0.
Run a specific CI job
Run all postbuilds in a subshell.
Run commands
Run kill mode 0, 1 and 2 by turn.
Run mt.exe on the theoretically complete manifest we generated, merging it with the one the linker generated to confirm that the linker generated one does not add anything.
Run specified CI jobs
Run the command
Run the process silently without stdout and stderr.
Run through the list and handle variable expansions in it.
Running it with the copy we just created should pass.
Runs `hh_client check` asserting the stdout is equal the expected.
SHARED_INTERMEDIATE_DIR is the same, except that it is shared among all targets that share the same BUILT_PRODUCTS_DIR.
SLOW: check every pointer in town
Sadly there is no way to make the switch atomic.
Same as above, but for supp_lookup1/supp_lookup2.
Same as passing sys.stderr, except python2.4 doesn't fail on it.
Same as passing sys.stdout, except python2.4 doesn't fail on it.
Same for environment.
Save __children__ from the local bindings
Save a copy of this object's old properties, because they'll still be needed.
Save last 100 logs into buffer.
Scan for includes and merge them in.
Scan the next line
Scan the previous line
Search for loop keywords at the beginning of the line.
Search for the function arguments or an initializer list.
Search python binding with heuristics.
Search through the path list and find an existing file that we can access.
Section: customized api to get logs in buffer.
Section: implementation of BufferingHandler api.
Sections that can be found inside targets or configurations, but that should not be propagated from targets into their configurations.
Sections that must exist inside targets and not configurations.
See -h output for instructions
See LICENSE.TXT for details.
See PBXTargetDependency._schema above.
See XCObject._EncodeString.
See _EncodeString.
See _XCKVPrint.
See __init__ below.
See also _AddActions: cygwin's setup_env mustn't be called for every invocation or the command that sets the PATH will grow too long.
See also clang_defaultEditingTranslationUnitOptions in Index.h.
See comment a few lines above.
See comment at cc_command for why there's two .pdb files.
See crbug.com/314728.
See explanation in WriteActions.
See http://blogs.msdn.com/b/vcblog/archive/2010/04/21/quick-help-on-vs2010-custom-build-rule.aspx for more details.
See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment threads.
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors Bit counts for all int types
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This file contains the data structure that transforms arguments into usable values
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This file contains the main subroutines that invoke or stop the merge worker.
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This file contains the server and handler definitions that pass files to the merge worker processes.
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This file contains the worker processes that watch a file queue for files and merge profile data in parallel.
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This file implements a test harness for running Swift performance benchmarks.
See http://swift.org/LICENSE.txt for license information See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors This module is used to prevent profile data filling up available disk space by listening for profile data and merging them into a universal profdata file while tests are executing.
See https://phabricator.intern.facebook.com/D2301649 for details on why this used to exist.
See nuclide_server.py for details.
See that function.
See the AUTHORS file for names of contributors.
See the comment in WriteCopies about expanding env vars.
See the corresponding comment in the posix section above for details.
See the documentation for a list of builtin themes.
See the testBuildClass test in cpplint_unittest.py for an example of this.
See: https://github.com/Lawouach/WebSocket-for-Python/issues/59
Select a name for the output file.
Select stripes across all categories and compute the geomean of these stripes
Self reference is used in a few places to append to the default value.
Self references are ignored.
Send a notification context with frame id of the dummy frame sent by Page.getResourceTree.
Send the test certs files to temp dir.
Separate out 'path/to', 'file.gyp' from 'path/to/file.gyp'.
Separate out 'path/to/file.gyp, 'target_name' from 'path/to/file.gyp:target_name'.
Separators must be specified to avoid trailing whitespace.
Server may take some time to kill itself.
Set LD_LIBRARY_PATH in case the action runs an executable from this build which links to shared libs from this build.
Set LD_LIBRARY_PATH in case the rule runs an executable from this build which links to shared libs from this build.
Set LOCAL_ADDITIONAL_DEPENDENCIES so that Android's build rules depend on both our dependency targets and our generated files.
Set SWIFT_BUILD_ROOT to a directory that will contain a subdirectory for each build configuration
Set SWIFT_SOURCE_ROOT in your environment to control where the sources are found.
Set Subject Alternative Name.
Set a variable so conditions can be based on msvs_version.
Set all the dependencies, but not if we are using an external builder like ninja
Set configuration type.
Set it to None to signal to subprocess.Popen that it should run the command in the current directory.
Set of non-empty short target names.
Set project-level attributes from multiple options
Set the bounds of the TC.
Set the explicit PDB path in the appropriate configuration of the original target.
Set the module definition file if any.
Set the variable to the supplied value.
Set timeout
Set up additional defaults not expressed in the schema.
Set up includes.
Set up path_sections and non_configuration_keys with the default data plus the generator-specific data.
Set up the Current version.
Set up the child's back-reference to this object.
Set up the configurations for the target according to the list of names supplied.
Set up the dependency links.
Set up the included_files key indicating which .gyp files contributed to this target dict.
Set up the logging early on in the process.
Set up the ownership link.
Set up the root symlinks.
Set up the shim to output its PDB to the same location as the final linker target.
Set user-specified project-wide build settings and config files.
Sets some values in default_variables, which are required for many generators, run on Windows.
Sets up this PBXGroup object's dicts to reference the child properly.
Setting a "name" property at instantiation may also affect "productName", which may in turn affect the "PRODUCT_NAME" build setting in children of "buildConfigurationList".
Setting a new item creates a new link which goes at the end of the linked list, and the inherited dictionary is updated with the new key/value pair.
Settings that are the same for all configs are implicitly per-target settings.
Setup params to pass to and attempt to launch reg.exe
Setup params to pass to and attempt to launch reg.exe.
Shard dependencies.
Shard target_dict.
Shard target_list.
Shared by all XcodeSettings, so cached at class-level for efficiency.
Shared libraries are already fully linked.
Shell Environment
Should also be removed once upstreamed.
Should always run for a given target to handle command-line changes.
Should be coupled with do_cmd.
Should be first for LLDB package to be added to search path.
Show packages being linted when --verbose flag is specified
Sign certificate signing request with certificate authority, and generate the certificate.
Similar to the above, we only trigger if both sides are missing spaces to avoid false positives with shifts.
Similarly, if we haven't seen an opening brace yet, but we already saw a closing parenthesis, then these are probably function arguments with extra "class" or "struct" keywords.
Similarly, this type of code causes issues:
Simple demo that shows files that most contribute to total size.
Simple logger
Simulate check_call behavior, since check_call only exists in python 2.5 and later.
Simulates a Swift compilation for the purposes of dependency analysis.
Since 'copies' can't run scripts, there's no need to write the env then.
Since I could find no way to make foreach work with spaces in filenames correctly, the .d files have spaces replaced with another character.
Since environment variables can refer to other variables, the evaluation order is important.
Since flow v0.18.1 `--version` was deprecated in favor a `version` command
Since function calls often occur inside if/for/while/switch expressions - which have their own, more liberal conventions - we first see if we should be looking inside such an expression for a function call, to which we can apply more strict standards.
Since make might not rebuild everything that could be declared here as an output, this extra compilation activity is unnecessary.
Since some toolsets might have been defined conditionally, perform a second round of toolsets expansion now.
Since the CLT has no SDK paths anyway, returning None is the most sensible route and should still do the right thing.
Since the conditon can naturally contain variable references without needing to resort to GYP expansion syntax, this is of dubious value for variables, but someone might want to use a command expansion directly inside a condition.
Since the list is guaranteed not to contain dicts, this won't do anything with conditions sections.
Since the results are sorted, binary search to find the range that matches.
Since this is for MSVS only settings, no translation will happen.
Skip "variables" and string values, which were already processed if present.
Skip "variables", which was already processed if present.
Skip a rule with no action and no inputs.
Skip all the blank line checks if we are immediately inside a namespace body.
Skip checks if the class is small, where small means 25 lines or less.
Skip emitting anything if told to with msvs_existing_vcproj option.
Skip if not a nuclide package.
Skip if not on Windows or Python Win32 setup issue
Skip if previously visted.
Skip if visited already.
Skip over nonexistent types.
Skip symbols from other files.
Skip the tool named '' which is a holder of global settings handled by _GetMSBuildConfigurationGlobalProperties.
Skip this check if the keywords are not preceded by whitespaces.
Slurp input file.
Snip out an extra 'lib' from libs if appropriate.
So can "inputs" and "outputs" sections of "actions" groups.
So do as other gyp generators and use --start-group and --end-group.
So far only the first token in command is assigned to command field.
So for now, we will allow it, unless the 'allow_sharedlib_linksettings_propagation' flag is explicitly set to False.
So put it in LOCAL_CFLAGS.
So we need to produce 2n backslashes.
So, instead of doing...
So, we remove them from the PATH using the ANDROID_BUILD_PATHS variable set by envsetup.
Socket based test that are possibly port clowny Github commit: 6ae44fc92acb63e7fa31b5fd4fcd4cf939c3ef54
Solution build configuration
Some actions/rules output 'sources' that are already object files.
Some boolean settings went from numerical values to boolean.
Some build environments may allow their intermediate directory to be shared on a wider scale, but this is not guaranteed.
Some combinations of merge policies appearing together are meaningless.
Some editors create broken symlinks as part of their locking scheme, so ignore those.
Some helpers
Some more style checks
Some of the generation below can add extra output, sources, or link dependencies.
Some of them may now belong in in_degree_zeros.
Some path relies on target-specific variables, bail.
Some phases may be present in multiples in a well-formed project file, but phases like PBXSourcesBuildPhase may only be present singly, and this function is intended as an aid to GetBuildPhaseByType.
Some products go into the output root, libraries go into shared library dir, and everything else goes into the normal place.
Some runs with kill_random_test that causes rocksdb to crash at various points in code.
Some subclasses need to perform validation beyond what the schema can enforce.
Some test end up using sockets, files on disk, etc.
Some unused variables.
Some use of built-in names.
Something could be on sending on that UDP port
Something went wrong.
Sometimes it prints them with comments, but the majority of the time, it doesn't.
Sometimes tokenizer errors report a line beyond the last one
Sometimes, Xcode is able to detect that a project file has changed but can't unload it because something else is referencing it.
Sort config guids for easier diffing of solution changes.
Sort everything else by putting group before files, and going alphabetically by name within sections of groups and files.
Sort results for fast filtering.
Sort the PBXReferenceProxy children according to the list of remote products.
Sort the dependencies list in the order from dependents to dependencies.
Sort the groups nicely.
Sort the list.
Sort the targets based on how they appeared in the input.
SortGroup is recursive.
SourceGroup and ProductsGroup are created by default in Xcode's own templates.
Special case.
Special handling for function signature specializations of generic specializations.
Special variables that may be used by gyp 'rule' targets.
Specify the filter it is part of, if any.
Split it the same way sh would split arguments.
Split on newlines and filter out empty lines.
Split on whitespace
Split the paths into components.
Split the size using space and arithmetic operators as delimiters.
Split up the double braces.
Splits a qualified target into a build file, target name and toolset.
Stack for tracking all braces.
Stack of _PreprocessorInfo objects.
Stack of closing punctuations we expect to have in text after position.
Standard header.
Standard package.json fields
Start Nuclide server.
Start a Nuclide server using default parameters.
Start a fresh server and monitor.
Start of a multi-line raw string
Start the object.
Start with the default variables from the command line.
Starting accessibility server is different for simulator and device
Status when it should be assumed that everything has changed.
Stop at entry
Stop existing Nuclide server.
Stop in a line with all expressions in scope.
Stop once we receive the sentinel
Stop the server, ensuring that its logs get flushed
Store DEPTH for later use in generators.
Store a reference to the TU in the Python object so it won't get GC'd before the Cursor.
Store the item.
String ends while still quoted according to VCProj's convention.
String is special -- it is a non-templatized type in STL.
StringIO import path differs across Python 2 and 3.
Strings that do not match must be quoted and may be further transformed to be properly encoded.
Strings that match this pattern are quoted regardless of what _unquoted says.
Strings that match this pattern may be printed unquoted.
Strip comments.
Structures and Utility Classes
Stuff the outputs in a variable so we can refer to them later.
Subclasses must override this by returning a two-element tuple.
Subsequent lines are continuations, so indent them.
Suffix rules for generated source files.
Suffix rules for source folder.
Support a mode for using cmd directly.
Support the UNIX convention of using "-" for stdin.
Support wrappers from environment variables too.
Suppress nohup logging.
Surprisingly, including the path to the clang binary as the first argument does not cause any issues.
Swift documentation build configuration file.
Swift_Programming_Language/Expressions.html
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
TODO fix quoting for qualified variable names
TODO:  not duplicate this mapping from pylib/gyp/__init__.py
TODO:  search for the first non-'Default' target.
TODO: Avoid code duplication with _ValidateSourcesForMSVSProject in msvs.py.
TODO: Avoid code duplication with _ValidateSourcesForOSX in make.py.
TODO: Check if MSVC allows this for loadable_module targets.
TODO: Client common name is 'nuclide'.
TODO: Handle subprocess.CalledProcessError for this call:
TODO: Ideally, we want to use psutil, but it is not part of standard library.
TODO: In this case, it depends on the target.
TODO: It would be nice to be able to tell CMake all dependencies.
TODO: It's not clear if libtool_flags should be passed to the alink call that combines single-arch .a files into a fat .a file.
TODO: Keep track of the line number as well
TODO: More general variable expansion.
TODO: Remove it after migration is complete.
TODO: Remove once bots are on 2.7, http://crbug.com/241769
TODO: See if any of these should work in repo mode
TODO: Should probably check that this is either a reference or declaration prior to issuing the lookup.
TODO: Supporting fat binaries will be annoying.
TODO: Take excluded sources into consideration if possible.
TODO: These return booleans to indicate success.
TODO: This is a workaround for testing.
TODO: This is broken, one cannot generally set properties on files, as other targets may require different properties on the same files.
TODO: This is exported correctly, but assigning to it is not supported.
TODO: This should not be hard coded.
TODO: Verify test_name and iters_computed
TODO: figure out how to not build extra host objects in the non-cross-compile case when this is enabled, and enable unconditionally.
TODO: fix me.
TODO: handle other breakpoint event types.
TODO: log the error to analytics db.
TODO: make this configurable.
TODO: pass environment variables.
TODO: print interface's methods and dynamic type's func pointers thereof.
TODO: really support workspace.
TODO: task 10395133
Tail 1-indexes line numbers and starts emitting from the nth line.
Take a copy of the node and remove it from the list.
Take care to normpath only the path in the case of 'call ../x.bat' because otherwise the whole thing is incorrectly interpreted as a path and not normalized correctly.
Take out the dependent settings now that they've been published to all of the targets that require them.
Take the dependency out of the list, and don't increment index because the next dependency to analyze will shift into the index formerly occupied by the one being removed.
Take the first line, as that's the first found in the PATH.
Take the output of lit as standard input.
Take the wildcard out and adjust the index so that the next dependency in the list will be processed the next time through the loop.
Take these nodes out of in_degree_zeros as work progresses, so that the next node to process from the list can always be accessed at a consistent position.
Target and sources
Targets that have no dependencies are treated as dependent on root_node.
Targets that matched.
Technically a valid construct, but against style.
Tell IDE server is ready.
Tell LLDB to print CKComponentAction as a c-string
Tell Xcode to look everywhere for headers.
Tell parent channel is ready.
Test Subject Alternative Name.
Test on empty path.
Test on valid dbPath.
Test that the raw invocation of _first_common_executables either returns None or matching paths.
Test with multiple manifest files in dbPath.
Test with the default manifest file in dbPath.
Tests for a bug in PHP
Tests from Unicode spec have isolated surrogates in them.
Tests that work but not in repo mode
Tests use banned reflection features
Thankfully the typechecker does not accept them at this location, and so it won't actually silence the error and can be fixed manually.
That ensures that earlier replacements won't mess up the string in a way that causes later calls to find the earlier substituted text instead of what's intended for replacement.
That is, it doesn't merge the trees.
That list is stored here.
That means that things need to be prepended to excluded_list to maintain them in the same order that they existed in the_list.
That means this has two tasks:
That means we have to handle -emit-bc and -c actions.
That module has a much better description of what's going on and why.
That would be considered invalid anyway.
That would prepend the new items to the list in reverse order, which would be an unwelcome surprise.
That's probably fine.
The "data" dict that was passed to LoadTargetBuildFileParallel
The "target" property accepts an XCTarget object, and obviously not NoneType.
The "whatever/" list is no longer needed, dump it.
The 'target_build_files' key is only set when loading target build files in the non-parallel code path, where LoadTargetBuildFile is called recursively.
The -3 argument indicates that we're using the Swift 3 Clang importer rules.
The .d checking code below uses these functions: wildcard, sort, foreach, shell, wordlist wildcard can handle spaces, the rest can't.
The Android build system does not allow generation of files into the source tree.
The CLT has no build information, so we return an empty string.
The GUID needs to be the same each time this builder is invoked, so that we don't need to rebuild the solution when the project changes.
The LLVM Compiler Infrastructure
The Mac linker doesn't work that way, but other platforms do, and so their linker invocations need to be constructed in this way.
The Nuclide server is healthy and running.
The Nuclide server process is running.
The PBXFileReference or PBXVariantGroup will be added to or gotten from this PBXGroup, no recursion necessary.
The PCH is only built once by a particular source file.
The Products group is a special case.
The Totals line would be parsed like this.
The Unicode 7.0.0 draft does not change these rules.
The XPC service cannot run via the bindings due to permissions issue.
The Xcode "issues" don't affect xcode-ninja builds, since the dependency logic all happens in ninja.
The Xcode-specific keys that exist on targets and aren't moved down to configurations.
The Xcode-specific sections that hold paths.
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
The actual number of bits are just trie parameters.
The algorithm is the same as above, but operates on self.supp_data/supp_lookup2.
The allowed extensions for file names This is set by --extensions flag.
The allowed line length of files.
The android backend only supports the default configuration.
The attribute does nto exist in the main node.
The attribute exist in the main node.
The base case for recursion is defined at PBXProject.PBXProjectAncestor.
The base command is python.
The below make code says, only load the .mk file if the .mk filename doesn't start with a token in NO_LOAD.
The bitwidth of data depends on the application of the trie.
The built host binaries may not be suitable, and can cause errors.
The cache key contains the command to be run as well as the directory to run it from, to account for commands that depend on their current directory.
The caller is interested in the variant group, not the specific variant file.
The cheap and easy case.
The child was relative to its parent.
The circular doubly linked list starts and ends with a sentinel element.
The class may have been declared with namespace or classname qualifiers.
The code below generates a separate .mk file for each target, but all are sourced by the top-level GypAndroid.mk.
The code below generates a separate .mk file for each target, but all are sourced by the top-level Makefile.
The code point value is split as follows:
The comments below about wanting to avoid project-wide build settings apply here too, but this needs to be set on a project-wide basis so that files relative to the _intermediate_var setting can be displayed properly in the Xcode UI.
The condition below is in case of using --local on a file already in the current workind directory.
The condition variable used to protect this object and notify the main loop when there might be more data to process.
The constructor and destructor will not have those qualifiers.
The current rule is: We only clear spaces from both sides when we're at the end of the line.
The cursor referenced by the type of size is the typedef for size_type.
The cwd is the current build directory.
The cygwin case handles this inside the bash sub-shell.
The database could not be loaded
The debugger prints the path given on the command line, which is often relative.
The default is instance method, and methodTypeCharacter may not actually be '-'.
The default state of the category filter.
The definition of PBXTargetDependency can't be moved below XCTarget because XCTarget's own schema references PBXTargetDependency.
The dependent one or more dependencies not in flat_list.
The encoding of source files.
The errors should be available via the TranslationUnit's diagnostics.
The files in this directory will be used to set up the initial environment for each test.
The first "src" component found will be treated as though it were the path used for --depth.
The first item in a specification is the name of the element.
The first item in the tuple should be the PBXGroup to which "path" should be added, either as a child or deeper descendant.
The first line of a dependency list.
The first line of a project definition.
The following appears to be as-yet undocumented.
The following drawing explains how it is implemented:
The following function is just a speed up, no semantics are changed.
The following problems with Xcode rules were found.
The following script takes as input a SIL fragment and changes all SSA variables into FileCheck variables.
The format of PkgInfo is eight characters, representing the bundle type and bundle signature, each four characters.
The full version, including alpha/beta/rc tags.
The generator flag 'xcode_serialize_all_test_runs' controls the forcing of all tests serially.
The generators can provide more keys, the two lists are merged into path_sections, but you should call IsPathSection instead of using either list directly.
The guard should be PATH_FILE_H_, but we also allow PATH_FILE_H__ for backward compatibility.
The harness makes a separate test from each of these functions, runs all the tests and reports aggregate results.
The headers phase should come before the resources, sources, and frameworks phases, if any.
The implicit make rules have it looking for RCS files, among other things.
The include_state object keeps track of the highest type seen, and complains if we see a lower type after that.
The included_files entries are relative to the dir of the build file that included them, so we have to undo that and then make them relative to the root dir.
The individual targets need to be merged into the defaults.
The inherited dict provides __getitem__, __len__, __contains__, and get.
The internal self.__map dictionary maps keys to links in a doubly linked list.
The kernel uses the following, but it seems like it would have false positives, where one string reordered its arguments.
The key is the tool name, the value is a dictionary mapping setting names to conversion functions.
The key is the tool name, the value is a dictionary mapping setting names to validation functions.
The language for content autogenerated by Sphinx.
The last line of a dependency list.
The last line of a project definition.
The last segment looks like a path.
The last segment looks like an environment setting or cli argument.
The ldflags config key is not used on mac or win.
The library module classes fail if the stem is set.
The link already exists.
The list itself can't influence the variables dict, and ProcessVariablesAndConditionsInList will make copies of the variables dict if it needs to pass it to something that can influence it.
The list of targets upon which the 'all' target should depend.
The log directory exists
The low bit of the unpacked value is the sign.
The main benchmark emits its own line.
The make generator does this always.
The make generator doesn't support it, so forbid it everywhere to keep the generators more interchangable.
The makefile rules are all relative to the top dir, but the gyp actions are defined relative to their containing dir.
The mapping is 0: default, 1: false, 2: true.
The maximum value of the first level index for supp tables.
The message is optional, in which case None is stored for each rule source.
The missing MOCK_METHOD is usually one or two lines back, so scan back one or two lines.
The missing spaces will be flagged by CheckSpacing.
The msvs specific sections that hold paths
The multiprocessing pool.
The name for this set of Sphinx documents.
The name of the builddir.
The name of the current section.
The need for this setting is explained above where _intermediate_var is defined.
The new file is different from the old one, or there is no old one.
The new file is identical to the old one, just get rid of the new one.
The new temporary file is then compared to the existing project file, if any.
The normal choice, DERIVED_FILE_DIR, is target-specific, which is thought to be too restrictive as it is likely that multiple targets within a single project file will want to access the same set of generated files.
The null statement.
The numbers are Apple radar IDs.
The old method above does not work when only SDK is installed.
The only differences are the last two parts.
The only exception we regularly allow is "unsigned short port" for port.
The only subclass of PBXGroup, PBXVariantGroup, should not participate in reparenting in the same way: reparenting by merging different object types would be wrong.
The only workaround is to put rules and their inputs in a separate target from the one that compiles the rule outputs.
The opening angle bracket is probably there if we look for it, so just return early here.
The operation failed, possibly because the file is set to read-only.
The ordering required to allow for monkeypatching causes the warning "I100 Import statements are in the wrong order." when linting using flake8-import-order.
The original parent had a sourceTree set, use it.
The other intelligent aspects of merge processing won't apply because item is being merged into an empty dict.
The other option, PROJECT_DERIVED_FILE_DIR, is unsuitable because while it is project-specific, it is not configuration-specific.
The other project reports its path as relative to the same directory that this project's path is relative to.
The other project's path is not necessarily already relative to this project.
The path of last found header.
The path type is needed for regenerating, for optparse we can just treat it as a string.
The paths in build_files were relativized above, so undo that before testing against the non-relativized items in target_list and before calculating the Makefile path.
The paths were the same.
The prerequisites for this rule are the rule source itself and the set of additional rule inputs, if any.
The project-wide settings are only intended to be used in cases where Xcode attempts to resolve variable references in a project context as opposed to a target context, such as when resolving sourceTree references while building up the tree tree view for UI display.
The regular expression we use to match compiler-crasher lines.
The remaining bits point to the next blockable in the chain.
The remaining elements of an object dictionary are sorted alphabetically.
The remaining methods are order-aware.
The resources phase should come before the sources and frameworks phases, if any.
The rest of the tokens
The root directory used for deriving header guard CPP variable.
The rule action script would need to touch the dummy.
The rule message and action have already had the necessary variable substitutions performed.
The same condition is often evaluated over and over again so it makes sense to cache as much as possible between evaluations.
The same, but for run_test_targets.
The script wrapper of the library is for testing purpose.
The second argument is an addition that causes a pylint warning.
The second item should be a boolean indicating whether files should be added into hierarchical groups or one single flat group.
The set of all build files that have been scheduled, so we don't schedule the same one twice.
The settings are: filetype : used for explicitFileType in the project file prefix : the prefix for the file name suffix : the suffix for the file name
The short X.Y version.
The source can't be found.
The source directory tree.
The spaces within the variables are valid, so remove the variables before checking.
The spec explicitly defined an external builder, so don't change it.
The suffix of source filenames.
The supp tables contain entries for BMP code units to simplify trie implementation, but those BMP entries are filled with the default value, so they compress well.
The target doesn't contain the source, but the dependent targets have not yet been visited to determine a more specific status yet.
The target has a dependency on another target that contains one of the supplied paths.
The target is linkable, add it to the list of link dependencies.
The target's sources contain one of the supplied paths.
The target's sources weren't in the supplied paths and none of the target's dependencies depend upon a target that matched.
The translation unit cursor exists primarily to act as the root cursor for traversing the contents of a translation unit.
The unique kind objects, index by id.
The unique kind objects, indexed by id.
The unquoted segments are at the even-numbered indices.
The value formatting is cute, but not really used right now.
The value of inherit_unique_symroot decides, if a configuration is assumed to inherit a unique 'SYMROOT' attribute from its parent, if it doesn't define an explicit value for 'SYMROOT'.
The value of this option must be the base URL from which the finished HTML is served.
The variable name is the key name in the "variables" dict.
The variable name is the key name with a "_" character prepended.
The version that we will be importing the tests from.
The whole block is an inline assembly block Match start of assembly blocks
The workaround is to put a "conditions" section within a "variables" section.
The workflow of the harness is the following: o Basing on the input files, generate 'processed' files.
The xcode build is relative to a gyp file's directory, and OTHER_LDFLAGS can contain entries that depend on this.
The xcode generator special-cases global xcode_settings and does something that amounts to merging in the global xcode_settings into each local xcode_settings dict.
Their spelling never changes and is consequently provided by this spelling cache.
Theme options are theme-specific and customize the look and feel of a theme further.
Then filter out specific passes.
Then when it gets merged kill your hack.
Then write out an edge using the rule.
Then yield the thing we found.
There are certain situations we allow one space, notably for section labels
There are no reparse options available in libclang yet.
There are workarounds for some of its inadequacies, but in aggregate, the workarounds added complexity to the generator, and some workarounds actually require input files to be crafted more carefully than I'd like.
There currently aren't.
There is currently no logic on deciding what these nontrivial things are, so this check is triggered by namespace size only, which works most of the time.
There is no Express edition for 2015.
There is no name.
There is nothing we can do about this.
There may be other processes with this particular pattern in it.
There should always be a space between the // and the comment
There should be at most one ResultType chunk and it should tell us type of suggested expression.
There should be no more than one on a given port.
There should probably be some way for that module to push the names in, rather than having to hard-code them here.
There shouldn't be space around unary operators
There will be more chances to add it to flat_list when examining it again as a dependent of those other dependencies, provided that there are no cycles.
There's a special case for "for" since the style guide allows space before the semicolon there.
There's already a PBXBuildFile in this phase corresponding to the PBXVariantGroup.
There's no compelling reason for Xcode's linker invocations to differ.
There's no need to write anything into the script to ensure that the output directories already exist, because Xcode will look at the declared outputs and automatically ensure that they exist for us.
There's no reason to not respect the umask here, which means that an extra hoop is required to fetch it and reset the new file's mode.
There's nothing unique about this PBXGroup, and if left alone, it will wind up with the same set of hashables as all other PBXGroup objects owned by the projectReferences list.
There's two levels of architecture/platform specification in VS.
Therefore, on py2k, the bytes are actually a str object and can't be used in the utf8 validator as we need integers when we get each byte one by one.
Therefore, the port is not available for Nuclide server.
These additional inputs are used for dependency tracking purposes.
These are always matched on separate lines.
These are defined in base/logging.h and testing/base/gunit.h.
These are filled in on a as-needed basis.
These are incorrect values:
These are lists that will be treated as exclude lists and regular expression-based exclude/include lists.
These are mapped to the pseudo-product type com.googlecode.gyp.xcode.bundle.
These are matched separately because operator names cross non-word boundaries.
These are mostly intermediate files for the build system.
These are not replaceable with CHECK_LE, so bail out early.
These are only designed to work for gcc-4.8.1.
These are the same variable names that Xcode uses for its own native rule support.
These can be specified in means beyond what argparse supports, so we gather them in a list and parse them manually.
These can be valid for both frameworks and static libraries.
These cannot run on non-Windows as they require a VS installation to correctly handle variable expansion.
These characters can be put into the argument value by variable substitution."
These constants define the current inline assembly state
These files contain a main function with simple arguments parsing, time measurement utilities and a loop in which the bench-functions are called.
These flags are common for all extensions and provide loader and main function.
These flags reflect the compilation options used by xcode to compile extensions.
These groups should appear in the listed order.
These mappings are contained in the class' _encode_transforms list.
These must happen before we compile any sources, so compute a list of predependencies for sources while we do it.
These pass with a proper proxy setup, which our build machines don't seem to have.
These per-process dictionaries are used to cache build file data when loading in parallel mode.
These relationships should not exist, but they've only been observed to be harmful with the Xcode generator.
These semicolons seems far more common than other kinds of redundant semicolons, possibly due to people converting classes to namespaces.
These targets really should just add a product_name setting that doesn't include the prefix.
These tests use assert with a string argument, which is also basically eval.
These tests use create_function, which is basically eval.
These variables should just be spit back out as variable references.
They are copied after the builtin static files, so a file named "default.css" will overwrite the builtin "default.css".
They are ignored by default.
They are meaningless for type mh_bundle.
They are used to convert non-url characters into things that look like valid urls -- except that the replacement character for :identifier, '_' isn't valid in a URL either -- oops, hence :rfc1034identifier was born.
They contain the message and action to perform after resolving input-dependent variables.
They differ only slightly: In the former case, we want to package all dependent code into the .so.
They get matched as: -exported_symbols_list file -Wl,exported_symbols_list file -Wl,exported_symbols_list,file
They must go to the beginning of the list so that the dependency generation works as expected in ninja.
They will be fully expanded by recursion in ExpandVariables.
They're implemented on demand.
They're pretty large, so don't hog disk space.
They're products, not sources.
Things that look like escaped characters shouldn't occur outside of strings and chars.
Third argument, if non-zero, makes it do POSTBUILDS processing.
This AST node is only formed if full location information is requested.
This RE is a little bit more complicated than one might expect, because we have to take care of space removals tools so we can handle comments inside statements better.
This adds time to parsing but speeds up code completion.
This allows all the other paths we use to be relative to the Android.mk file, as the Android build system expects.
This allows us to avoid the need to do two passes during linking.
This allows us to handle quotes properly as long as we always use use single quotes and escape_quotes.
This arrangement means that a "conditions" section containing a "variables" section will only have those variables effective in subdicts, not in the_dict.
This avoids these false positives: - macro that defines a base class - multi-line macro that defines a base class - macro that defines the whole class-head
This benefits both the "build chrome" case as well as the gyp tests, which expect to be able to run actions and build libraries by their short name.
This breaks incremental linking, and is generally overly complicated.
This can go away when we add verification that all targets have the necessary configurations.
This can happen two ways: - We are at the beginning of the class.
This catches the special case of a closing brace having something other than just whitespace ahead of it -- we don't want to unindent that until after this line is printed so it stays with the previous indentation level.
This causes actions/rules invoked by gyp to sometimes use these instead of system versions, e.g. bison.
This check duplicates that behavior.
This class manages Nuclide servers.
This class represents a Nuclide server process on a port.
This comment is here just to include a ' to unconfuse syntax highlighting.
This could be further improved by inspecting the java file for the package name if this proves to be too fragile in practice.
This creates an interface with the same name as a builtin, which hphpc doesn't correctly support AttrUnique flags on.
This does not apply when the non-space character following the comma is another comma, since the only time when that happens is for empty macro arguments.
This does not match the characters in _escape, because those need to be backslash-escaped regardless of whether they appear in a double-quoted string.
This does not stop existing Nuclide server processes themselves.
This doesn't catch all cases.
This doesn't support per-configuration prefix headers.
This ensures that the earliest occurrence of the item will stay put.
This ensures that the item appears at the earliest possible position in the list.
This extra absorption in the regexp facilitates testing the regexp on its own, by preventing the interior of some of these constructs from being treated as literal text.
This file invokes the runner after parsing arguments.
This file is distributed under the University of Illinois Open Source License.
This file needs to be here in order for Python to treat the utils/cmpcodesize/cmpcodesize directory as a module.
This file needs to be here in order for Python to treat the utils/cmpcodesize/tests/ directory as a module.
This file needs to be here in order for Python to treat the utils/swift_build_support/ directory as a module.
This file needs to be here in order for Python to treat the utils/swift_build_support/tests/ directory as a module.
This function is called a lot so for maximum performance, avoid involving regexps which would otherwise make the code much shorter.
This function is considered a friend of XcodeSettings, so let it reach into its implementation details.
This function is only useful to get children that have names but no paths, which is rare.
This function might benefit from a dict optimization as GetChildByPath for some workloads, but profiling shows that it's not currently a problem.
This function ported from the logic in Homebrew's CLT version check
This function resolves a target into a canonical form: - a fully defined build file, either absolute or relative to the current directory - a target name - a toolset
This function should be used only to compare direct children of the containing PBXProject's mainGroup.
This function works closely with _EncodeString.
This generates makefiles suitable for inclusion into the Android build system via an Android.mk file.
This gets expanded by Python.
This gets serialized and sent back to the main process via a pipe.
This handles 'throw' and 'throw' assignment-expression.
This happens in the case of the root PBXGroup.
This happens to be easier in this case, since a variable's definition contains all variables it references in a single string.
This happens when the SDK is sync'd via src-internal, rather than by typical end-user installation of the SDK.
This has bitten us in the past.
This ignores whitespace at the start of a namespace block because those are not usually indented.
This includes sources as well as the starting directory a given gyp rule/action expects to be run from.
This is a comment
This is a low-prioroty problem and is not a show-stopper.
This is a sucky hack and it would certainly be cleaner to extend the schema to indicate whether or not a comment should be printed, but since this is the only case where the problem occurs and Xcode itself can't seem to make up its mind, the hack will suffice.
This is actually the quoting rules for CommandLineToArgvW, not for the shell, because the shell doesn't do anything in Windows.
This is all roughly based on the Makefile system used by the Linux kernel, but is a non-recursive make -- we put the entire dependency graph in front of make and let it figure it out.
This is an action that doesn't make any sense.
This is because the Android LOCAL_GENERATED_SOURCES must be in the local module intermediate directory for the compile rules to work properly.
This is because the downside for getting the whitelist wrong means some extra semicolons, while the downside for getting the blacklist wrong would result in compile errors.
This is dangerous -- casts can assign to temporaries, so the pointer doesn't point where you think.
This is done after variable expansion so that conditions may take advantage of expanded variables.
This is done in a separate loop up front, because the _included and _excluded keys need to be added to the_dict, and that can't be done while iterating through it.
This is done to avoid some false positives with shifts.
This is done to make it easy to build source paths.
This is done to more closely match the depth-first method used by DeepDependencies.
This is filed as Apple radar 6588391.
This is important because paths will be used as keys to the data dict and for references between input files.
This is intended for executable, shared_library and loadable_module targets where every configuration is set up to produce a PDB output.
This is intended to be used very sparingly.
This is intentional, as we do not want to block autocomplete.
This is just here to clarify.
This is meant to silence warnings for conditional includes.
This is necessary as the other dependencies on them may be static libraries themselves, which are not compile time dependencies.
This is not currently optimized with a dict as GetChildByPath is because it has few callers.
This is not expected to be much of a problem in practice.
This is not infinite-recursion proof.
This is not quite right, as it also protects these for actions, not just for rules where they are valid.
This is not true for static libraries, but currently the env is only written for bundles:
This is only non-None temporarily during the execution of some methods.
This is only triggered if both sides are missing spaces, even though technically should flag if at least one side is missing a space.
This is set by --linelength flag.
This is set by --root flag.
This is the dict for the PDB generating shim target.
This is the key corresponding to accessibility label in _accessibilityElementsInContainer:
This is the sort order used by Xcode.
This is to avoid adding struct arguments to the nesting stack.
This is typically used when parsing headers.
This is useful if the translation unit will be reparsed and you don't want to incur the overhead of reparsing the preamble.
This is useful if you only care about searching for declarations/definitions.
This isolates the final return value so that it isn't misattributed to the last stage.
This keeps the file writer from outputting something that would be treated as the end of a comment in the middle of something intended to be entirely a comment.
This lets us pop a frame at the top of the loop, which makes it easier to include the final frame.
This list is expanded on demand.
This list is not exhaustive, but that's okay.
This logic is list-specific, but since it relies on the associated dict key, it's checked in this dict-oriented function.
This may be None.
This may be done in gyp files to force certain includes to come at the end.
This may be unrecognized because it's an exclusion list.
This may not have been checked above if merging in a list with an extension character.
This means not only that the linker should not generate the intermediate manifest but also that the manifest tool should do nothing even when additional manifests are specified.
This means shared_library uses --whole-archive, while loadable_module doesn't.
This means that all variables in .mk-files clobber one another, and furthermore that any variables set potentially clash with other Android build system variables.
This means that all variables in .mk-files clobber one another.
This means that dependency resolution occurs after "pre" conditionals and variable expansion, but before "post" - in other words, you can't put a "dependencies" section inside a "post" conditional within a target.
This means the delimiter and the next list item that follow this one in the .vcproj file will be misinterpreted as part of this item.
This means we will not check single-line class definitions.
This method is a little bit esoteric.
This method returns True if all configurations in target contain a 'SYMROOT' attribute that is unique for the given target.
This module always tracks it as an object, but contains a hack to prevent it from printing the comment in the project file output.
This must check the unexpanded includes list:
This needs to be overridden in child classes.
This object is now relative to that variable, so it has no path attribute of its own.
This object retains its existing id and parent attributes.
This occurs when rule outputs from distinct inputs are interdependent.
This one was empty.
This pattern is used to determine when a string can be printed unquoted.
This pattern should match any character that needs to be escaped by XCObject._EncodeString.
This procedure needs to give the impression that target_defaults is used as defaults, and the individual targets inherit from that.
This project file isn't yet linked to the other one.
This python script runs db_stress multiple times.
This recurses into condition entries since they can contain toolsets as well.
This recurses into lists so that it can look for dicts.
This regex validates that the string looks like a GUID with all uppercase hex letters.
This remove the ParamCoerceMode checks that is usually in the beginning of the tests.
This replaces the obj variable for the action rule with an absolute version so that the output goes in the right place.
This requires input file cooperation and it means that process_outputs_as_sources is unusable.
This script runs and kills db_stress multiple times.
This should be deleted once Py2.7 is available on all bots, see http://crbug.com/241769.
This should be handled by mspdbsrv, but rarely errors out with c1xx : fatal error C1033: cannot open program database By making the rules target separate pdb files this might be avoided.
This should be irrelevant, but some targets extract .o files from .a and depend on the name of the extracted .o files.
This should call a generator-provided function that observes the proper list-to-argument quoting rules on a specific platform instead of just calling the POSIX encoding routine.
This should go into the build tree, but it's easier to keep it here for now.
This should probably be changed to be consistent with the single-file branch.
This should really be addressed by keeping all paths in POSIX until actual project generation.
This significantly reduces the amount of time required for creating complicated FileCheck Tests.
This simplifies manual builds of the target, and is required by the test framework.
This source code is licensed under the BSD-style license found in the LICENSE file in the "hack" directory of this source tree.
This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree.
This source code is licensed under the license found in the LICENSE file in the root directory of this source tree.
This source file is part of the Swift.org open source project
This state is specific to certain functions and should be isolated there.
This structure allows a fairly standard loop do the normal printing.
This test passes "by accident".
This tests the find open port feature and uses http.
This tool dumps imported Swift APIs to help validate changes in the Clang importer and its heuristics.
This typically indicates that I/O failed during save.
This validation should not be applied to MSVC2010 and later.
This value will be replaced dynamically for each configuration.
This way the work is done before the dependency checks for what should be recompiled.
This will always be the fallback because we're not sure enough that the header is associated with this file.
This will break if 'src' or 'java' exists in the package structure.
This will compute the actual application data size
This will not help if the comment started before the current line or ended after the current line, but it catches most of the false positives.
This will process a 'conditions' or 'target_conditions' section, perform appropriate merging and recursive conditional and variable processing, and then remove the conditions section from the_dict if it is present.
This will result in a KeyError being raised for the property that should be present, which seems more appropriate than NotImplementedError in this case.
This works around actions/rules which have more inputs than will fit on the command line.
Those codes are reserved or plainly forbidden
Throw something if False.
To add entropy the hashable is enhanced with the names of all its children.
To avoid a circular reference the hashables used to compute a child id do not include the child names.
To avoid unnecessary changes to the project file after Xcode opens it, don't write comments for remoteGlobalIDString.
To do this, just build up a new list of products based on the targets.
To get serial runs this little bit of python does the same as the linux flock utility to make sure only one runs at a time.
To help speed things up, pass -j COUNT to make so it does some work in parallel.
To make things simple, right now we only read gcov report from the input
To mitigate this problem, and to avoid even having Xcode present the UI sheet when an open project is rewritten for inconsequential changes, the project file is written to a temporary file in the xcodeproj directory first.
To print out auto-adjustable column, we need to know the longest length of file names.
To support making a "test runner" target that will run all the tests that are direct dependents of any given target, we look for xcode_create_dependents_test_runner being set on an Aggregate target, and generate a second target that will run the tests runners found under the marked target.
To work around this the result of the `map` is explicitly converted to a `list`.
To work around, the type of the "target" property is reset below, after XCTarget is defined.
Tool name mapping from MSVS to MSBuild.
Totals,2,2123,2123,2123,0,0
Treat as primitive build-in types.
Tricky point: Make has no string-equality test function.
Trivial benchmark shows that this is more efficient when the operands are longer than a single character, which is generally the case.
Try a bit harder to catch gmock lines: the only place where something looks like an old-style cast is where we declare the return type of the mocked method, and the only time when we are missing context is if MOCK_METHOD was split across multiple lines.
Try a bit harder to catch this case.
Try a bit harder to check for brace initialization.
Try a bit harder to find the beginning of the class.
Try building from generated source, too.
Try matching case 1 first.
Try matching cases 2-3.
Try matching cases 4-6.
Try to avoid setting global variables where possible.
Try to convert, this will raise ValueError if invalid.
Try to convert.
Try to find a direct subclass
Try to find an installation location for the Windows DDK by checking the WDK_DIR environment variable, may be None.
Try to find an instance of
Try to find the end of the class.
Try to get the function name.
Try to import, perhaps the paths are set up.
Try to print out literal strings.
Try to start Nuclide server again.
Turn it back into a string and we're done.
Turn off WinRT compilation
Turn off precompiled header usage for source files of a different type than the file that generated the precompiled header.
Turn on import libraries if appropriate
Turn on precompiled headers if appropriate.
Turn the list into a string that can be passed to a shell.
Turn the object's sourceTree and path properties into a single flat string of a form comparable to the path parameter.
Turn them into strs.
Type 2 is used for references to the producs of the other project file's targets.
URLs can be long too.
Unconditionally touch the output .a file on the command line if present and the command succeeded.
Undefine ANDROID for host modules TODO: the source code should not use macro ANDROID to tell if it's host or target module.
Undefined variable.
Unfortunately Clang has no way of limiting autocompletion results, but set a reasonable limit to avoid overloading the Atom UI.
Unfortunately the mapping of fields to python attributes in gdb.py isn't complete: you can't test for presence other than by trapping.
Unfortunately, it will also assume that all outputs are touched by the script, and if the outputs serve as files in a compilation phase, they will be unconditionally rebuilt.
Unhook the conditions list, it's no longer needed.
Unhook the includes list, it's no longer needed.
Unmatched parenthesis
Unnecessary semicolon.
Unpack the line table structure.
Unparenthesized operand.
Unused argument.
Update access control if we are inside a class/struct
Update all references to other projects, to make sure that the lists of remote products are complete.
Update global list of link dependencies.
Update global list of target outputs, used in dependency tracking.
Update pp_stack first
Update pythonpath with likely location in the active Xcode app bundle.
Update target_dicts for iOS device builds.
Update the associated dependencies file, in case anything changed.
Update the compiler directives in the shim target.
Update the dependencies.
Update the main output of the compilation job.
Update the map now that the config is complete.
Update the original target to depend on the shim target.
Update the output file mtime, or create it if necessary.
Update the translation unit with the latest contents.
Use '.' for the current directory '', so that the error messages make more sense.
Use 0 for linenum since outputting only one error for potentially several lines.
Use FORCE_DO_CMD to force a target to run.
Use KILL signal to force the process group to quit.
Use Popen here.
Use a banner that looks like the stock Python one and like what code.interact uses by default, but tack on something to indicate what locals are available, and identify gypsh.
Use clang-cl to cross-compile for x86 or x86_64.
Use default
Use items instead of iteritems because there's no need to try to look at reinserted keys and their associated values.
Use last layer.
Use of eval.
Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
Use project filename if name not specified
Use regex_filter to look for regex pattern in ps output.
Use source file name to set breakpoint.
Use the 64-on-64 compiler if we're not using an express edition and we're running on a 64bit OS.
Use the absolute path so that matching works properly.
Use the hashables of the weak objects that this object refers to.
Use the order of each remote PBXFileReference in remote_products to determine the sort order.
Use the output filename passed to the linker to generate an endpoint name for mspdbsrv.exe.
Use the param name, but fall back to the raw type if unnamed.
Used by SourceTreeAndPathFromPath
Used by _AdjustLibrary to match .a and .dylib entries in libraries.
Used by subgraphs.
Used to indicate that brief documentation comments should be included into the set of code completions returned from this translation unit.
Used to keep flaky tests in flaky/.
Used with /Yc and /Yu
Using PHP7 versions of these tests
Using a list to get ordered output and a set to do fast "is it already added" checks.
Using manual string matching since that is much faster than the regexp and this can be called hundreds of thousands of times so micro performance matters.
Using raw_lines here instead of elided to account for leading comments.
Utility type
VS recognized '' for this value too.
VS2013 and later, non-Express have a x64-x86 cross that we want to prefer.
Validate build_file extension
Value wrappers
Variable expansion may have resulted in changes to automatics.
Variables and fields.
Verify Nuclide server can get correct certificates paths.
Verify against the test process itself.
Verify cert files.
Verify it returns with same port that is passed in.
Verify non-existing workspace resolved to None.
Verify same cert files after restart.
Verify the new common name.
Verify workspace gets resolved to real path.
Verify workspace gets resolved.
Version check verifies it runs and has a working endpoint.
Version file in the same directory as the mock script.
Visual Studio 2010 has TR1
Wait for a sec and then ping endpoint for version.
Wait from response from client.
Walk down from the top until we hit a folder that has more than one entry.
Walk the entry tree and collect all the folders and projects.
Warn for any unimplemented signing xcode keys.
Warn of ignored settings
We add back in all of the non-compilable stuff to make sure that the make rules have dependencies on them.
We allow an open brace to start a line in the case where someone is using braces in a block to explicitly create a new scope, which is commonly used to control the lifetime of stack-allocated variables.
We allow some, but not all, declarations of variables to be present in the statement that defines the class.
We also check "if" blocks here, since an empty conditional block is likely an error.
We also check for the case where the previous line is indented 6 spaces, which may happen when the initializers of a constructor do not fit into a 80 column line.
We always build CMake 2.8.8, so no need to do anything if the directory already exists.
We always want to ignore the environment when regenerating, to avoid duplicate or changed flags in the environment at the time of regeneration.
We append this one.
We are still keeping the less descriptive message because if lhs or rhs gets long, the error message might become unreadable.
We borrow heavily from the kernel build setup, though we are simpler since we don't have Kconfig tweaking settings on us.
We build up a list of every single one of the targets so we can slurp in the generated dependency rule Makefiles in one pass.
We call private method that gives back all visible accessibility children for view
We call the path from the source root to the gyp file the "base directory" within the per-.gyp-file NinjaWriter code.
We can only insert the line directive at a line break
We can safely pop the build_file_data from per_process_data because it will never be referenced by this process again, so we don't need to keep it in the cache.
We can simply ignore them since they're either empty line or doesn't find executable lines of the given file.
We can then reverse the result of the topological sort at the end.
We can't access `mcg' for whatever reason.
We can't be sure that these were actually Nuclide dumps, but they're temporary anyway.
We can't simply silence the warning on first sight of closing brace, because that would cause false negatives for things that are not initializer lists.
We can't use displayname as it also includes the arguments.
We categorize each error message we print.
We check here rather than inside ProcessLine so that we see raw lines rather than "cleaned" lines.
We classify each include statement as one of those 5 types using a number of techniques.
We convert to a dict here.
We could issue a warning here, but it probably resulted in a compiler error already.
We could use some of these to add additional capabilities, I suppose, but they might not have parity with other platforms then.
We create a huge list of all the elements of the file.
We disable host name validation here so we can ping the server endpoint using localhost.
We disable this so that the severity can be better reflected in the UI.
We do not use `tarfile` here because: - We wish to support LZMA2 compression while also supporting Python 2.7.
We don't add the "_excluded_files" filter.
We don't know how to merge.
We don't know this setting.
We don't need this filter anymore.
We don't want such lists to be stringified.
We first sort by name, if present.
We generate definitions for these variables on the fly when processing a rule.
We give up.
We got a text frame before we completed the previous one
We have a sub-filter.
We have not seen a closing angle bracket yet, but it's probably a few lines later if we look for it, so just return early here.
We have to do some pretty insane escaping to get those backslashes and dollar signs past make, the shell, and sed at the same time.
We have to fixup the deps output in a few ways.
We ignored case earlier, but use it as a final ranking basis.
We implement a whitelist of safe macros instead of a blacklist of unsafe macros, even though the latter appears less frequently in google code and would have been easier to implement.
We install host executables into shared_intermediate_dir so they can be run by gyp rules that refer to PRODUCT_DIR.
We instead explicitly write all the rules we care about.
We may want to generate unique common name and verify it.
We may want to validate that they are consistent.
We must first write out each node within its file grouping before writing out any edges that may refer to those nodes.
We need to move any non-generated sources that are coming from the shared intermediate directory out of LOCAL_SRC_FILES and put them into LOCAL_GENERATED_SOURCES.
We never need to explicitly depend on previous target's link steps, because no compile ever depends on them.
We only want to shim targets that have msvs_large_pdb enabled.
We only want to warn on the latter case.
We only write the file if the contents have changed so that simply regenerating the project files doesn't cause a relink.
We remove "_gyp" from the names because it helps to diff them.
We run the tests in Nuclide/spec in a separate integration test step.
We run this check in two passes: first pass on elided lines to verify that lines contain missing whitespaces, second pass on raw lines to confirm that those missing whitespaces are not due to elided comments.
We set LOCAL_PATH just once, here, to the top of the project tree.
We set up a rule to build the first output, and then set up a rule for each additional output to depend on the first.
We should be able to handle pre-built project files by reading the GUID from the files.
We should never be asking for the build_dir if we've provided a VM path.
We still perform lint checks on these lines, but
We still tell link to generate a manifest, but we only use that to assert that our simpler process did not miss anything.
We store a reference to the TU in the instance so the TU won't get collected before the cursor.
We swallow that output with a pipe.
We translate between these two notions of paths with two helper functions:
We try to start accessibility server only if we don't have needed method active
We use codecs here because sometimes Python decides to use the ascii codec and chokes on utf-8 characters.
We use the name 'gyp_all_modules' as the Android build system doesn't allow the use of the Make target 'all' and because 'all_modules' is the equivalent of the Make target 'all' on Android.
We use these names to disambiguate LLDB commands from C-style expressions.
We used to check for high-bit characters, but after much discussion we decided those were OK, as long as they were in UTF-8 and didn't represent hard-coded international strings, which belong in a separate i18n file.
We want running the bad tests to still complete.
We want to create:
We want to fix up these paths
We want to know which chunks are placeholders.
We want to let any rules apply to files that are resources also.
We will check again that the class does actually exist anyway.
We will write three rules: - All outputs depend on an intermediate file.
We wrap each .mk include in an if statement so users can tell make to not load a file by setting NO_LOAD.
We write the file in the base_path directory.
We write to a dep file on the side first and then rename at the end so we can't end up with a broken dep file.
We'll detect these cases using the exit code, which should cause 'check_call' to raise.
We'll only move things we want into 'good'.
We'll say it should occur by line 10.
Weird output rules for PBXBuildFile.
Weird output rules for PBXFileReference.
Weird, but matches Xcode.
What it does, for "/usr/lib" libraries, is do "-L/usr/lib -lname" which is dependent on the library order and cause collision when building Chrome.
What matters here is that the key is in include_state.
When all dependencies have been built, the bundle needs to be packaged.
When all the actions are run together in one batch file in VS, the PATH will grow too long.
When assignment-expression isn't present, Op will be null.
When expanding a list into string context, turn the list items into a string in a way that will work with a subprocess call.
When reading from stdin, the extension is unknown, so no cpplint tests should rely on the extension.
When referencing an item in another project file, containerPortal is a PBXFileReference identifying the other project file.
When referencing an item in this project file, containerPortal is the PBXProject root object of this project file.
When snprintf is used, the second argument shouldn't be a literal.
When the connection is closed, put a StopIteration on the message queue to signal there's nothing left to wait for
When the iteration number is chosen, the measurement of execution time is actually performed.
When the need arises, the syntax should be extended to support no caching off a command's output so it is run every time.
When there are more args than the command has declared, assume the initial args form an expression and combine them into a single arg.
Where Python 3's `map` function returns an iterator.
Where the hhi files, socket, etc get extracted
While less than optimal in terms of build time, attach them to the first input for now.
Whitelist "lib" subdirectories.
Windows Structured Exception Handling's except statement.
Windows Structured Exception Handling's finally statement.
Windows Structured Exception Handling's try statement.
Windows only.
With a machine that has 2 quad-core Xeons, a build can quickly run out of processes based on scheduling/other tasks, and randomly failing builds are no good.
With an input declared but no outputs, the script step should run every time, as desired.
With inputPaths and outputPaths not supplied, make will always be called, but it knows enough to not do anything when everything is up-to-date.
Without specifying the port, it will find an open port and start the server.
Wraps cindex.CodeCompletionResult
Wraps cindex.CodeCompletionResults.
Write a short name to build this target.
Write a stamp line.
Write configuration-specific variables for CFLAGS, etc.
Write it out.
Write logs to file using file handler.
Write out a link step, if needed.
Write out actions, rules, and copies.
Write out all: target, including mkdir for each output directory.
Write out rules file.
Write out the compilation steps, if any.
Write out the file with variables replaced.
Write out the sorted list of includes.
Write phony targets for any empty targets that weren't written yet.
Write subninja file containing compile and link commands scoped to a single arch if a fat binary is being built.
Write the actual command.
Write the project file to a temporary location first.
Write workspace to file.
WriteNewNinjaRule uses unique_name for creating an rsp file on win.
Writing to a temporary file first also avoids the possible problem of Xcode rereading an incomplete project file.
Wrong length resets everything, too.
XCBuildPhase should not have "files" but another abstract subclass of it should provide this, and concrete build phase types that do have "files" lists should be derived from that new abstract subclass.
XCBuildPhase should only provide buildActionMask and runOnlyForDeploymentPostprocessing, and not files or the various file-related methods and attributes.
XSL: 'include "prepare.inc"' makes repo mode fail.
Xcode adds the product directory by default.
Xcode always outputs "isa" as the first element of an object dictionary.
Xcode handles most prefixes based on the target type, however there are exceptions.
Xcode has some "issues" with checking dependencies for the "Compile sources" step with any source files/headers generated by actions/rules.
Xcode is weird about remoteGlobalIDString.
Xcode properly detects a file being renamed over an open project file as a change and so it remains able to present the "project file changed" sheet under this system.
Xcode puts shared_library results into PRODUCT_DIR, and some gyp files rely on this.
Xcode seems to choose based on content.
Xcode seems to sort this list case-insensitively
Xcode sets remoteInfo to the name of the target and not the name of its product, despite this proxy being a reference to the product.
Xcode sets this for shared_libraries, and for nonbundled loadable_modules.
Xcode supports various suffices on environment variables, which are all undocumented.
Xcode uses variants for localization.
Xcode usually prints remoteGlobalIDString values in PBXContainerItemProxy objects without comments.
Xcode watches for changes to the project file and presents a UI sheet offering to reload the project when it does change.
Xcode will still handle this as an "absolute path" that starts with the variable.
Xcode's built-in rule support is almost powerful enough to use directly, but there are a few significant deficiencies that render them unusable.
Xcode's standard set of library directories, which don't need to be duplicated in LIBRARY_SEARCH_PATHS.
Yield until we get the second header's byte
You can't test beyond this because each developer's machines may have a different set of SDKs installed.
You should always have whitespace around binary operators.
You shouldn't have a space before a semicolon at the end of the line.
Zend's "run-tests" uses the cgi-fcgi sapi to run tests our implementation is simply different by design
_configs is the default list of configurations.
_quote is a pattern that should match any argument that needs to be quoted with double-quotes by EncodePOSIXShellArgument.
`SBError.success` denotes no error.
`obj` is not a view, make sure recursive bordering is not requested
`obj` is not a view, make sure recursive unbordering is not requested
`tar` complains about absolute paths, so use a relative path here.
`value.error` is an `SBError` instance which captures whether the result had an error.
`xcrun --find` prints to stderr when it fails to find the given tool.
a new process can crop up
absorb one trailing newline Substitutions
action, cd_action, and mkdirs get written to a toplevel variable called cmd_foo.
actions run on the host, so they should in theory only use host libraries, but until everything is made cross-compile safe, also use target libraries.
actions_depends is the dependencies this target depends on before running any of its action/rule/copy steps.
actually, there are a handful of instances where doing so is okay, but in general it's not.
add a trailing newline so that its easier to see the diff
add an output line after this line to fix bug
add an output line after this line to fix the bug
add output line after this line to fix bug
add_custom_command
add_custom_target
add_dependent_modules
aix and solaris just need flock emulation.
allow to manually reload while developing
already did old bucket
amalgamate.py creates an amalgamation from a unity build.
and can get confused if more then one test runs at a time.
and the Swift project authors Licensed under Apache License v2.0 with Runtime Library Exception
and try again
argparse can't handle an '--' argument, so we replace it with a custom identifier.
argparse is only capable of expressing mutual exclusivity among options, not among groups of options, so we detect this case manually.
argv will contain the path to the executable
at this stage, some_bytes have been unmasked so actually are held in a bytearray
atomic_impl representation since version 4.1 Update 2
backpointer for logging
base_non_configuration_keys is a list of key names that belong in the target itself and should not be propagated into its configurations.
base_path_sections is a list of sections defined by GYP that contain pathnames.
bash does not enable history by default in non-interactive shells, so this is not thought to be a problem.
blocks forever
broken on ubuntu 12.04
buildPhases is overridden in the schema to be able to set defaults.
build_dir: relative path from source root to our output files.
build_file is the file relative to which 'target' is defined.
cause of failure uninvestigated:
cc and cxx must be set to the correct architecture by overriding with one of cl_x86 or cl_x64 below.
cd into the directory before running, and adjust paths in the arguments to point to the proper locations.
check how the old one exited
check if we have exactly 1 parameter.
check-filelist-abc.py - Fake build to test driver-produced -filelists.
check_ouput is not available in Python 2.6.
combination of short runtimes and long runtimes, with heavier weight on short runtimes
command and cd_action get written to a toplevel variable called cmd_foo.
common case: else not followed by a multi-line if
compile_depends is the dependencies this target depends on before running any of its compile steps.
completions may still be None if there was a clang parsing error.
concurrency issues
config will be None for packages such as sample packages.
conscious decision not to match these
control frames between 3 and 7 as well as above 0xA are currently reserved
control frames cannot be fragmented
convert warnings and fatal from the user level error strings to system level error strings
cross-reference text.
ctypes doesn't implicitly convert c_void_p to the appropriate wrapper object.
dSYMs need to build before stripping happens.
db not specified
delayed import to break circular dependency
delete stack traces
dicts are never strong.
different indentation
do work in /tmp...
do_cmd: run a command via the above cmd_foo names, if necessary.
does not wait for process to launch.
don't replace single quotes in attrs
don't use the internet in tests...
duplicate of a test in test/slow
e.g. "out/Debug"
e.g. If A and B depend on C and C depends on D, sort them in A, B, C, D.
e.g. If the file name is 'foo_flymake.cc', we should search for 'foo.h' instead of 'foo_flymake.h'
e.reference contains the correctly formatted option
empty section
empty the skipif file so we can run all the tests again without skipping them
endif is non-standard.
endif is not allowed.
ensure all external dependencies are complete before internal dependencies extra_deps currently only depend on their own deps, so otherwise run early
exclude function body
extra random files needed for tests...
fails because timstamp's length is greater than value's
fake-ld.py - Fake Darwin linker to test driver-produced -filelists.
false_dict is merged into the_dict if cond_expr evaluates to false.
fetch the file name from the first line of the report.
first check private headers
fixme.py -- Adds HH_FIXME annotations in your code to clean up after a new check in the typechecker or after an upgrade.
flaky for various reasons
flaky on Travis: t4088096
flaky: t3619770
flaky: t3817758
flaky: t3851970
flat_list is the sorted list of dependencies - actually, the list items are the "ref" attributes of DependencyGraphNodes.
for gethostname
for instance, type errors cause hh_single_type_check to produce them
force each merge worker to gracefully exit
found a non-literal.
found public header
function end
function parameter list
gcc extensions.
generator_dir: relative path from pwd to where make puts build files.
generic parameter list
get commands for the CI job determinator
get rid of comments and strings
get rid of comments and strings Don't try to do spacing checks for operator methods
global count of reported errors filters to apply when emitting error messages
global setting.
gyp dictates that commands are run from the base directory.
gyp has mac_bundle_resources to copy things into a bundle's Resources folder, but there's no built-in way to copy files to other places in the bundle.
gyp-mac-tool is written next to the root Makefile by gyp.
gypd doesn't define a default value for OS like many other generator modules.
gypd supports multiple toolsets
hack to import SwiftBuildSupport and swift_build_support
hack, it's a dict
hack: retrieve underlying results pointer
hacky code to pass an additional option to the unparser we use the test input extension as a cue for what option we want to pass to the test_unparser
hashlib is supplied as of Python 2.5 as the replacement interface for md5 and other secure hashes.
hashlib is supplied as of Python 2.5 as the replacement interface for sha and other secure hashes.
hex has invalid boolean value
hh should should work with 0 retries.
hhvm_wrapper emits an extra line to let us know its compiling bytecode.
http://crbug.com/333738.
http://python3porting.com/differences.html
http://stackoverflow.com/questions/1189781/using-make-dir-or-notdir-on-a-path-with-spaces
http://www.cmake.org/pipermail/cmake/2010-July/038461.html
i.e either we compare files, or directories of depth 1.
i.e., the internet is attempted to be used and that is bad
ibtool sometimes crashes with relative paths.
if all dependencies are done, we can build it, otherwise we try to build the dependency.
if found in the first line, adjust the end column to account for the extra text
if not a blank line...
if there's no control flow construct, look at whole line
if we don't have any accessibility string - we should have some children
if we get here without errors, delete the tree
ifndef header guard is present.
in_degree_zeros is the list of DependencyGraphNodes that have no dependencies not in flat_list.
include "hphp/zend/html-table.h"
include directives.
include line for all source
include lines are NOT removed from elided line, to make
include lines in CheckLanguage must be put here.
include lines.
include_state is modified during iteration, so we iterate over a copy of the keys.
included file.
included_file is relative to the current directory, but it needs to be made relative to build_file_path's directory.
index now identifies the next item to examine.
indirect access can only be prevented by regular php code, we cannot detect it and throw errors.
interface types can't be recognized by their name, instead we check if they have the expected fields.
just grab the summary, valgrind doesn't clearly distinguish errors from other log messages.
just the last line
key should be one of all_dependent_settings, direct_dependent_settings, or link_settings.
key_suffixes is a list of key suffixes that might appear on key names.
kill the parent process we forked from.
known issue: dtype_name decoded from runtime.rtype is "nested.Foo" but the dwarf table lists it as "full/path/to/nested.Foo"
launch flags
let subclasses override update without breaking __init__
libclang's completions API seamlessly takes care of unsaved content without any special handling.
libtool on OS X generates warnings for duplicate basenames in the same target.
line is a bytes string literal in Python 3.
line number is inconsistent on stack overflow
line number of the token in the whole text
line number where we started tokenizing
literals and symbols get batched together
lldb.eTypeClassReference,
lldb.frame is supposed to contain the right frame, but it doesnt :/ so do the dance
loadable_modules have a 'Contents' folder like executables.
loadable_modules not in a mac_bundle are mapped to com.googlecode.gyp.xcode.bundle, a pseudo-type that xcode.py interprets to create a single-file mh_bundle.
lockf seems to be FreeBSD specific.
look inside the parens for function calls
looks like identify-function doesn't support JSON - but still be careful changing this, since tools may just call everything with --json flag and it would be a breaking change
mac and win use more complicated support scripts.
main.swift imports
main.swift run functions
make a backup in case something goes wrong and we pass dirty
make looks for ways to re-generate included makefiles, but in our case, we don't have a direct way.
make sure 'i' is set if when 'ba' is empty
make will build the first target in the makefile by default.
map of all files that we cannot convert at the moment
map/filter on lambda could be replaced by comprehension.
max_keys is not applicable for put
means no copyright line was found
missing undefined variable notice
modify-non-primary-files.py simulates a build where the user is modifying the source files during compilation.
msbuild does not accept an empty folder_name.
msbuild_use_call provides a way to disable this but I have not seen any adverse effect from doing that for everything.
mt.exe sometimes removes whitespace, and sometimes doesn't unfortunately.
must be brace after if
must be killed on another thread, or else deadlock
netloc is empty.
next line is where we'd have expect a configuration key somehow
ninja handles parallelism by itself, don't have the compiler do it too.
non matching files
non-existing column family.
non-space, non-identifier: begins an operator name
nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
normal run with FIFO compaction mode ops_per_thread is divided by 5 because FIFO compaction style is quite a bit slower on reads with lot of files
normal run with universal compaction mode
not implemented extensions
not in quotes Allow one space for new scopes, two spaces otherwise:
now that all workers have completed, merge all their files
now try public headers
o API support for invalid translation units.
o At this point everything is ready, and the harness simply reports the results.
o When all files are compiled, the harness begins to run the tests.
o When all files are processed, the harness begins to compile them, keeping track of all compile fails for later results reporting.
o expose code completion APIs.
o implement additional SourceLocation, SourceRange, and File methods.
offset between Unix and LLVM epochs
old bucket not evacuated yet
on invalid files.
openssl config file.
operator definition up to the open brace
ordinary_targets are ordinary targets that are already in the project file.
original file
otherwise we matched some non-generic operator Find clusters of protocols that have the same name when underscores are stripped map from potential cluster name to nodes in the cluster
our build machines have no members in group 0...
output_dir: relative path from generator_dir to the build directory.
path is not a file in the project tree in this case, but calling normpath is still important for trimming trailing slashes.
path just provides a new variant that belongs to the group.
path_tree_to_subfolder maps names of Xcode variables to the associated dstSubfolderSpec property value used in a PBXCopyFilesBuildPhase object.
php coderz are so l33t
pkgutil output looks like package-id: com.apple.pkg.CLTools_Executables version: 5.0.1.0.1.1382131676 volume: / location: / install-time: 1382544035 groups: com.apple.FindSystemFiles.pkg-group com.apple.DevToolsBoth.pkg-group com.apple.DevToolsNonRelocatableShared.pkg-group
platform_name
plists can contain envvars and substitute them into the file.
preserves member order iteration in the resulting objects Member order is used by package linting However, this is Python 2.7 only, so we conditionally enable it
punctuations match.
python3 / newer versions of gdb
re objects used by EncodePOSIXShellArgument.
read source, stripping all comments
refinements
regex pattern for matching common name.
register the client once the handshake is done
remove trailing newlines, and trailing spaces on each line
replace object ids in var_dumps with the string ID
response must have a key named "error" if there was a failure of any kind.
rest of operator name
root config.ini file goes in directory level above the tests themselves
rules run on the host, so they should in theory only use host libraries, but until everything is made cross-compile safe, also use target libraries.
run as follows to view the Nth-largest connected component in a web browser:
run with kill_random_test, with three modes.
run_test_targets are the targets that run unittests and should be used for the Run All Tests target.
same file first line
same file last line
same file name
same file, in between lines
see comment for identify-function
see if we need to inject a line marker
segfaults also print on stderr
segfaults on contbuild in opt
segment_idx
self._section will move monotonically through this set.
send stderr to /dev/null to ignore messages when linking directories.
sentinel node
sentinel node for doubly linked list
short name of targets that were skipped because they didn't contain anything interesting.
should have been checked for in SetFilter.
since we will be killing anyway, use large value for ops_per_thread
size is itself an uintptr
skip 'struct '
skip irrelevant protocols
some comment
special options for all files in this dir
spews files until they work
start_pattern not found in text.
stderr_path
stdout_path
str is treated as UTF-8-encoded.
strip trailing spaces
stylistic only - omitting the "./" works
substitute local variables into the string
support_targets are the action/rule targets used by GYP file targets, just kept for the assert check.
swift_build_support/toolchain.py - Detect host machine's versioned executables
target is the qualified target.
target_outputs is a map from qualified target name to a Target object.
target_short_names is a map from target short name to a list of Target objects.
target_triple
targets is full list of targets in the project.
targets_for_all is the list of ordinary_targets that should be listed in this project's "All" target.
tempfile.mkstemp uses an overly restrictive mode, resulting in a file that can only be read by the owner, regardless of the umask.
test_toolchain.py - Unit tests for swift_build_support.toolchain
tests are really inconsistent about whitespace
tgt_mac_bundle_resources holds the list of bundle resources so the rule processing can check against it.
the argnum count must be bigger then 2, index 0 for self, index 1 for SEL
the first match has to be in a try incase there is bad unicode
the gcov report follows certain pattern.
the number of processors
the_dict_key is the name of the key that accesses the_dict in the_dict's parent dict.
these all write to temp3.txt.gz
these hang forever
these tests use each other's data
this allows one level of nesting.
this should start a new server
this sometimes happens and retrying helps
time for one db_stress instance to run
time to stabilize after a kill
time to stabilize before the next run we need to clean up after ourselves -- only do this on test success
timing dependent
to resolve to and empty list if undefined.
too large input
toolset is the default toolset for that target.
total / 4GB
total / 5GB
total time for this script to test db_stress
trailing comment
trouble looking up, print something reasonable
try to do relative paths
use '.' in case relative_path is empty.
use current db
use large ops per thread since we will kill it anyway
using Apple private API to get real value of accessibility string for element.
utils/build-script takes arguments for its argument parser, as well as arguments that are meant to be passed directly to utils/build-script-impl.
utils/profdata_merge/main.py
variable expansion may lead to //.
wait for Hack to catch up with file system changes
wait for logs to be written
we create the state in a different dir from the one we run our tests on, to verify that the saved state does not depend on any absolute paths
we don't care about nonzero exit codes...
we expect negative retncode if kill option was given
we expect zero retncode if no kill option
we need to clean up after ourselves -- only do this on test success
we shouldn't include a file more than once.
we skip basic code as they are added explicitly
we want to upstream this to atom, so do not require nuclide- prefix
we're only interested if we can find a function parameter of that type
within class or namespace
won't work.
working directory
works in interp but fails in JIT
x and y are PBXReferenceProxy objects.
xcode passes mdynamic-no-pic by default for executable and possibly static lib according to mento
xcodebuild requires Xcode and can't run on Command Line Tools-only systems from 10.7 onward.
xml1 table essentially doesn't contain anything except basic symbols which are added separately
yield until we get the first header's byte
