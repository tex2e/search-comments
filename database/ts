"clean up error" occurs at this point
"export default function().." looks just like a regular function/class declaration, except with the 'default' flag
"hack"      in position 4 means HACK did match.
'a' should be of type 'number'
'actualText' is the text that the user has entered for the identifier.
'await' here is an identifier, and not a yield expression.
'await' here is an identifier, and not an await expression.
'bar' should be resolvable
'const' is only a modifier if followed by 'enum'.
'foo' cannot be called in an unqualified manner.
'i' is for case insensitivity (We do this to match C# TODO comment code).
'in' does not have this effect.
'index' tracks the index of the most recent error that was checked.
'isClassMemberStart' should have hinted not to attempt parsing.
'isReference' indicates whether the file was brought in via a reference directive (rather than an import declaration)
'm' is so we can find matches in a multi-line input.
'merge' the lines of each input file with any errors associated with it
'n' doesn't exist on type 'void'.
'p' should have type 'string'.
'private' should not be considered a member variable here.
'return' is an instance member
's' should be 'string', so this should be an error
'this' as a computed enum value
'this' in module variable
'this' in optional super call
'this' in required super call
'this' should be not type to 'Foo' either
'this' should be type 'Foo' as well
'this' should not be available in a static initializer.
'toolsVersion' gets consumed by the managed side, so it's not unused.
'types' references has changed
'y' should be a fundule here
'y' should be of type 'string'
'yield' here is an identifier, and not a yield expression.
(2) when the aliased symbol is originating from a named import.
(4), (5) are parsed as PrefixUnaryExpression
(Backward skipping is not supported.)
(Pattern: fogbar, Candidate: quuxfogbarFogBar).
(TS Exceptions: namespaces, function overloads, enums, and interfaces)
(c) Copyright - Important
(function/method) symbol(..signature)
(i.e. they're both BinaryExpressions with an assignment operator in it).
+ 3 for leading /**, - 5 in total for /**
- "(x,y)" is a comma expression parsed as a signature with two parameters.
- 'previousToken' is defined.
- Could not select overload for 'call' expression.
- M is an optional property and S' contains no property of the same name as M.
- Otherwise, if IndexExpr is of type Any, the String or Number primitive type, or an enum type, the property access is of type Any.
- There exists a module declaration which actually impacts the value side.
- Use 'getApparentTypeOfContextualType' when you're going to need the members of the type.
- Use 'getContextualType' when you are simply going to propagate the result to the expression.
- baseUrl - this setting controls how non-relative module names are resolved.
- false:     the argument at 'i' *was* and *has been* permanently contextually typed.
- import equals declarations that import external modules are not emitted
- is the only character supported in JSX attribute names that isn't valid in JavaScript identifiers
- parameter is wrapped in function-like entity
- skip string literal and comma
- undefined: the argument at 'i' is *not* susceptible to permanent contextual typing.
--lib es5,es2015.symbol.wellknown --target es5 0.ts
--lib es5,es2015.symbol.wellknown 0.ts
--lib es5,invalidOption 0.ts
--module commonjs --target es5 --lib es5 0.ts --library es2015.array,es2015.symbol.wellknown
--module commonjs --target es5 0.ts --lib es5,es2015.symbol.wellknown
-1 is lower than all other precedences.
.d.ts emit: should be 'extends outer.Beta'
.d.ts file, add to declFiles emit
.js code for the compiler, what we are actuallty testing
.js file, add to files
.ts file (index into sources array) associated with this span
.ts sources for the compiler, used as a test input
.tsx and .jsx files are treated as jsx language variant.
/ Simple function to Walk an AST using a simple callback function.
/ The declarations of A.B.C.x do not get merged, so the 4 vars are independent.
/ The two 'A' modules, however, do get merged, so in reality we have 7 modules.
// produces an internal error - please implement in derived class
0.31 seconds in check
0.ts --moduleResolution
1) The preamble to the message portion.
1a is an invalid identifier
2 : Error Duplicate signature
2 errors, foo is abstract
2 parameter generic call with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
2 parameter generic call with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
2 parameter generic tag with argument 1 of type parameter type and argument 2 of function type whose parameter is of type parameter type
2 parameter generic tag with argument 2 of type parameter type and argument 1 of function type whose parameter is of type parameter type
2) A token was expected, but was not present.
2) For each word try to match the word against the candidate value.
2) The 'members' table of the current container's symbol.
2) The message portion.
2x(class + field + constructor)
2x: error: could not find symbol V
3) A token was present that no parsing function was able to consume.
3) The 'locals' table of the current container.
4 (module block) + 4 (function block) + 4 (call expression)
4 functions + global.
8 contextually typed common, and 2 in definition (A.common, B.common)
8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration
@FileName: duplicateIdentifierShouldNotShortCircuitBaseTypeBinding_0.ts
@Filename is the only directive that can be used in a test that contains tsconfig.json file.
@Filename: A:/foo/bar.ts
@Filename: A:/foo/baz.ts
@Filename: B:/foo/baz.ts
@Filename: Drawing.ts
@Filename: Math/Adder.ts
@Filename: Math/Math.ts
@Filename: a:/foo/baz.ts
@Filename: aliasAssignments_1.ts
@Filename: aliasAssignments_moduleA.ts
@Filename: aliasOnMergedModuleInterface_0.ts
@Filename: aliasUsage1_main.ts
@Filename: aliasUsage1_moduleA.ts
@Filename: aliasUsageInArray_backbone.ts
@Filename: aliasUsageInArray_main.ts
@Filename: aliasUsageInArray_moduleA.ts
@Filename: aliasUsageInFunctionExpression_backbone.ts
@Filename: aliasUsageInFunctionExpression_main.ts
@Filename: aliasUsageInFunctionExpression_moduleA.ts
@Filename: aliasUsageInGenericFunction_backbone.ts
@Filename: aliasUsageInGenericFunction_main.ts
@Filename: aliasUsageInGenericFunction_moduleA.ts
@Filename: aliasUsageInIndexerOfClass_backbone.ts
@Filename: aliasUsageInIndexerOfClass_main.ts
@Filename: aliasUsageInIndexerOfClass_moduleA.ts
@Filename: aliasUsageInObjectLiteral_backbone.ts
@Filename: aliasUsageInObjectLiteral_main.ts
@Filename: aliasUsageInObjectLiteral_moduleA.ts
@Filename: aliasUsageInOrExpression_backbone.ts
@Filename: aliasUsageInOrExpression_main.ts
@Filename: aliasUsageInOrExpression_moduleA.ts
@Filename: aliasUsageInTypeArgumentOfExtendsClause_backbone.ts
@Filename: aliasUsageInTypeArgumentOfExtendsClause_main.ts
@Filename: aliasUsageInTypeArgumentOfExtendsClause_moduleA.ts
@Filename: aliasUsageInVarAssignment_backbone.ts
@Filename: aliasUsageInVarAssignment_main.ts
@Filename: aliasUsageInVarAssignment_moduleA.ts
@Filename: aliasUsedAsNameValue_0.ts
@Filename: aliasUsedAsNameValue_1.ts
@Filename: aliasWithInterfaceExportAssignmentUsedInVarInitializer_0.ts
@Filename: aliasWithInterfaceExportAssignmentUsedInVarInitializer_1.ts
@Filename: ambientClassDeclarationExtends_file1.ts
@Filename: ambientClassDeclarationExtends_file2.ts
@Filename: ambientExternalModuleWithInternalImportDeclaration_0.ts
@Filename: ambientExternalModuleWithoutInternalImportDeclaration_0.ts
@Filename: arrayOfExportedClass_0.ts
@Filename: chainedImportAlias_file0.ts
@Filename: chainedImportAlias_file1.ts
@Filename: classExtendsItselfIndirectly_file3.ts
@Filename: classExtendsItselfIndirectly_file4.ts
@Filename: classExtendsItselfIndirectly_file6.ts
@Filename: classMemberInitializerWithLamdaScoping2_1.ts
@Filename: classMemberInitializerWithLamdaScoping3_1.ts
@Filename: classPoint.ts
@Filename: cloduleSplitAcrossFiles_module.ts
@Filename: collisionExportsRequireAndAlias_file1.ts
@Filename: collisionExportsRequireAndAlias_file2.ts
@Filename: collisionExportsRequireAndAlias_file3333.ts
@Filename: commentsExternalModules_1.ts
@Filename: commentsMultiModuleMultiFile_1.ts
@Filename: consumer.ts
@Filename: declFile.d.ts
@Filename: declFileAccessors_1.ts
@Filename: declFileAliasUseBeforeDeclaration_test.ts
@Filename: declFileCallSignatures_1.ts
@Filename: declFileConstructSignatures_1.ts
@Filename: declFileConstructors_1.ts
@Filename: declFileExportAssignmentOfGenericInterface_1.ts
@Filename: declFileExportImportChain2_b.ts
@Filename: declFileExportImportChain2_c.ts
@Filename: declFileExportImportChain2_d.ts
@Filename: declFileExportImportChain_b.ts
@Filename: declFileExportImportChain_b1.ts
@Filename: declFileExportImportChain_c.ts
@Filename: declFileExportImportChain_d.ts
@Filename: declFileFunctions_1.ts
@Filename: declFileImportModuleWithExportAssignment_1.ts
@Filename: declFileIndexSignatures_1.ts
@Filename: declFileMethods_1.ts
@Filename: declarationEmit_nameConflicts_0.ts
@Filename: decoratorOnImportEquals2_0.ts
@Filename: decoratorOnImportEquals2_1.ts
@Filename: duplicateVarsAcrossFileBoundaries_1.ts
@Filename: duplicateVarsAcrossFileBoundaries_2.ts
@Filename: duplicateVarsAcrossFileBoundaries_3.ts
@Filename: duplicateVarsAcrossFileBoundaries_4.ts
@Filename: duplicateVarsAcrossFileBoundaries_5.ts
@Filename: elidingImportNames_main.ts
@Filename: elidingImportNames_main1.ts
@Filename: elidingImportNames_test.ts
@Filename: enumFromExternalModule_0.ts
@Filename: errorsOnImportedSymbol_1.ts
@Filename: es3defaultAliasQuoted_file1.ts
@Filename: expArray.ts
@Filename: expBoolean.ts
@Filename: expGeneric.ts
@Filename: expNumber.ts
@Filename: expObject.ts
@Filename: exportAssignClassAndModule_0.ts
@Filename: exportAssignedTypeAsTypeAnnotation_0.ts
@Filename: exportAssignmentClass_A.ts
@Filename: exportAssignmentClass_B.ts
@Filename: exportAssignmentEnum_A.ts
@Filename: exportAssignmentEnum_B.ts
@Filename: exportAssignmentFunction_A.ts
@Filename: exportAssignmentFunction_B.ts
@Filename: exportAssignmentInterface_A.ts
@Filename: exportAssignmentInterface_B.ts
@Filename: exportAssignmentInternalModule_A.ts
@Filename: exportAssignmentInternalModule_B.ts
@Filename: exportAssignmentOfDeclaredExternalModule_0.ts
@Filename: exportAssignmentOfGenericType1_0.ts
@Filename: exportAssignmentVariable_A.ts
@Filename: exportAssignmentVariable_B.ts
@Filename: exportEqualCallable_0.ts
@Filename: exportEqualErrorType_0.ts
@Filename: exportEqualMemberMissing_0.ts
@Filename: exportEqualsModule_A.ts
@Filename: exportImportMultipleFiles_library.ts
@Filename: exportImportMultipleFiles_math.ts
@Filename: exportSpecifierReferencingOuterDeclaration2_A.ts
@Filename: exportSpecifierReferencingOuterDeclaration2_B.ts
@Filename: exporter.ts
@Filename: extendingClassFromAliasAndUsageInIndexer_backbone.ts
@Filename: extendingClassFromAliasAndUsageInIndexer_main.ts
@Filename: extendingClassFromAliasAndUsageInIndexer_moduleA.ts
@Filename: extendingClassFromAliasAndUsageInIndexer_moduleB.ts
@Filename: externalModuleAssignToVar_core_require.ts
@Filename: externalModuleAssignToVar_core_require2.ts
@Filename: externalModuleAssignToVar_ext.ts
@Filename: externalModuleExportingGenericClass_file0.ts
@Filename: externalModuleExportingGenericClass_file1.ts
@Filename: externalModuleReferenceOfImportDeclarationWithExportModifier_0.ts
@Filename: externalModuleReferenceOfImportDeclarationWithExportModifier_1.ts
@Filename: externalModuleRefernceResolutionOrderInImportDeclaration_file1.ts
@Filename: externalModuleRefernceResolutionOrderInImportDeclaration_file2.ts
@Filename: foo_0.d.ts
@Filename: funduleSplitAcrossFiles_module.ts
@Filename: funduleUsedAcrossFileBoundary_file2.ts
@Filename: importAliasAnExternalModuleInsideAnInternalModule_file1.ts
@Filename: importAsBaseClass_0.ts
@Filename: importAsBaseClass_1.ts
@Filename: importDecl_require1.ts
@Filename: importDecl_require2.ts
@Filename: importDecl_require3.ts
@Filename: importDecl_require4.ts
@Filename: importInsideModule_file1.ts
@Filename: importInsideModule_file2.ts
@Filename: importUsedInExtendsList1_require.ts
@Filename: instanceOfInExternalModules_require.ts
@Filename: jquery.d.ts
@Filename: localAliasExportAssignment_0.ts
@Filename: memberAccessMustUseModuleInstances_0.ts
@Filename: moduleAliasAsFunctionArgument_0.ts
@Filename: moduleImportedForTypeArgumentPosition_0.ts
@Filename: moduleImportedForTypeArgumentPosition_1.ts
@Filename: moduleInTypePosition1_0.ts
@Filename: overloadBindingAcrossDeclarationBoundaries_file1.ts
@Filename: privacyAccessorDeclFile_GlobalFile.ts
@Filename: privacyCannotNameAccessorDeclFile_Widgets.ts
@Filename: privacyCannotNameVarTypeDeclFile_Widgets.ts
@Filename: privacyCheckExternalModuleExportAssignmentOfGenericClass_1.ts
@Filename: privacyClassExtendsClauseDeclFile_GlobalFile.ts
@Filename: privacyClassImplementsClauseDeclFile_GlobalFile.ts
@Filename: privacyFunctionCannotNameParameterTypeDeclFile_Widgets.ts
@Filename: privacyFunctionParameterDeclFile_GlobalFile.ts
@Filename: privacyFunctionReturnTypeDeclFile_GlobalFile.ts
@Filename: privacyFunctionReturnTypeDeclFile_Widgets.ts
@Filename: privacyInterfaceExtendsClauseDeclFile_GlobalFile.ts
@Filename: privacyTopLevelAmbientExternalModuleImportWithExport_require1.ts
@Filename: privacyTopLevelAmbientExternalModuleImportWithExport_require3.ts
@Filename: privacyTopLevelAmbientExternalModuleImportWithoutExport_require1.ts
@Filename: privacyTopLevelAmbientExternalModuleImportWithoutExport_require3.ts
@Filename: privacyVarDeclFile_GlobalFile.ts
@Filename: propertyIdentityWithPrivacyMismatch_0.ts
@Filename: protoAsIndexInIndexExpression_0.ts
@Filename: recursiveExportAssignmentAndFindAliasedType1_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType1_moduleDef.d.ts
@Filename: recursiveExportAssignmentAndFindAliasedType2_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType2_moduleDef.d.ts
@Filename: recursiveExportAssignmentAndFindAliasedType3_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType3_moduleDef.d.ts
@Filename: recursiveExportAssignmentAndFindAliasedType4_moduleA.ts
@Filename: recursiveExportAssignmentAndFindAliasedType4_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType4_moduleC.ts
@Filename: recursiveExportAssignmentAndFindAliasedType5_moduleA.ts
@Filename: recursiveExportAssignmentAndFindAliasedType5_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType5_moduleC.ts
@Filename: recursiveExportAssignmentAndFindAliasedType5_moduleD.ts
@Filename: recursiveExportAssignmentAndFindAliasedType6_moduleA.ts
@Filename: recursiveExportAssignmentAndFindAliasedType6_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType6_moduleC.ts
@Filename: recursiveExportAssignmentAndFindAliasedType6_moduleD.ts
@Filename: recursiveExportAssignmentAndFindAliasedType6_moduleE.ts
@Filename: recursiveExportAssignmentAndFindAliasedType7_moduleA.ts
@Filename: recursiveExportAssignmentAndFindAliasedType7_moduleB.ts
@Filename: recursiveExportAssignmentAndFindAliasedType7_moduleC.ts
@Filename: recursiveExportAssignmentAndFindAliasedType7_moduleD.ts
@Filename: recursiveExportAssignmentAndFindAliasedType7_moduleE.ts
@Filename: ref/d.d.ts
@Filename: requireEmitSemicolon_0.ts
@Filename: requireOfAnEmptyFile1_b.ts
@Filename: reuseInnerModuleMember_0.ts
@Filename: staticInstanceResolution3_0.ts
@Filename: staticInstanceResolution5_0.ts
@Filename: staticInstanceResolution5_1.ts
@Filename: test/file1.ts
@Filename: test/foo.d.ts
@Filename: test/foo_0.ts
@Filename: test/foo_2.ts
@Filename: test/foo_3.ts
@Filename: test/other.d.ts
@Filename: test/sub/relMod.d.ts
@Filename: test/test/foo_1.ts
@Filename: testFiles/app2.ts
@Filename: typeofAmbientExternalModules_0.ts
@Filename: typeofAmbientExternalModules_1.ts
@Filename: typeofExternalModules_core.ts
@Filename: typeofExternalModules_exportAssign.ts
@Filename: typeofExternalModules_external.ts
@Filename: undecorated.ts
@Filename: unusedImportDeclaration_testerA.ts
@Filename: visibilityOfCrossModuleTypeUsage_fs.ts
@Filename: visibilityOfCrossModuleTypeUsage_server.ts
@Filename: voidAsNonAmbiguousReturnType_0.ts
@Filename: vs/foo_0.ts
@Filename: vs/foo_0/index.ts
@Filename: vs/fum.d.ts
@Filename:privacyCannotNameAccessorDeclFile_consumer.ts
@Filename:privacyCannotNameVarTypeDeclFile_consumer.ts
@Filename:privacyFunctionCannotNameParameterTypeDeclFile_consumer.ts
@Filename:privacyFunctionReturnTypeDeclFile_consumer.ts
@allowUnreachableCode: true
@author Norbert Lindenberg
@deprecated Use getEncodedSemanticClassifications instead.
@deprecated Use getEncodedSyntacticClassifications instead.
@deprecated Use getLexicalClassifications instead.
@description Helper handler method for tagged string templates
@description Helper methods for TypedArrays
@exception if the property has an invalid value.
@exception if the property is missing or has an invalid value.
@exception if the property is present and has an invalid value.
@exception if the test fails.
@experimentaldecorators: true
@filename: /a/b/consumer.ts
@filename: /a/node_modules/jquery/dist/jquery.d.ts
@filename: /a/node_modules/jquery/jquery.d.ts
@filename: /a/types/jquery/index.d.ts
@filename: /node_modules/bar/node_modules/alpha/index.d.ts
@filename: /node_modules/foo/node_modules/alpha/index.d.ts
@filename: /src/app.ts
@filename: /src/library-b/index.ts
@filename: /tsconfig.json
@filename: /types/jquery/jquery.d.ts
@filename: /types/lib/index.d.ts
@filename: ambientExternalModuleMerging_declare.ts
@filename: c:/app/main.ts
@filename: c:/file4.ts
@filename: c:/module3.d.ts
@filename: c:/node_modules/file4.ts
@filename: c:/node_modules/file4/index.d.ts
@filename: c:/node_modules/module3.d.ts
@filename: c:/root/f1.ts
@filename: c:/root/folder1/file1.ts
@filename: c:/root/folder2/file1.ts
@filename: c:/root/folder2/file2.ts
@filename: c:/root/folder2/file3.ts
@filename: c:/root/generated/folder3/file2.ts
@filename: c:/root/generated/src/project/file2.ts
@filename: c:/root/generated/src/project/file3.ts
@filename: c:/root/generated/src/templates/module2.ts
@filename: c:/root/shared/components/file3.ts
@filename: c:/root/shared/components/file3/index.d.ts
@filename: c:/root/src/file1.ts
@filename: c:/root/src/file2.d.ts
@filename: c:/root/src/file2/index.d.ts
@filename: c:/root/src/file3.d.ts
@filename: c:/root/src/file3/index.d.ts
@filename: c:/shared/module1.d.ts
@filename: c:/shared/module1/index.d.ts
@filename: class.d.ts
@filename: classPoint.ts
@filename: collisionExportsRequireAndAmbientClass_externalmodule.ts
@filename: collisionExportsRequireAndAmbientClass_globalFile.ts
@filename: collisionExportsRequireAndAmbientEnum_externalmodule.ts
@filename: collisionExportsRequireAndAmbientEnum_globalFile.ts
@filename: collisionExportsRequireAndAmbientModule_externalmodule.ts
@filename: collisionExportsRequireAndAmbientModule_globalFile.ts
@filename: collisionExportsRequireAndAmbientVar_externalmodule.ts
@filename: collisionExportsRequireAndAmbientVar_globalFile.ts
@filename: collisionExportsRequireAndClass_externalmodule.ts
@filename: collisionExportsRequireAndClass_globalFile.ts
@filename: collisionExportsRequireAndEnum_externalmodule.ts
@filename: collisionExportsRequireAndEnum_globalFile.ts
@filename: collisionExportsRequireAndModule_externalmodule.ts
@filename: collisionExportsRequireAndModule_globalFile.ts
@filename: collisionExportsRequireAndVar_externalmodule.ts
@filename: collisionExportsRequireAndVar_globalFile.ts
@filename: component.ts
@filename: consumer.ts
@filename: es6ImportDefaultBindingAmd_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamedImport1InEs5_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamedImport1_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamedImportInEs5_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamedImport_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamespaceBindingInEs5_1.ts
@filename: es6ImportDefaultBindingFollowedWithNamespaceBinding_1.ts
@filename: es6ImportDefaultBindingInEs5_1.ts
@filename: es6ImportDefaultBindingMergeErrors_1.ts
@filename: es6ImportDefaultBindingNoDefaultProperty_0.ts
@filename: es6ImportDefaultBindingNoDefaultProperty_1.ts
@filename: es6ImportDefaultBinding_1.ts
@filename: es6ImportNameSpaceImportAmd_1.ts
@filename: es6ImportNameSpaceImportInEs5_1.ts
@filename: es6ImportNameSpaceImportMergeErrors_1.ts
@filename: es6ImportNameSpaceImportNoNamedExports_1.ts
@filename: es6ImportNameSpaceImport_1.ts
@filename: es6ImportNamedImportAmd_1.ts
@filename: es6ImportNamedImportInEs5_1.ts
@filename: es6ImportNamedImportInExportAssignment_1.ts
@filename: es6ImportNamedImportInIndirectExportAssignment_1.ts
@filename: es6ImportNamedImportMergeErrors_0.ts
@filename: es6ImportNamedImportMergeErrors_1.ts
@filename: es6ImportNamedImportNoExportMember_0.ts
@filename: es6ImportNamedImportNoNamedExports_1.ts
@filename: es6ImportNamedImportParsingError_0.ts
@filename: es6ImportNamedImportParsingError_1.ts
@filename: es6ImportNamedImport_1.ts
@filename: es6ImportWithoutFromClauseAmd_1.ts
@filename: es6ImportWithoutFromClauseAmd_2.ts
@filename: es6ImportWithoutFromClauseInEs5_1.ts
@filename: es6ImportWithoutFromClauseNonInstantiatedModule_1.ts
@filename: es6ImportWithoutFromClause_1.ts
@filename: exportStarFromEmptyModule_module4.ts
@filename: express.d.ts
@filename: external.d.ts
@filename: file1.d.ts
@filename: foo-ext.d.ts
@filename: function.d.ts
@filename: function.ts
@filename: math2d-augment.d.ts
@filename: modules.d.ts
@filename: mymodule.ts
@filename: node_modules/b.ts
@filename: node_modules/c.js
@filename: observable.d.ts
@filename: observable.ts
@filename: root/src/folder1/file1.ts
@filename: server.d.ts
@filename: service.ts
@filename: somefolder/a.ts
@inlineSourceMap: true
@inlinesourcemap: true
@isolatedModules: true
@kind (TypePredicateKind.Identifier)
@kind (TypePredicateKind.This)
@kind(SyntaxKind.ArrayBindingPattern)
@kind(SyntaxKind.ArrayLiteralExpression)
@kind(SyntaxKind.ArrayType)
@kind(SyntaxKind.ArrowFunction)
@kind(SyntaxKind.AsExpression)
@kind(SyntaxKind.AwaitExpression)
@kind(SyntaxKind.BindingElement)
@kind(SyntaxKind.Block)
@kind(SyntaxKind.BreakStatement)
@kind(SyntaxKind.CallExpression)
@kind(SyntaxKind.CallSignature)
@kind(SyntaxKind.CaseBlock)
@kind(SyntaxKind.CaseClause)
@kind(SyntaxKind.CatchClause)
@kind(SyntaxKind.ClassDeclaration)
@kind(SyntaxKind.ClassExpression)
@kind(SyntaxKind.ComputedPropertyName)
@kind(SyntaxKind.ConditionalExpression)
@kind(SyntaxKind.ConstructSignature)
@kind(SyntaxKind.Constructor)
@kind(SyntaxKind.ConstructorType)
@kind(SyntaxKind.ContinueStatement)
@kind(SyntaxKind.DebuggerStatement)
@kind(SyntaxKind.Decorator)
@kind(SyntaxKind.DefaultClause)
@kind(SyntaxKind.DeleteExpression)
@kind(SyntaxKind.DoStatement)
@kind(SyntaxKind.ElementAccessExpression)
@kind(SyntaxKind.EmptyStatement)
@kind(SyntaxKind.EnumDeclaration)
@kind(SyntaxKind.EnumMember)
@kind(SyntaxKind.ExportAssignment)
@kind(SyntaxKind.ExportDeclaration)
@kind(SyntaxKind.ExportSpecifier)
@kind(SyntaxKind.ExpressionStatement)
@kind(SyntaxKind.ExpressionWithTypeArguments)
@kind(SyntaxKind.ExternalModuleReference)
@kind(SyntaxKind.ForInStatement)
@kind(SyntaxKind.ForOfStatement)
@kind(SyntaxKind.ForStatement)
@kind(SyntaxKind.FunctionDeclaration)
@kind(SyntaxKind.FunctionExpression)
@kind(SyntaxKind.FunctionType)
@kind(SyntaxKind.GetAccessor)
@kind(SyntaxKind.GlobalModuleImport)
@kind(SyntaxKind.HeritageClause)
@kind(SyntaxKind.Identifier)
@kind(SyntaxKind.IfStatement)
@kind(SyntaxKind.ImportDeclaration)
@kind(SyntaxKind.ImportEqualsDeclaration)
@kind(SyntaxKind.ImportSpecifier)
@kind(SyntaxKind.IndexSignature)
@kind(SyntaxKind.InterfaceDeclaration)
@kind(SyntaxKind.IntersectionType)
@kind(SyntaxKind.JSDocAllType)
@kind(SyntaxKind.JSDocArrayType)
@kind(SyntaxKind.JSDocComment)
@kind(SyntaxKind.JSDocConstructorType)
@kind(SyntaxKind.JSDocFunctionType)
@kind(SyntaxKind.JSDocNonNullableType)
@kind(SyntaxKind.JSDocNullableType)
@kind(SyntaxKind.JSDocOptionalType)
@kind(SyntaxKind.JSDocParameterTag)
@kind(SyntaxKind.JSDocRecordMember)
@kind(SyntaxKind.JSDocRecordType)
@kind(SyntaxKind.JSDocReturnTag)
@kind(SyntaxKind.JSDocTag)
@kind(SyntaxKind.JSDocTemplateTag)
@kind(SyntaxKind.JSDocThisType)
@kind(SyntaxKind.JSDocTupleType)
@kind(SyntaxKind.JSDocTypeExpression)
@kind(SyntaxKind.JSDocTypeReference)
@kind(SyntaxKind.JSDocTypeTag)
@kind(SyntaxKind.JSDocUnionType)
@kind(SyntaxKind.JSDocUnknownType)
@kind(SyntaxKind.JSDocVariadicType)
@kind(SyntaxKind.JsxAttribute)
@kind(SyntaxKind.JsxClosingElement)
@kind(SyntaxKind.JsxExpression)
@kind(SyntaxKind.JsxSpreadAttribute)
@kind(SyntaxKind.JsxText)
@kind(SyntaxKind.LabeledStatement)
@kind(SyntaxKind.MethodSignature)
@kind(SyntaxKind.MissingDeclaration)
@kind(SyntaxKind.ModuleBlock)
@kind(SyntaxKind.ModuleDeclaration)
@kind(SyntaxKind.NamedExports)
@kind(SyntaxKind.NamedImports)
@kind(SyntaxKind.NamespaceImport)
@kind(SyntaxKind.NewExpression)
@kind(SyntaxKind.NonNullExpression)
@kind(SyntaxKind.ObjectBindingPattern)
@kind(SyntaxKind.ObjectLiteralExpression)
@kind(SyntaxKind.OmittedExpression)
@kind(SyntaxKind.Parameter)
@kind(SyntaxKind.ParenthesizedExpression)
@kind(SyntaxKind.ParenthesizedType)
@kind(SyntaxKind.PostfixUnaryExpression)
@kind(SyntaxKind.PrefixUnaryExpression)
@kind(SyntaxKind.PropertyAccessExpression)
@kind(SyntaxKind.PropertyAssignment)
@kind(SyntaxKind.PropertyDeclaration)
@kind(SyntaxKind.PropertySignature)
@kind(SyntaxKind.QualifiedName)
@kind(SyntaxKind.ReturnStatement)
@kind(SyntaxKind.SemicolonClassElement)
@kind(SyntaxKind.SetAccessor)
@kind(SyntaxKind.ShorthandPropertyAssignment)
@kind(SyntaxKind.SourceFile)
@kind(SyntaxKind.SpreadElementExpression)
@kind(SyntaxKind.StringLiteral)
@kind(SyntaxKind.StringLiteralType)
@kind(SyntaxKind.SwitchStatement)
@kind(SyntaxKind.TaggedTemplateExpression)
@kind(SyntaxKind.TemplateExpression)
@kind(SyntaxKind.TemplateSpan)
@kind(SyntaxKind.ThisType)
@kind(SyntaxKind.ThrowStatement)
@kind(SyntaxKind.TryStatement)
@kind(SyntaxKind.TupleType)
@kind(SyntaxKind.TypeAliasDeclaration)
@kind(SyntaxKind.TypeAssertionExpression)
@kind(SyntaxKind.TypeLiteral)
@kind(SyntaxKind.TypeOfExpression)
@kind(SyntaxKind.TypeParameter)
@kind(SyntaxKind.TypePredicate)
@kind(SyntaxKind.TypeQuery)
@kind(SyntaxKind.TypeReference)
@kind(SyntaxKind.UnionType)
@kind(SyntaxKind.VariableDeclaration)
@kind(SyntaxKind.VariableDeclarationList)
@kind(SyntaxKind.VariableStatement)
@kind(SyntaxKind.VoidExpression)
@kind(SyntaxKind.WhileStatement)
@kind(SyntaxKind.WithStatement)
@kind(SyntaxKind.YieldExpression)
@lib: es5,es2017.object
@noImplicitReturns: true
@noImplicitUseStrict: true
@param  description Description of the new Symbol object.
@param  radius The radius of the circle.
@param a first number
@param argArray A list of arguments to be passed to the method.
@param argArray A list of arguments to be passed to the new function.
@param argArray A set of arguments to be passed to the function.
@param args A list of arguments the function accepts.
@param array A typed or untyped array of values to set.
@param array the array of input elements.
@param arrayLike An array-like object to convert to an array.
@param arrayLike An array-like or iterable object to convert to an array.
@param attributes Descriptor for the property.
@param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
@param begin The index of the beginning of the array.
@param byteOffset The place in the buffer at which the value should be retrieved.
@param byteOffset The place in the buffer at which the value should be set.
@param callbackfn  A function that accepts up to three arguments.
@param callbackfn A function that accepts up to four arguments.
@param callbackfn A function that accepts up to three arguments.
@param characters Positive number of characters to skip forward.
@param commandId Displays help information for the given command identifier.
@param commandId Specifies a command identifier.
@param commandId String that contains the identifier of a command.
@param commandId String that specifies a command identifier.
@param commandId String that specifies the command to execute.
@param compareFn The name of the function used to determine the order of the elements.
@param containingMessageChain A chain of errors to prepend any new errors found.
@param content Specifies the text and HTML tags to write.
@param content The text and HTML tags to write.
@param contextId The identifier (ID) of the type of canvas to create.
@param count number of copies to append
@param data Sets the comment object's data.
@param data String that specifies the nodeValue property of the text node.
@param date A numeric value equal for the day of the month.
@param date A numeric value equal to the day of the month.
@param date A numeric value representing the day of the month.
@param date The date as an number between 1 and 31.
@param deleteCount The number of elements to remove.
@param dimension 1-based dimension (defaults to 1)
@param element Variant of type Number that specifies the index position in the collection where the element is placed.
@param elementId String that specifies the ID value.
@param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
@param encodedURI A value representing an encoded URI.
@param encodedURIComponent A value representing an encoded URI component.
@param end If not specified, length of the this object is used as its default value.
@param end The end of the specified portion of the array.
@param end The index of the end of the array.
@param end The index to the end of the specified portion of stringObj.
@param end The offset into the text field for the end of the selection.
@param end Zero-based index integer indicating the end of the substring.
@param end Zero-based index number indicating the end of the substring.
@param end index to stop filling the array at.
@param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.
@param error Sets a custom error message that is displayed when a form is submitted.
@param errorNode The suggested node upon which all errors will be reported, if defined.
@param ev The UI Event
@param ev The drag event.
@param ev The focus event.
@param ev The keyboard event
@param ev The mouse event
@param ev The mouse event.
@param executor A callback used to initialize the promise.
@param exportsOfModule          The list of symbols which a module exposes.
@param expr the expression whose value needs to be bound.
@param features Contains a list of items separated by commas.
@param fileName The file in which to perform the check.
@param fileNames are the names for source files in the project
@param fileResults an array of strings for the fileName and an ITextWriter with its code
@param fileResults an array of strings for the filename and an ITextWriter with its code
@param filter A custom NodeFilter function to use.
@param flags The NodeFlags to use for the cloned node.
@param fractionDigits Number of digits after the decimal point.
@param from The starting position of the desired substring.
@param fromIndex The array index at which to begin the search.
@param fromIndex The position in this array at which to begin searching for searchElement.
@param headMessage If the error chain should be prepended by a head message, then headMessage will be used.
@param hint The strings "number", "string", or "default" to specify what primitive to return.
@param host is the object providing I/O related operations.
@param hours A numeric value equal to the hours value.
@param hours Must be supplied if minutes is supplied.
@param index Number that specifies the zero-based index of the element to remove from the collection.
@param index Number that specifies the zero-based position in the rows collection of the row to remove.
@param index Number that specifies the zero-based position of the cell to remove from the table row.
@param index Number that specifies where to insert the cell in the tr.
@param index Number that specifies where to insert the row in the rows collection.
@param index The index of the location to set.
@param index The zero-based index of the desired character.
@param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
@param info The file that has been closed or newly configured
@param initialValue If initialValue is specified, it is used as the initial value to start the accumulation.
@param intTime Interval (in milliseconds) to suspend script execution.
@param items  Elements to insert at the start of the Array.
@param items A set of elements to include in the new array object.
@param items Additional items to add to the end of array1.
@param items Elements to insert into the array in place of the deleted elements.
@param items New elements of the Array.
@param iterable An iterable object to convert to an array.
@param key key to search for.
@param left The left hand side of the property access (e.g.: the super in `super.foo`).
@param length The number of characters to include in the returned substring.
@param lexState                  The state of the lexical classifier at the end of the previous line.
@param limit A value used to limit the number of elements returned in the array.
@param line 1 based index
@param locale Locale tag.
@param locales An array of locale strings that contain one or more language or locale tags.
@param location An optional TextRange to use to supply the new position.
@param makeKey a function that produces a key for a given element.
@param mapfn A mapping function to call on every element of the array.
@param matcher An object that supports being matched against.
@param min A numeric value equal to the minutes value.
@param minutes Must be supplied if seconds is supplied.
@param month A numeric value equal to the month.
@param month A zero-based numeric value for the month (0 for January, 11 for December).
@param month The month as an number between 0 and 11 (January to December).
@param ms A numeric value equal to the millisecond value.
@param ms A numeric value equal to the milliseconds value.
@param ms An number from 0 to 999 that specifies the milliseconds.
@param n Value to decrement the value by.
@param n Value to increment the value by.
@param name Specifies the name of an element.
@param name Specifies the name of the window.
@param name String that sets the attribute object's name.
@param name Variant of type Number or String that specifies the object or collection to retrieve.
@param namedImportsOrExports    The list of existing import/export specifiers in the import/export clause.
@param namedItem A String that specifies the name or id property of the object to retrieve.
@param node The EntityName to clone.
@param node The call/new expression to be checked.
@param node The node to be checked.
@param node The node to clone.
@param node the expression whose contextual type will be returned.
@param number A numeric value.
@param number Any numeric value.
@param o Object on which to add or modify the properties.
@param o Object on which to add or modify the property.
@param o Object on which to lock the attributes.
@param o Object that contains the own properties.
@param o Object that contains the properties and methods.
@param o Object that contains the property.
@param o Object to make non-extensible.
@param o Object to retrieve the symbols from.
@param o Object to test.
@param o Object to use as a prototype.
@param o The object that references the prototype.
@param o The object to change its prototype.
@param offset The index in the current array at which the values are to be written.
@param onfulfilled The callback to execute when the Promise is resolved.
@param onrejected The callback to execute when the Promise is rejected.
@param opt optional parameter
@param options An object that contains one or more properties that specify comparison options.
@param p Name of the property.
@param p The property name.
@param parent - node's parent declaration.
@param parent The parent for the cloned node.
@param parent The parent for the new node.
@param position The index at which to begin searching.
@param precision Number of significant digits.
@param prop The symbol for the right hand side of the property access.
@param properties JavaScript object that contains one or more descriptor objects.
@param proto The value of the new prototype or null.
@param radix A value between 2 and 36 that specifies the base of the number in numString.
@param radix Specifies a radix for converting numeric values to strings.
@param reason The reason the promise was rejected.
@param regexp A regular expression object that contains the regular expression pattern and applicable flags.
@param regexp A variable name or string literal containing the regular expression pattern and flags.
@param regexp The regular expression pattern and applicable flags.
@param relation The relation considered.
@param replace Specifies whether the existing entry for the document is replaced in the history list.
@param replaceValue A string containing the text to replace for every successful match of searchValue in this string.
@param replacer A function that returns the replacement text.
@param replacer A function that transforms the results.
@param replacer Array that transforms the results.
@param returnType - return type of the function, can be undefined if return type is not explicitly specified
@param reviver A function that transforms the results.
@param root The root element or node to start traversing on.
@param s A date string
@param s A string to convert into a number.
@param scriptSnapshot Text of the file.
@param searchElement The element to search for.
@param searchElement The value to locate in the array.
@param searchString The substring to search for.
@param searchValue A Regular Expression object containing the regular expression pattern and applicable flags.
@param searchValue A object can search for and replace matches within a string.
@param searchValue A string that represents the regular expression.
@param searcher An object which supports searching within a string.
@param sec A numeric value equal to the seconds value.
@param seconds Must be supplied if milliseconds is supplied.
@param separator A Regular Express that identifies character or characters to use in separating the string.
@param separator A string that identifies character or characters to use in separating the string.
@param separator A string used to separate one element of an array from the next in the resulting String.
@param showUI Display the user interface, defaults to false.
@param source The left-hand-side of the relation.
@param source The source object from which to copy properties.
@param source1 The first source object from which to copy properties.
@param source2 The second source object from which to copy properties.
@param source3 The third source object from which to copy properties.
@param sources One or more source objects from which to copy properties
@param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.
@param splitter An object that can split a string.
@param start If start is negative, it is treated as length+start.
@param start The beginning of the specified portion of the array.
@param start The index to the beginning of the specified portion of stringObj.
@param start The offset into the text field for the start of the selection.
@param start The zero-based index integer indicating the beginning of the substring.
@param start The zero-based index number indicating the beginning of the substring.
@param start The zero-based location in the array from which to start removing elements.
@param strPathname Fully qualified path to the file containing the object persisted to disk.
@param string A string that contains a floating-point number.
@param string A string to search within.
@param string String on which to perform the search.
@param string The String object or string literal on which to perform the search.
@param string The string to search within.
@param strings The strings to append to the end of the string.
@param substitutions A set of substitution values.
@param sym Symbol to find the key for.
@param symbolTable - The symbol table which node will be added to.
@param syntacticClassifierAbsent Whether the client is *not* using a syntactic classifier.
@param tagName The name of an element.
@param target The right-hand-side of the relation.
@param target The target object to copy to.
@param template A well-formed template string call site representation.
@param text A valid JSON string.
@param that String to compare to target string
@param thisArg  An object to which the this keyword can refer in the callbackfn function.
@param thisArg An object to which the this keyword can refer in the callbackfn function.
@param thisArg An object to which the this keyword can refer inside the new function.
@param thisArg The object to be used as the current object.
@param thisArg The object to be used as the this object.
@param thisArg Value of 'this' used to invoke the mapfn.
@param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.
@param type The standard MIME type for the image format to return.
@param type The type of left.
@param type The type of the promise.
@param type The type to await.
@param uriComponent A value representing an encoded URI component.
@param url Specifies a MIME type for the document.
@param v A property name.
@param v Another object whose prototype chain is to be checked.
@param value A JavaScript value, usually an object or array, to be converted.
@param value A promise.
@param value The value to set.
@param value Value to assign.
@param value1 The first value.
@param value2 The second value.
@param values An array of Promises.
@param values Numeric expressions to be evaluated.
@param values Values to compute the square root for.
@param version Current version of the file.
@param whatToShow The type of nodes or elements to appear in the node list.
@param x A String value that contains valid JavaScript code.
@param x A numeric expression for which the absolute value is needed.
@param x A numeric expression for which the arctangent is needed.
@param x A numeric expression representing the cartesian x-coordinate.
@param x A numeric expression representing the power of e.
@param x A numeric expression that contains an angle measured in radians.
@param x A numeric expression.
@param x The base value of the expression.
@param x The numeric expression to test
@param x The value to be rounded to the nearest number.
@param y A numeric expression representing the cartesian y-coordinate.
@param y The exponent value of the expression.
@param year A numeric value equal to the year.
@param year A numeric value for the year.
@param year The full year designation is required for cross-century date accuracy.
@parm scriptSnapshot Text of the file.
@parm version Current version of the file.
@preserveConstEnums: false
@preserveConstEnums: true
@remarks The "promised type" of a type is the type of the "value" parameter of the "onfulfilled" callback.
@removeComments: false
@return a tuple of two symbols
@return undefined if the name is of external module otherwise a name with striped of any quote
@returns A Promise for the completion of the callback.
@returns A Promise for the completion of which ever callback is executed.
@returns A new Promise.
@returns A new rejected Promise.
@returns A number if 'hint' was "number", a string if 'hint' was "string" or "default".
@returns A promise whose internal state matches the provided promise.
@returns A resolved promise.
@returns On success, the expression's signature's return type.
@returns the contextual type of an expression.
@strictNullChecks: true
@suppressImplicitAnyIndexErrors: true
@template K , V Description of type parameters.
@throws OperationCanceledException if isCancellationRequested is true
@type annotation might have been on the variable statement, try that instead.
A JSDocTypeReference may have resolved to a value (as opposed to a type).
A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
A String value that is used in the creation of the default string description of an object.
A TypeLiteral is the declaration node for an anonymous symbol.
A TypeScript Server message
A block-scoped variable (let or const)
A cache of completion entries for keywords, these do not change between sessions
A cancellation that throttles calls to the host
A class decorator does not have a second argument type.
A class decorator will have one argument (see `ClassDecorator` in core.d.ts)
A class or interface is generic if it has type parameters or a "this" type.
A collection is returned if more than one match is made.
A comment at the top of the file.
A common path can not be found when paths span multiple drives on windows, for example
A compile - time error occurs if no return statement expression has a type that is a supertype of each of the others.
A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
A generator does not need its return expressions checked against its return type.
A generator with a body and no type annotation can still cause errors.
A group of text spans, all in 'file'.
A linked list of formatted diagnostic messages to be used as part of a multiline message.
A list of all our child Runnables
A list of bugs impacting this object
A list of ranges we've collected so far
A manufactured type that just contains the signature for purposes of signature comparison
A mapping from marker names to name/position pairs
A method cannot be accessed in a super property access if the method is abstract.
A method that converts an object to a corresponding primitive value.
A method that returns the default iterator for an object.
A minimal description for a parsed package.json object.
A modified source file has no watcher and should not be reused
A node is considered a writeAccess iff it is a name of a declaration or a target of an assignment
A non-empty string means we expect an error whose .name is that string.
A partially written generic type expression is not guaranteed to have the correct syntax tree.
A post-mortem of this iteration of the loop.
A private or protected constructor can only be instantiated within it's own class
A protected property is accessible if the property is within the declaring class or classes derived from it
A public and protected signature is assignable to a protected signature.
A public, protected and private signature is assignable to a private signature.
A reference to the prototype for a class of objects.
A reference to the prototype.
A reference to this grandparent's type parameters would be an error
A regular expression method that matches the regular expression against a string.
A regular expression method that replaces matched substrings of a string.
A request to get the project information of the current file
A request whose arguments specify a file location (file, line, col).
A rest parameter cannot have a binding pattern, so let's just ignore it if it does.
A segment is considered invalid if we couldn't find any words in it.
A set accessor has one parameter or a `this` parameter and one more parameter
A short mnemonic for convenience - for instance, 'h' can be used in place of 'help'
A stack of the open range markers that are still unclosed
A string that is used for comparing completion items so that they can be ordered.
A tuple type directly depends on each of its element types.
A type T is a subtype of a union type U if T is a subtype of any type in U.
A type alias directly depends on the type it aliases.
A type annotation for a rest parameter must denote an array type.
A type query directly depends on the type of the referenced entity.
A type reference directly depends on the referenced type and each of the type arguments, if any.
A type reference is considered independent if each type argument is considered independent.
A typed array of 16-bit signed integer values.
A typed array of 16-bit unsigned integer values.
A typed array of 32-bit float values.
A typed array of 32-bit signed integer values.
A typed array of 32-bit unsigned integer values.
A typed array of 64-bit float values.
A typed array of 8-bit integer values.
A typed array of 8-bit unsigned integer (clamped) values.
A typed array of 8-bit unsigned integer values.
A typing name to typing file path mapping
A union type U is a subtype of a type T if each type in U is a subtype of T
A union type U is assignable to a type T if each type in U is assignable to T
A union type directly depends on each of the constituent types.
A union type requires the property to be present in all constituent types
A value greater than the largest number that can be represented in JavaScript.
A value that is less than the largest negative number that can be represented in JavaScript.
A value that is not a number.
A variable declared in a for..in statement is always of type string
A yield* expression effectively yields everything that its operand yields
A.b should be an unresolved symbol error
ASI takes effect for this modifier.
Aborts the 'git bisect run' process
Above we check for excess properties with respect to the entire target type.
Abstract methods can't have an implementation -- in particular, they don't need one.
Abstract methods cannot have an implementation.
Accessor and property with the same name
Accessors are set to 'exported' above
Acquire and modify the source file that exposes the version string.
Acquire the version from the package.json file and modify it appropriately.
Actual writing of file as in tc.ts
Add a level if traversing into a container
Add a method to the class
Add a new least significant bit that has the sign of the value.
Add a similar class -- name does not match
Add a source file to the runner's list of tests that need to be initialized with initializeTests
Add a space around certain TypeScript keywords
Add a space between statements.
Add a watch on the file to handle next change
Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__'
Add files to compilation
Add filtered items to the completion list
Add import files into language-service host
Add keywords if this is not a member completion list
Add more to make it slower
Add name of class expression into the map for semantic classifier
Add other fileMetadata flag
Add parenthesis around function type for the first type argument to avoid ambiguity
Add symbol of properties/methods of the same name in base classes and implemented interfaces definitions
Add the cached typing locations for inferred typings that are already installed
Add the ch to doc text if we arent in param tag
Add the constructor parameters in as children of the class (for property parameters).
Add the empty lines in between texts
Add the entry-point file itself into the languageServiceShimHost
Add the given types to the given type set.
Add the referenced top container visible
Add the remaining text
Add triple reference files into language-service host
Adding smicolon should format the break statement
Adding smicolon should format the innermost statement
Additional completion entry details, available on demand
Additional options not already in ts.optionDeclarations
Address of a pointer to the document this page or frame contains.
Adds a diagnostic to this diagnostic collection.
Adds a property to an object, or modifies attributes of an existing property.
Adds all the elements of an array separated by the specified separator string.
Adds an element to the areas, controlRange, or options collection.
Adds one or more properties to an object, and/or modifies attributes of existing properties.
Adjust the pos or end (or both) of the intersecting array accordingly.
Adjust the pos or end (or both) of the intersecting element accordingly.
After a line break, we can parse a tag, and we haven't seen an asterisk on the next line yet
After the enter key, the cursor is now at a new line.
After this point, no useful parsing occurs in the entire file
Aggregate various writes into a single array of lines.
Aggregates relevant symbols for completion in object literals and object binding patterns.
Alias for both type and member A.X
Alias only for module A
Aliases can be written asynchronously so use correct enclosing declaration
All JavaScript numbers are 64-bit floating-point numbers.
All classes are automatically in strict mode in ES6.
All comments look like they could have been part of the copyright header.
All conflict markers consist of the same character repeated seven times.
All constituents can be called by passing a single string.
All container nodes are kept on a linked list in declaration order.
All done, ensure state is up to date
All export * declarations are collected in an __export symbol
All export * declarations are collected in an __export symbol by the binder
All keywords except (do,else,case) has open/close parens after them.
All of the below should be an error unless otherwise noted operator *
All of the below should be an error unless otherwise noted operator **
All of these entities are emitted in a specialized fashion.
All of these should be errors
All of these should be ok
All of these should fail.
All of these should pass.
All other strings are considered decimal.
All outputs should be skipped.
All the below declarations are errors
All the below should not be errors
All the necessary information to turn a multi file test into useful units for later compilation
All type parameters should be instantiated to string
All unary operators have a higher precedence apart from yield.
All use of let in const declaration should be an error
Allow assignments to readonly properties within constructors of the same class declaration.
Allow importing jasmine-check
Allow matching non-generic signatures to have excess parameters and different return types
Allow things like "public get", "public constructor" and "public static".
Allowed to declare block scope function
Allows enumerating over a COM collection, which may not have indexed item access.
Allows finding nodes in the source file at a certain position in an efficient manner.
Allows manipulation and formatting of text strings and determination and location of substrings within strings.
Allows updating the print settings for the page.
Already errored when we tried to look up the symbol
Already seen the same emit file - report error
Also includes NodeArrays.
Also mark that we've propagated the child information to this node.
Also recognize when the node is the RHS of an assignment expression
Also should format any parent statement that is terminated by the semicolon
Also should not be allowed
Also, mark any syntax elements that intersect the changed span.
Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
Also, the V of Promise2 happens to coincide with the T of IPromise2 (they are both string).
Although this method extracts the newline character, it does not add it to the returned string.
Always adjust the end pos.
Always default to "ScriptTarget.ES5" for the language service
Always emit comments for these nodes.
Always preserve a trailing comma by marking it on the NodeArray
Always treat any change as a full change.
Always use 'typeof T' for type of class, enum, and module objects
Always use a newline for synthesized code if the synthesizer desires it.
Ambient declaration, no error expected.
Ambient enum members are always exported with or without export keyword
Ambient enum with computer member
Ambient enum with integer literal initializer
Ambient enum with non - integer literal constant member
Ambient external module members are always exported with or without export keyword when module lacks export assignment
Ambient external module not in the global module
Ambient external module with a string literal name that isn't a top level external module name
Ambient external module with export assignment and other exported members
Ambient function overloads that differ only by return type
Ambient function with default parameter values
Ambient function with function body
Ambient function with no type annotations
Ambient function with optional parameters
Ambient function with type annotations
Ambient function with valid overloads
Ambient functions with duplicate signatures
Ambient functions with invalid overloads
Ambient module declarations can be interpreted as augmentations for some existing external modules.
Ambient module members are always exported with or without export keyword
Ambient module with initializers for values, bodies for functions / classes
Ambient variable with type annotation
Ambiguous call picks the first overload in declaration order
An AmbientExternalModuleDeclaration declares an external module.
An ObjectLiteralExpression is the declaration node for an anonymous symbol.
An accessors is already reported about the ambient context
An additional grant of patent rights can be found in the PATENTS file in the same directory.
An alias for another symbol (see comment in isAliasSymbolDeclaration in checker)
An array of diagnostic information items.
An array of span groups (one per file) that refer to the item to be renamed.
An array type directly depends on its element type.
An arry of diagnostic information items for the found config file.
An async method that assigns a value to a member of 'super'.
An async method that reads a value from a member of 'super'.
An element from a named property of the JSX.IntrinsicElements interface
An element inferred from the string index signature of the JSX.IntrinsicElements interface
An enum declaration that specifies a const modifier is a constant enum declaration.
An exception to this rule is if the function implementation consists of a single 'throw' statement.
An export default clause with an expression exports a value
An export default clause with an identifier exports all meanings of that identifier
An external module can be a Value
An important thing about these context concepts.
An inline image shows up in the text as a "/".
An instance property must be accessed through an instance of the enclosing class
An instantiated anonymous type has a target and a mapper
An interface can be named in an extends or implements clause, but a type alias for an object type literal cannot.
An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
An interface can have type parameters, but a type alias for an object type literal cannot.
An intrinsic object that provides basic mathematics functionality and constants.
An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.
An item found in a completion response.
An item found in a navto response.
An number from 0 to 23 (midnight to 11pm) that specifies the hour.
An number from 0 to 59 that specifies the minutes.
An number from 0 to 59 that specifies the seconds.
An object that represents a number of any kind.
An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.
An unapplied type parameter has its symbol still the same as the matching argument symbol.
Analyze text on this line
And *importantly* this source file will be *corrupt*.
And production (2) is parsed in "tryParseParenthesizedArrowFunctionExpression".
Animal does not satisfy the constraint, but T is at worst a Giraffe and compatible with Animal via covariance.
Anonymous types with no symbol are never circular
Another error has already been reported
Any name in an export specifier
Any other lists we do not care about reusing nodes in.
Any slash-star comment with a character not in this string is not a marker.
Anything else is doc comment text.
Anything else treat as an expression.
Apart from actual test case the results of the resolution
Apparent number of arguments we will have in this call
Append diff to the report
Append remaining string
Appends new elements to an array, and returns the new length of the array.
Appends the outer type parameters of a node to a set of type parameters and returns the resulting set.
Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.
Apply a mapping function to a contextual type and return the resulting type.
Apply an array of text edits to a string, and return the resulting string.
Applying the 'toString()' method on a number gives us the abstract ToString operation on a number.
Arguments for FileRequest messages.
Arguments for GeterrForProject request.
Arguments for ProjectInfoRequest request.
Arguments for change request message.
Arguments for completion details request.
Arguments for completions messages.
Arguments for format messages.
Arguments for format on key messages.
Arguments for geterr messages.
Arguments for navto request message.
Arguments for reload request.
Arguments for saveto request.
Arguments of a signature help request.
Array is entirely after the change range.
Array literal assignment - array destructuring pattern
Array of decorators (in document order)
Array of files the compiler wrote to disk
Array of function types
Array of sourceMapData if compiler emitted sourcemaps
Arrow function as argument to super call
Arrow function as function argument
Arrow function as module variable initializer
Arrow function as value in array literal
Arrow function used in arrow function
Arrow function used in arrow function used in function
Arrow function used in function
Arrow function used in nested function in arrow function
Arrow function used in nested function in arrow function in nested function
Arrow function used in nested function in function
Arrow function used in try/catch/finally in function
Arrow function used in with statement
Arrow functions are never generators.
As a result, they will need parentheses to disambiguate object binding assignments from blocks.
As it so happens, the same logic applies if the second edit precedes the first edit.
As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.
As such, we need to consume the rest of it here to be complete.
Ask the server for the contents of the file at the given URL via a simple GET request
Ask the server to use node's path.resolve to resolve the given path
Assign to a property access
Assign to expression++
Assignment doesn't affect reference
Assignment from the returned value should cause an error.
Assignments only narrow the computed type if the declared type is a union type.
Associated FlowNode (initialized by binding)
Assume any other keyword combination is legal.
Assumes 'value' is already lowercase.
Assumes the result array to be empty.
Assumption is that these edit ranges don't overlap
Async arrow functions are parsed earlier in parseAssignmentExpressionOrHigher.
At runtime they have zero cost.
At the top of the flow we have the initial type.
At this point, node is either a qualified name or an identifier
Attach a file watcher
Attaches a callback for only the rejection of the Promise.
Attaches callbacks for the resolution and/or rejection of the Promise.
Attempt to parse the marker value as JSON
Attempt to resolve a symbol
Attempting to 'new' an interface yields poor error
Attributes in jsx element
Avoid recalculating getStart() by iterating backwards.
BREAK, RETURN, THROW, DEBUGGER, FOR, SWITCH, DO, IF, TRY, WITH
BUG: Should be an error to invoke a call signature on a namespace import
Back to the state where the last token was not a comma
Bail out if this is a known invalid completion location
Bail out quickly if it couldn't possibly be in the map.
Base benchmark class with some defaults.
Base component for plain JS classes
Base.a, HasAOrB.a, x.common.a
Based on EcmaScript6 section 14.5.14: Runtime Semantics: ClassDefinitionEvaluation.
Baselining isn't required here because there is no output.
Be contextually typed and and bct is not identical, results in errors that union type is not assignable to target
Be resilient in the face of a symbol with no name or zero length name
Because of hoisting top level class declaration need to be emitted as class expressions.
Because of the noEmitOnError option no files are created.
Because the TemplateStringsArray is the first argument, we have to offset each substitution expression by 1.
Before fix this code would cause infinite loop
Being at the end of the file ends all lists.
Below 2 should compile without error
Below is actually valid JavaScript (see http://es5.github.com/#x8.7 ), even though will always fail at runtime with 'invalid left-hand side'
Below should all be OK
Below should be in error
Best common type is any
Big endian UTF-16 byte order mark detected.
Bind all source files and propagate errors
Binding element associated with property symbol
Binding elements in array binding list
Binding elements in object binding list
Binding patterns in arrow functions
Binding property name (in object binding pattern)
Binding to a decorated class inside of the class's body.
Blacklist of items we never put in the baseline file.
Block scoped binding whose value should be explicitly copied outside of the converted loop
Block scoped definitions work poorly for global variables, temporarily enable var
Block was a standalone block.
Block-scoped binding that is captured in some function
Block-scoped binding with declaration nested inside iteration statement
Block-scoped variables cannot be used before their definition
Body is an array of navto items.
Body of QuickInfoResponse.
Boolean not assignable to type guard
Both - getter without annotation, setter with annotation
Both - with annotation
Both of these should be allowed
Both public and private property members are inherited, but only public property members can be overridden.
Both should be valid.
Both yield and yield* expressions have type 'any'
Bracket notation property access using enum value on type with no index signatures
Bracket notation property access using enum value on type with numeric index signature
Bracket notation property access using enum value on type with numeric index signature and string index signature
Bracket notation property access using enum value on type with string index signature and no numeric index signature
Bracket notation property access using numeric string literal value on type with property of that literal name
Bracket notation property access using numeric string literal value on type without property of that literal name
Bracket notation property access using numeric string value on type with numeric index signature and string index signature
Bracket notation property access using numeric value on type with no index signatures
Bracket notation property access using numeric value on type with numeric index signature
Bracket notation property access using numeric value on type with string index signature and no numeric index signature
Bracket notation property access using string literal value on type without property of that literal name
Bracket notation property access using string value on type with no index signatures
Bracket notation property access using string value on type with numeric index signature
Bracket notation property access using string value on type with numeric index signature and string index signature
Bracket notation property access using value of other type on type with numeric index signature and no string index signature
Bracket notation property access using value of other type on type with numeric index signature and no string index signature and string index signature
Bracket notation property access using value of type 'any' on type with no index signatures
Bracket notation property access using value of type 'any' on type with numeric index signature
Bracket notation property access using value of type 'any' on type with numeric index signature and string index signature
Bracket notation property access using value of type 'any' on type with string index signature and no numeric index signature
Bracket notation property access using values of other types on type with no index signatures
Break up arrayOrStringType (possibly a union) into its string constituents and array constituents.
Breakpoint in last binding element or binding pattern if it contains no elements
Breakpoint in type assertion goes to its operand
Breakpoint is possible on parameter only if it has initializer, is a rest parameter, or has public or private modifier
Bring up completion to force a pull resolve.
Bug 823548: Should be error (fn is not a reference)
Build the set of symbols to search for, initially it has only the current symbol
Build up the list of examples.
Build up the syntactic skeleton.
But BB is abstract, so this is OK.
But error to try to climb up the chain
But not parents that are not terminated by it
But we break the symbol name on words.
But we would match 'FooAttribute' (since 'Attribute' starts with 'a').
C1M4 contains a mix of optional and non-optional parameters
CONTEXT: Array index assignment
CONTEXT: Class property assignment
CONTEXT: Class property declaration
CONTEXT: Function call
CONTEXT: Module property assignment
CONTEXT: Module property declaration
CONTEXT: Newing a class
CONTEXT: Object property assignment
CONTEXT: Return statement
CONTEXT: Type annotated expression
CONTEXT: Variable assignment
CONTEXT: Variable declaration
Cache boolean if we report statements in ambient context
Cache both the resolved symbol and the resolved type.
Cache of instantiations created using this type mapper.
Cache of resolved properties
Cache these between executions so we don't have to re-parse them for every test
Cached configuration file text, used for reparsing (if any)
Cached first super-call found in the constructor.
Cached indexing info resolution result
Cached name resolution result
Cached signature of signature node or call expression
Cached type of type node
Calculate new indentation from current-indentation and delta
Calculate the start of the squiggle
Call React.createElement(tag, ...
Call should succeed and x should be string.
Call signatures can't be optional
Call signatures of type
Call the "walkChildren" function corresponding to "nodeType".
Call, construct, or index signature
Called by the String.prototype.search method.
Called by the String.prototype.split method.
Called by the ToPrimitive abstract operation.
Called by the built-in method Object.prototype.toString.
Called by the semantics of the instanceof operator.
Called when the symbol writer encounters a symbol to write.
Caller insisted that we had to end with a )   We didn't.
Calling new with (non)abstract classes.
Calls a defined callback function on each element of an array, and returns an array that contains the results.
Calls a method of an object, substituting another object for the current object.
Calls below should infer string for T and then assign that type to the value parameter
Calls methods on primitives correctly
Calls of form foo(...)
Calls of form obj.foo(...)
Calls of form super(...) and super.foo(...)
Calls static methods properly
Calls super methods correctly (#1)
Calls super methods correctly (#2)
Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.
Calls the specified callback function for all the elements in an array, in descending order.
Calls the specified callback function for all the elements in an array.
Can be accessed only while using CScript.exe.
Can emit only sources that are not declaration file and are either non module code or module with --module or --target es6 specified
Can happen when all input files are .d.ts files
Can index with tagged number
Can not access properties on super
Can not access protected properties overridden in subclass
Can not access protected properties through base class
Can only be used on a stream in reading mode, not writing or appending mode.
Can only rename an identifier.
Can see protected methods elevated to public
Can with tagged string
Can't have references to something that we have no symbol for.
Can't reuse a missing node.
Can't reuse a node that contains a parse error.
Can't reuse a node that intersected the change range.
Cancellation that controls whether or not we can cancel in the middle of type checking.
Cannot find name since foo is block scoped
Cannot resolve signature
Cannot resolve this ext module reference
Cannot set breakpoint in ambient declarations
Cannot set breakpoint in dts file
Cannot specify module gen target of es6 when below es6
Cannot specify module gen that isn't amd or system with --out
Cant create the text span
Cant find the relative path, get the absolute path
Case I: both start and end of range in same subtree
Case II: start and end of range in different subtrees (possibly with subtrees in the middle)
Cause a runtime dependency
Causes the element to receive the focus and executes the code specified by the onfocus event.
Chained new expressions
Change Last recorded Map with last encoded emit line and character
Change cached program to the given program
Character is the actual index of the character since the beginning of the line.
Character offset on last line of range for which to format text in file.
Check __dirname is defined and that we are on a node.js system.
Check and see if the symbol table already has a symbol with this name.
Check assignability here.
Check each type parameter and check that type parameters have no duplicate type parameter declarations
Check for /** (JSDoc opening part)
Check for case 1 and 3 in the above example
Check for compatible indexer types.
Check for that common pattern and report a better error message.
Check for un-parenthesized AsyncArrowFunction
Check if a Type was written as a tuple type literal.
Check if a property with the given name is known anywhere in the given type.
Check if function expression is contextually typed and assign parameter types if so.
Check if in a context where we don't want to perform any insertion
Check if no-default-lib flag is false and if so add default library
Check if symbol is any of the alias
Check if the block is standalone, or 'attached' to some parent statement.
Check if the containing block ever report this error
Check if the current token can possibly be an ES7 increment expression.
Check if the element intersects the change range.
Check if the expression has operands and binds its operands less closely than binary '+'.
Check if the file is already added into the set of input files.
Check if the given class-declaration extends null then return true.
Check if the last token was a comma.
Check if the localized messages json is set, otherwise query the host for it
Check if the match is already existed in the global options
Check if the node can be emitted regardless of the ScriptTarget
Check if the old program had this file already
Check if there is any non-static property assignment
Check if there is name:
Check if we have property assignment inside class declaration.
Check if we matched anything at all.
Check if we're in an instance method and look for a relevant instance member.
Check members of the function
Check no more than once every 10 ms.
Check number of navigationItems which match both searchValue and matchKind.
Check primary library paths
Check spread elements against rest type (from arity check we know spread argument corresponds to a rest parameter)
Check syntactic structure
Check that a parameter initializer contains no references to parameters declared to the right of itself
Check that a.ts is referenced
Check that all required properties have been provided.
Check that b.d.ts is referenced
Check that right operand is a function type with a prototype property
Check that the two signatures have the same number of type parameters.
Check that type parameter lists are identical across multiple declarations
Check that we infer from both a.r and b before fixing T in a.w
Check the decorators of a node
Check to see if a static member exists.
Check to see if any constituents of the intersection are immediately related to the target.
Check to see if no argument was provided (e.g. "--locale" is the last command-line argument).
Check variable, parameter, or property declaration
Check what references need to be added
Check whether the parameter list needs parentheses and preserve no-parenthesis
Check whether the requested property access is valid.
Check whether this declaration belongs to an "overload group".
Check whether we should auto-indent.
Checking for completion details after edit should work too
Checking for completion details again before edit should work
Checking for completion details before edit should work
Checks a type reference node as an expression.
Checks an expression and returns its type.
Checks for export * conflicts
Checks if 'source' is related to 'target' (e.g.: is a assignable to).
Checks if `value` is classified as an `Array` object.
Checks if given node is a source file level declaration (not nested in module/function).
Checks if node ends with 'expectedLastToken'.
Checks the type annotation of the parameters of a function/method or the constructor of a class as expressions
Class and interface types (TypeFlags.Class and TypeFlags.Interface)
Class and property decorators do not have a third effective argument.
Class at constructor site need to be shown as constructor apart from property,method, vars
Class declaration has name which is not local.
Class or Interface implemented/extended is inaccessible
Class references should work across file and not find local variables.
Class, interface or literal instance members
Class/Interface type parameter
Class/Method/ConstructSignature
Classes can't be nested.
Classes need to be declared at the top level scope, so we declare all the classes that will be used by the tests below, instead of inlining them.
ClassificationTypeNames
Clauses in switch statement
Clean up source map data that will be used in baselining
Clear out all the inference results from the last time inferTypeArguments was called on this context
Clear out any cached state about the last node we found.
Clear out bug descriptions
Clear out the text the scanner is pointing at, so it doesn't keep anything alive unnecessarily.
Clear resolved return type we possibly got from cloneSignature
Clear the flags that are produced by aggregating child values.
Clears all effects from the media pipeline.
Client-initiated request message
Clone the type name and parent it to a location outside of the current declaration.
Closes a text stream.
Closes an output stream and forces the sent data to display.
Closing file should trigger re-reading the file content from disk.
Collect, test, and sort the fileNames
Column number in the .js file.
Column number in the .ts file.
Column offset from prev read jsColumn
Combinations of function, class, enum and module
Combine value and initializer
Combines two or more arrays.
Combining both forms of destructuring,
Comma operator in fuction arguments and return
Command line processing ///
Command-line parameter tests
Comment below multi-line 'if' condition formatting
Comments should be indented
Compare the length so we filter out strict superstrings of the symbol we are looking for
Compile and execute the test
Compiler options for compilation
Compiler ran successfully.
Completely ignore indentation for string writers.
Completion list should not be available within comments
Completion list shouldn't be present in argument name position
Completion not allowed inside comments, bail out if this is the case
Completion should work inside certain JsDoc tags.
Compute all the completion symbols again.
Compute the meaning from the location and the symbol it references
Cond is a boolean type variable
Cond is a number type variable
Cond is a string type variable
Cond is an any type variable
Cond is an object type variable
Condition known to be false
Condition known to be true
Conditional global UMD exports
Configuration file name (if any)
Configuration file watcher
Conflict markers must be at the start of a line.
Connects a COM object's event sources to functions named with a given prefix, in the form prefix_event.
Consider 'Expression'.
Consider the case of matching SiUI against SimpleUIElement.
Consider the original indentation from the beginning of the line up to the indent position (or really the token position)
Consider the property name '"0xF00D"'.
Constant value of enum member
Construct expression of type where apparent type has a construct signature with 0 arguments
Construct expression of type where apparent type has a construct signature with 1 arguments
Construct expression of void returning function
Construct expression where constructor is of type 'any' with no parentheses
Construct expression with no parentheses for construct signature with 0 parameters
Construct signature or constructor type write new Signature
Construct signatures can't be optional
Construct signatures of type
Constructor declaration
Constructor function property access
Consume leading spaces
Consume more spaces after asterisk
Consume the assignment and return.
Consume the queue and trigger the callbacks
Container is either a class declaration or the declaration is a classDeclaration
Containing union or intersection type for synthetic property
Contains declaration emit diagnostics
Contains information about the current URL.
Contains the anchor portion of the URL including the hash sign (#).
Contains the code and errors of a compilation and some helper methods to check its status.
Contains the hostname and port values of the URL.
Contains the hostname of a URL.
Contains the pathname of the URL.
Contains the protocol of the URL.
Contains the reference paths that needs to go in the declaration file.
Contains the title of the document.
Content of this field should never be used directly - use getResolvedModuleFileName/setResolvedModuleFileName functions instead
Contextual type by the numeric index type of the contextual type
Contextual types have been assigned
Contextual typing for parenthesized substitution expressions in tagged templates.
Contextually type the default arg using the function's contextual type
Contextually type the default arg with the type annotation
Contextually type the parameter even if there is a return annotation
Contiguous things should also be preferred
Continue to the next symbol table
Continue with next line
Control characters in text
Control flow statements with blocks
Convert the location to be one-based.
Convert to relative path
Converts A string to an integer.
Converts a Date object to a number.
Converts a Date object to a string or number.
Converts a Date object to a string.
Converts a JavaScript Object Notation (JSON) string into an object.
Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
Converts a date and time to a string by using the current or specified locale.
Converts a date to a string by using the current or specified locale.
Converts a number to a string by using the current locale.
Converts a number to a string by using the current or specified locale.
Converts a string to a base-64 encoded ASCII string.
Converts a string to a floating-point number.
Converts a time to a string by using the current or specified locale.
Converts all alphabetic characters to lowercase, taking into account the host environment's current locale.
Converts all the alphabetic characters in a string to lowercase.
Converts all the alphabetic characters in a string to uppercase.
Copied from the compiler sources
Copies vararg arrays correctly
Copyright (c) 2012 Ecma International.
Copyright (c) Microsoft Corporation.
Correct: return Bar.a
Could be the try-block, or the finally-block.
Could not find a symbol e.g. unknown identifier
Could not find this file in the old program, create a new SourceFile for it.
Count an error generated from tests262-harness folder.This should only apply for test262
Count only the match that match the same MatchKind
Count only the references in local files.
Count up all errors that were found in files other than lib.d.ts so we don't miss any
Create a compilerHost object to allow the compiler to read and write files
Create a new Services Adapter
Create a new instance of the compiler with default settings and lib.d.ts, then typecheck
Create a new source file for it.
Create a temporary variable with a unique unused name.
Create a tree for the new text, in a non-incremental fashion.
Create a tree for the new text, in an incremental fashion.
Create folders if needed
Create map between fileName and its content for easily looking up when resolveReference flag is specified
Create the emit resolver outside of the "emitTime" tracking code below.
Create the language service files
Create the language service host to allow the LS to communicate with the host
Created for signature assignment check
Creates a COM object.
Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
Creates a TextRange object for the element.
Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
Creates a comment object with the specified data.
Creates a deep clone of an EntityName, with new parent pointers.
Creates a map from the elements of an array.
Creates a new Generator function.
Creates a new Promise.
Creates a new cell in the table row, and adds the cell to the cells collection.
Creates a new document.
Creates a new function.
Creates a new rejected promise for the provided reason.
Creates a new resolved promise .
Creates a new resolved promise for the provided value.
Creates a new row (tr) in the table, and adds the row to the rows collection.
Creates a scanner over a (possibly unspecified) range of a piece of text.
Creates a shallow, memberwise clone of a node.
Creates a text string from the specified value.
Creates an array from an array-like object.
Creates an array from an array-like or iterable object.
Creates an array from an iterable object.
Creates an attribute object with a specified name.
Creates an empty caption element in the table.
Creates an empty tBody element in the table.
Creates an empty tFoot element in the table.
Creates an instance of the element for the specified tag.
Creates an object that has the specified prototype, and that optionally contains specified properties.
Current character is known to be a backslash.
Current directory is needed for rwcRunner to be able to use currentDirectory defined in json file
Current position (end position of text of current token)
Current position data
Current source map file and its index in the sources list
Currently we only support setting the cancellation token when getting diagnostics.
Cursor is inside a JSX self-closing element or opening element
DECLARATION AND STATEMENT TYPE CHECKING
Decide whether to show signature help
Decided to enforce a semicolon after declarations
Declaration file wont get emitted because there are errors in declaration file
Declaration file, use declaration file name
Declaration is not visible
Declaration module describing the TypeScript Server protocol
Declarations associated with this symbol
Declare a 'member' in case it turns out the container was an ES5 class
Declare a 'member' y on x if x was a function.
Declare the method/property
Declared binding element name
Declared call signatures
Declared construct signatures
Declared numeric indexing info
Declared parameter name
Declared property name
Declared string indexing info
Declared variable name
Declares a Symbol for the node and adds it to symbols.
Decorated class that contains a binding to itself inside of the class body.
Decorators are always applied outside of the body of a class or method.
Decorators are resolved at the class declaration.
Decrements a range input control's value by the value given by the Step attribute.
Deeply instantiated generics
Default action is to set on first statement
Default go to parent to set the breakpoint
Default import get alias
Default is UTF-8 with no byte order mark
Default to parent node
Default value is false.
Default value is the OS line delimiter.
Default value is true
Default value is true.
Defensive error detection...
Defer to unioning the return types so we get a) downstream errors earlier and b) better Salsa experience
Deferred resolution of members is handled by resolveObjectTypeMembers
Defines an increment or jump between values that you want to allow the user to enter.
Defines space handling after a binary operator.
Defines space handling after a comma delimiter.
Defines space handling after a semicolon in a for statement.
Defines space handling after function keyword for anonymous functions.
Defines space handling after keywords in control flow statement.
Defines space handling after opening and before closing non empty brackets.
Defines space handling after opening and before closing non empty parenthesis.
Defines the maximum, or "done" value for a progress element.
Defines whether an open brace is put onto a new line for control blocks or not.
Defines whether an open brace is put onto a new line for functions or not.
Definitely not a parenthesized arrow function.
Definition response message.
Delaying the type check of the body ensures foo has been assigned a type.
Delete the actual file in case it fails
Delete the baseline-report.html file if needed
Deletes the caption element and its contents from the table.
Deletes the tFoot element and its contents from the table.
Deletes the tHead element and its contents from the table.
Delta value should be zero when the node explicitly prevents indentation of the child node
Derived class accessing protected members
Derived class making protected members public
Derived class overriding protected members
Derived from the 10.1.1 UTF16Encoding of the ES6 Spec.
Derived1 is assignable to, but not a subtype of, Base
Derived2 is a subtype of Base that is not assignable to Derived1
Describe the actual test cases.
Describe/it definitions
Designates a form that is not validated when submitted.
Destructuring pattern represented by type (if any)
Detect if the mapper implies an inference context.
Determine if two object types are related by structure.
Determines the smallest scope in which a symbol may have named references.
Determines whether a node is a property or element access expression for super.
Determines whether a specified property is enumerable.
Determines whether a supplied number is finite.
Determines whether all the members of an array satisfy the specified test.
Determines whether an array includes a certain element, returning true or false as appropriate.
Determines whether an object exists in another object's prototype chain.
Determines whether an object has a property with the specified name.
Determines whether the specified callback function returns true for any element of an array.
Determines whether two strings are equivalent in the current locale.
Determining the new and old end is also pretty simple.
Diagnostics were produced and because of them no code was generated.
Diagnostics were produced and outputs were generated in spite of them.
Didn't appear to actually be a parenthesized arrow function.
Didn't find a match, just add this child to the list.
Didn't find a symbol with this name.
Different declarations have different containers, bail out
Directly using names from this module
Directories to search for package.json, bower.json and other typing information
Directory watcher to monitor source file addition/removal
Disallow rename for elements that are defined in the standard TypeScript library.
Disallowing of optional property assignments happens in the grammar checker.
Disconnects a COM object from its event sources.
Display name of the item to be renamed.
Display parts of the parameter.
Display parts of the symbol (similar to quick info).
Display-part writer helpers
Displays help information for the given command identifier.
Ditch any existing LS children we may have created.
Do not access directly.
Do not call emit directly.
Do not check for initializers in an ambient context for parameters.
Do not cross function boundaries.
Do not emit multiple used import statements
Do not emit the LHS let declaration yet, because it might contain destructuring.
Do not emit unused import
Do not get scoped name, just the name of the symbol
Do not include the library in the baselines to avoid noise
Do not perform validation of output file name in transpile scenarios
Do not recursively call isTypeNode on the parent.
Do not use hasDynamicName here, because that returns false for well known symbols.
Do not use this function with external modules as it is not supported.
Do type argument local checks only if referenced type is successfully resolved
Documentation associated with symbol.
Documentation of the parameter.
Documentation strings for the symbol.
Does not return until the ENTER key is pressed.
Doesn't match export visibility, but it's in a different parent, so it's ok
Doesn't work, but should
Doing this helps us out in two ways.
Don't actually write any files since we're just getting diagnostics.
Don't adjust indentation on the same line of a script block
Don't bother with newlines/whitespace.
Don't cross function boundaries.
Don't emit empty expressions
Don't emit empty strings
Don't include signature if node is the implementation of an overloaded function.
Don't indent multi-line strings
Don't initialize seen unless we have at least one element.
Don't keep this comment.
Don't know how to add this.
Don't report another error if it would just be at the same position as the last error.
Don't report errors though.
Don't truncate typeToString result
Don't validate for-in initializer as it is already an error
Done scanning param help string - next tag found
Dont add reference path to this file if it is a bundled emit and caller asked not emit bundled file path
Dont allow config files since we are compiling existing source options
Dont emit for javascript file
Dont support reading mappings that dont have information about original source and its line numbers
Dont support reading mappings that dont have information about original source span
Dotted property access of property that doesn't exist on value's apparent type
Dotted property access of property that exists
Dotted property access of property that exists on value's apparent type
Double bind case is only required if node is decorated.
Downleveled emit exponentiation operator using Math.pow
Drop these before re-joining the parts.
Due to how we emit async functions, we need to specialize the emit for an async method that contains a `super` reference.
During lookahead parsing, we will often create a node.
E.g. we don't want brace completion inside string-literals, comments, etc.
ECMA262: 15.2.1.1 It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries.
EOF, push whatever remains
ERROR - no super call allowed
ERROR - still need 'y'
ERROR - super call required
ERROR: C should not be visible
ERROR: Return type of method from exported interface has or is using private type ''connect'.connectModule'.
ES2015 Or ESNext By-feature options
ES6 allows these as class elements.
EXPRESSION TYPE CHECKING
Each descriptor object describes a data property or an accessor property.
Each file contributes into common source file path
Each of these corresponds to a substitution expression and a template literal, in that order.
Eat leading whitespace
Eat up all modifiers, but hold on to the last one in case it is actually an identifier
Eat up all modifiers, but hold on to the last one in case it is actually an identifier.
Edit and bind and resolve only var decl
Either found lineBreak or non whiteSpace
Either the location is on the right of a property access, or on the left and the right is missing
Either ways do not fail, and fallback to the English diagnostic strings.
Either we didn't find an appropriate list, or the list must contain us.
Either we don'd have a node, or we have a node at the position being asked for.
Element Attributes has zero properties, so the element attributes type will be the class instance type
Element access expression
Element access expression with a number
Element access expression with a punctuated key
Element ends after the change range.
Element ends in the change range.
Element types in tuple element type list
ElementAccessExpressions can only contain one expression.
Elements in a heritage clause
Elements in source file
Emit JSX-preserve as default when no --jsx flag is specified
Emit a comma to separate for all but the first element.
Emit all the directive prologues (like "use strict").
Emit an assignment to a given identifier, 'name', with a given expression, 'value'.
Emit an attribute name, which is quoted if it needs to be quoted.
Emit an name/value pair for an attribute (e.g. "x: 3")
Emit column number etc
Emit comma to separate the entry
Emit comments associated with node that will not be emitted into JS file
Emit comments for everything else.
Emit even when used just in function type
Emit global only usage
Emit helpers from all the files
Emit identifier as an identifier
Emit leading space to separate comment during next comment emit
Emit name if one is present
Emit name if one is present, or emit generated name in down-level case (for export default case)
Emit nothing for a missing ID
Emit on each source file
Emit only if this module is non-ambient.
Emit reference in dts, if the file reference was not already emitted
Emit references corresponding to each file
Emit static property assignment.
Emit the call to __awaiter.
Emit the call to __decorate.
Emit the constructor overload pinned comments
Emit the leading comments only if the parent's pos doesn't match because parent should take care of emitting these comments
Emit the signature and body for the inner generator function.
Emit the trailing comments only if the parent's end doesn't match
Emit the trailing comments only if the parent's pos doesn't match because parent should take care of emitting these comments
Emit these references as follows
Emit this line from the original file
Emit trailing comments at the position.
Emit type literal signature return type only if specified
Emits the JavaScript and declaration files.
Emitting a '+ ""' has no semantic effect for middles and tails.
Empty binding pattern of binding element, set breakpoint on binding element
Empty line or code line, terminate current subfile if there is one
Empty out the template stack for reuse.
Empty string - make sure we write empty line
Enables basic storage and retrieval of dates and times.
Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.
Encode 5 bits at a time starting from least significant bits
Encode the last recordedSpan before assigning new
Encode the sourceMap into the sourceMap url
Encodes a text string as a valid component of a Uniform Resource Identifier (URI).
Encoding for sourcemap span
End Debugger Test Code
Ensure 'value' is not of type 'any' by invoking it with type arguments.
Ensure line is indented correctly and doesn't jump up to previous line on semi-colon
Ensure rules are initialized and up to date wrt to formatting options
Ensure that the generated code is correct
Ensure that there is a corresponding token to match ours.
Ensure we are actually changing something - the user probably wants to know that the update failed.
Ensures that there exists a declared identifier whose value holds the given expression.
Enter in open string literals should not affect formating
Enter' should smart indent such that the current line maintains its indentation
Enters lines of text at the current caret position
Enters text as if the user had pasted it
Entry points from fourslash.ts
Enum computed members are not propagated
Enum object type is anonymous with properties of the enum type and numeric indexer
Enum type is a subtype of Number
Enum with computed member initializer of type 'any'
Enum with computed member initializer of type Number
Enum with computed member initializer of type number
Enum with computed member intializer of other types
Enum with computed member intializer of same enum type
Enum with constant members followed by computed members
Enum with initializer in all declarations with constant members with the same root module
Enum with initializer in only one of three declarations with constant members with the same root module
Enum with initializer in only one of two declarations with constant members with the same root module
Enum with no initializer in either declaration with constant members with the same root module
Enum with only computed members
Enum with only computed members across 2 declarations with the same root module
Enum with only constant members
Enums with same name but different root module
Equal to approximately 1.79E+308.
Equal to approximately 5.00E-324.
Erased version of signature (deferred)
Err - not implemented item
Error  1      The property 'static' does not exist on value of type ''.
Error - as this is keyword that is not allowed as identifier
Error - indexer doesn't match
Error 1 Type 'Object' does not satisfy the constraint 'T' for type parameter 'U extends T'.
Error : not a constant enum expression
Error Duplicate identifier
Error LocalInterface is inaccisble
Error TS111: Cannot convert Z to Y
Error as declaration of var would cause a write to the const value
Error as this does not resolve to the user defined '_arguments'
Error as this doesnt not resolve to user defined _super
Error as this doesnt not resolve to user defined _this
Error because 0.1 is not a constant
Error because body is not ambient and this overload is
Error because constraint V doesn't match
Error because string and any don't match
Error because type parameter arity doesn't match
Error but shouldn't be
Error expected on b or c
Error for calling an instance
Error for no applicable overload (object type is missing a and b)
Error for no call signature
Error for referencing own type parameter
Error for using interface name as a value.
Error from referring constant enum in any other context than a property access
Error here for extending B and D
Error if some overloads have a flag that is not shared by all overloads.
Error message if item can not be renamed.
Error on equals token which immediate precedes the initializer
Error on redeclarations
Error only a namespace
Error recovery for unclosed string literals
Error to declare function in block scope
Error to find name foo
Error to specify --mapRoot or --sourceRoot without mapSourceFiles
Error x is protected in B3 but public in A3
Error, A not valid argument for U
Error, B1 doesn't derive from A1
Error, __proto__ not defined
Error, access must be through C or type derived from C
Error, any does not satisfy constraint B
Error, binding pattern can't be optional in implementation signature
Error, but should be allowed
Error, but shouldn't be
Error, can't be optional
Error, can't have initializer
Error, cannot reference type in typeof
Error, constructor return types differ
Error, destructuring declaration not allowed in ambient context
Error, fourth 'default' clause.
Error, id required but missing
Error, incompatible toString
Error, initializer for y must be string
Error, isn't accessed through an instance of the enclosing class
Error, name of wrong type
Error, neither within their declaring class nor classes derived from their declaring class
Error, no Base constructor function
Error, no constructors with three type arguments
Error, no function body
Error, no initializer
Error, no narrowing occurred
Error, no type arguments
Error, no x and y in target
Error, no x in target
Error, no y in target
Error, not array type
Error, not instantiated can not be used as var
Error, parent was public
Error, recursive reference with wrapped T
Error, redefined in a subclass, can only be accessed in the declaring class or one of its subclasses
Error, rest element cannot have initializer
Error, rest must be last element
Error, rest parameter can't have accessibilityModifier
Error, rest parameter must be array type
Error, since y is not exported
Error, third 'default' clause
Error, type any narrowed by primitive type check
Error, we picked the first overload and errored when type checking the lambda body
Error, wrong number of arguments
Error, x is not public
Error, x is protected in A1 but public in B1
Error: Can't convert B to A
Error: Cannot redeclare block-scoped variable 'C'.
Error: Invalid 'new' expression.
Error: Invalid use of 'arguments' in strict mode.
Error: Overloads cannot differ only by return type
Error: Supplied parameters do not match any signature of call target
Error: Unreachable code detected.
Error: bar should not be visible
Error: early syntax error using ES7 SimpleUnaryExpression on left-hand side without ()
Error: foo should not be visible here
Error: foo should not be visible here either
Error: incorrect type on left-hand side
Error: outer not visible
Error: property 'x' is missing from 'a'
Errors on fifth-seventh
Errors, accessibility modifiers must precede static
Errors, multiple accessibility modifier
Errors: redeclaration
Escape the name in the "require(...)" clause to ensure we find the right symbol.
Evaluates JavaScript code and executes it.
Evaluations are asssignable to boolean.
Event message for "configFileDiag" event type.
Event message for "syntaxDiag" and "semanticDiag" event types.
Event-specific information
Everything after the current directory is relative
Everything declared here should be cleared out in the "after" callback.
Everything until that point can be emitted as part of the initial object literal.
Exactly the same as above in AisIn1_1_1
Exclude these flags when parsing a Type
Executes a command on the current document, current selection, or the given range.
Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.
Expect errors when the results type is different form the second operand
Expect to have compiler errors Missing the second operand
Expected 1: 'a' is not exported
Expected error: Values of type null and void cannot be compared
Explicit different types
Export * in some sort of block construct
Export assignment in some sort of block construct
Export assignments do not create name bindings outside the module
Export context (initialized by binding)
Exported ES6 module member
Exported class comment
Exported members/ambient module elements (exception import declaration) are visible if parent is visible
Exported namespace marker (see comment in declareModuleMember in binder)
Exported symbol associated with this symbol
Exported type marker (see comment in declareModuleMember in binder)
Exported value marker (see comment in declareModuleMember in binder)
Exported variable 'y' has or is using private type 'foo.C2'.
Exposed only for testing.
Exposes the read-only input stream for the current script.
Exposes the write-only error output stream for the current script.
Exposes the write-only output stream for the current script.
Expr type assignable to target type
Expr type not assignable to target type
Expr1 and Expr2 are literals
Expression - set breakpoint in it
Expressions in argument list
Extend interface to contain foo returning type T
Extended base methods
External module name in an import declaration
Extra checks are to avoid reporting multiple errors relating to the "abstractness" of the node.
Extract comments from text prefixing the token closest following `pos`.
Extract module or enum members
Failed to find any common path component
Fake the connection between the client and the server
Fall back to preserve if None was specified (we'll error earlier)
Fall through and acquire it from the registry.
Fall through if it is not a special property assignment
Fallback, try to resolve the target paths as well
False will mean that node is not classified and traverse routine should recurse into node contents.
Fancy name for 'blue'
Fancy name for 'pink'
Fast check for the ascii range.
Fast convert for the ascii range.
File BOM detection tests
File containing highlight spans.
File containing text span.
File level diagnostics reported by the binder.
File pattern matching tests
File-specific options (name/value pairs)
FileName header + content
Filename can be non-ts file.
Fill in amd-dependency tags
Filter down to the errors in the file
Filter private properties
Filter the ones in lib and other files.
Filters out completion suggestions for named imports or exports.
Filters out completion suggestions from 'symbols' according to existing JSX attributes.
Finally write the changes to disk.
Finally, in this case, runtime reflection is (much) faster.
Find a file with the flag emitThisFile turned on
Find a source text offset that is safe for lexing tokens at the given position.
Find containing block which is either Block, ModuleBlock, SourceFile
Find file to be emitted
Find group of type arguments for type parameters with the same declaring container.
Find original source text, since we need to emit the raw strings of the tagged template.
Find the component that differs
Find the enclosing scope context from a position inside a script AST.
Find the first class-like declaration and try to get the construct signature.
Find the first computed property.
Find the first unique 'name_n', where n is a positive number
Find the index of "/" after website.com so the root can be http://www.website.com/ (from existing http://)
Find the name of the external module
Find the name of the module alias, if there is one
Find the node where completion is requested on.
Find the symbol with the matching entry name.
Finds the first substring match in a regular expression search.
Finds the highest element in the tree we can find that starts at the provided position.
Fine since are typed any.
Fine since this consists of a single throw statement.
Fine since we are typed any and return null
Fine since we are typed any and return undefined
Fine since we are typed void and return null
Fine since we are typed void and return undefined
Fine since we are typed void.
Fine since we consist of a single throw statement.
Fine, since we have a return statement somewhere.
Firefox has Object.prototype.watch
Fires immediately after the browser loads the object.
Fires immediately after the client loads the object.
Fires immediately before the activeElement is changed from the current object to another object in the parent document.
Fires immediately before the object is set as the active element.
Fires on the source object continuously during a drag operation.
Fires on the source object when the user releases the mouse at the close of a drag operation.
Fires on the source object when the user starts to drag a text selection or selected object.
Fires on the target element continuously while the user drags the object over a valid drop target.
Fires on the target element when the user drags the object to a valid drop target.
Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
Fires when a FORM is about to be submitted.
Fires when an error occurs during object loading.
Fires when the activeElement is changed from the current object to another object in the parent document.
Fires when the contents of the object or selection have changed.
Fires when the current selection changes.
Fires when the object is set as the active element.
Fires when the object loses the input focus.
Fires when the object receives focus.
Fires when the selection state of a document changes.
Fires when the state of the object has changed.
Fires when the user aborts the download.
Fires when the user clicks the Stop button or leaves the Web page.
Fires when the user clicks the object with either mouse button.
Fires when the user clicks the right mouse button in the client area, opening the context menu.
Fires when the user double-clicks the object.
Fires when the user moves the mouse over the object.
Fires when the user moves the mouse pointer into the object.
Fires when the user moves the mouse pointer outside the boundaries of the object.
Fires when the user presses a key.
Fires when the user presses an alphanumeric key.
Fires when the user releases a key.
Fires when the user releases a mouse button while the mouse is over the object.
Fires when the user repositions the scroll box in the scroll bar on the object.
Fires when the user resets a form.
Fires when the wheel button is rotated.
First 3 are for simple harness validation
First character of the definition.
First character of the text span to edit.
First check if it was a comma.
First check if the segment matches as is.
First check if there is new tsconfig file added for inferred project roots
First check if we already have indentation info in our indentation bag
First check to see if the script kind was specified by the host.
First consume leading white space
First declaration - include let keyword
First get and report any syntactic errors.
First infer to each type in union or intersection that isn't a type parameter
First metadata marker in the file
First overload of g should type check just like f
First resolution of this library
First see if the return types are compatible in either direction.
First time around, emit all files
First try the entire locale, then fall back to just language if that's all we have.
First try to see if the user specified a return type on the get-accessor.
First value declaration of the symbol
First we bind declaration nodes to a symbol if possible.
First we break up the pattern given by dots.
First, add any spans in the source to the target.
First, check if the result is already available in the global cache.
First, do the simple check if we have a YieldExpression (production '5').
First, we have to see if this position actually landed in a comment.
Fix up parent pointers since we're going to use these nodes before we bind into them
Flags enum to track count of temp variables and a few dedicated names
Flags that dictate what parsing context we're in.
Flags we want to propagate to the result if they exist in all source symbols
FlowLabel represents a junction with multiple possible preceding control flows.
For IDE scenarios we may have an incomplete call, so a trailing comma is tantamount to adding another argument.
For JavaScript files, we don't want to report the normal typescript semantic errors.
For TypeScript, the only time to emit with a '.jsx' extension, is on JSX input, and JsxEmit.Preserve
For a NumericLiteral, the stored value is the toString() representation of the number.
For a binding pattern, check contained binding elements
For a binding pattern, validate the initializer and exit
For a constructor parameter decorator, the `propertyKey` will be `undefined`.
For a constructor, the type is always the type of the static side of the class.
For a decorator or the first argument of a tagged template expression we return undefined.
For a decorator, we use the expression of the decorator for error reporting.
For a deletion, newText is empty.
For a given function, creates a bound function that has the same body as the original function.
For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body
For a parameter of a set accessor, use the type of the get accessor if one is present
For a the first argument of a tagged template expression, we use the template of the tag for error reporting.
For a type parameter, return the base constraint of the type parameter.
For an async function, the return type will not be void, but rather a Promise for void.
For each root file, note the project that it roots.
For error recovery purposes.
For es6 and higher we can emit the expression as is.
For example "SiUI" against "SimpleUI".
For example, in checker.ts (around 750k) we only have around 600 of these constructs.
For example, the absolute value of -5 is the same as the absolute value of 5.
For example, this is utilized when feeding in a result to Object.defineProperty.
For external modules symbol represent local symbol for an alias.
For get/set members, we check for (identifier,identifier) since get/set don't have tokens and they are represented as just an identifier token.
For more information, see filter.
For more information, see whatToShow.
For now this is written using TypeScript, because sys is not available when running old test cases.
For objects in memory, pass a zero-length string.
For other expressions this produces undefined.
For properties, variables and local vars: show the type
For recovery and error reporting purposes, return an incomplete declaration.
For rules on serializing type annotations, see `serializeTypeNode`.
For single line comments, include 1 more character (for the newline)
For some reason module blocks are left out of the visit block traversal
For string literals we have two additional chars for the quotes
For target ES6 and above, we can emit classDeclaration as is.
For targeting below es6, emit functions-like declaration including arrow function using function keyword.
For testing purposes only.
For the identifiers/this/super etc get the type at position
For the rules on serializing the type of each parameter declaration, see `serializeTypeOfDeclaration`.
For these we have to add a space and shouldn't follow any user options.
For when we encounter a semicolon in a class declaration.
ForIn/ForOf case - use site should not be used in expression part
Forces the script to stop immediately, with an optional exit code.
Forget all the registered shims
Format and format on key response message.
Formatting will be applied to the last two lines.
Found start of another tag
Found the parameter we are looking for consume white spaces
Found the right node.
Fourslash insert tests/cases/fourslash into inputFile.unitName so we will properly append the same base directory to refFile path
Fourslash support is required.
Fresh object literal type
From within an async function you can return either a non-promise value or a promise.
Full display name of item to be renamed.
Full type definitions are not yet officially supported.
Fully checks a candidate, with an dotted container, against the search pattern.
Fully qualified path of the host executable.
Fully type check a source file and collect the relevant diagnostics.
Function and class expression bodies are checked after all statements in the enclosing body.
Function expressions are local
Function implementation whose parameter types are not assignable to all corresponding overload signature parameters
Function implemetnation with non -void return type annotation with no return
Function names are read-only and can not be changed.
Function overload signature with rest param followed by non-optional parameter
Function overload with different name from implementation signature
Function overload with rest param and another with only an optional parameter
Function overload with rest param and another with only optional parameters
Function overloads should be highlighted together.
Function overloads that differ by accessibility
Function overloads that differ only by type parameter constraints
Function overloads that differ only by type parameter constraints where constraints include infinitely recursive type reference
Function overloads that differ only by type parameter name
Function overloads that differ only by type parameter name when used in parameter type annotations
Function overloads where return types are different infinitely recursive type reference
Function overloads where return types are not all subtype of implementation return type
Function overloads which use initializer expressions
Function overloads with differing ambience
Function overloads with differing export
Function overloads with fewer params than implementation signature
Function returns Value.Unknown if actual indentation for node should not be used (i.e because node is nested expression)
Function returns Value.Unknown if indentation cannot be determined
Function returns true when the parent node should indent the given child by an explicit rule
Function signature with initializer referencing other parameter to the left
Function signature with initializer referencing other parameter to the right
Function signature with optional parameter, no type annotation and initializer has initializer's type
Function signature with optional parameter, no type annotation and initializer has initializer's widened type
Function signature with parameter initializer referencing in scope local variable
Function type literal
Function/Class (export default declaration)
FunctionExpression f with no return type annotation and directly references f in its body returns any
FunctionExpression f with no return type annotation and indirectly references f in its body returns any
FunctionExpression with no return type annotation and no return statement returns void
FunctionExpression with no return type annotation and returns a constrained type parameter type
FunctionExpression with no return type annotation and returns a number
FunctionExpression with no return type annotation and returns a type parameter type
FunctionExpression with no return type annotation and returns null
FunctionExpression with no return type annotation and returns undefined
FunctionExpression with no return type annotation with multiple return statements with identical types
FunctionExpression with no return type annotation with multiple return statements with one a recursive call
FunctionExpression with no return type annotation with multiple return statements with subtype relation between returns
FunctionExpression with no return type annotation with multiple return statements with unrelated types
FunctionExpression with non -void return type annotation with a single throw statement
Functionality for compiling TypeScript code
Functions with with an explicitly specified 'void' or 'any' return type don't need any return expressions.
G1 is return type of prototype property.
Generally the 'else' keyword is second-to-last, so we traverse backwards.
Generates string indicies propertly
Generic Method declaration
Generic and non - generic overload where generic overload is the only candidate when called without type arguments
Generic and non - generic overload where non - generic overload is the only candidate when called with type arguments
Generic call with argument of function type whose parameter is not of type parameter type but body/return type uses type parameter
Generic call with argument of function type whose parameter is of type parameter type
Generic call with argument of generic function type
Generic call with multiple arguments of function types that each have parameters of different generic type
Generic call with multiple arguments of function types that each have parameters of the same generic type
Generic call with multiple parameters of generic type passed arguments with a single best common type
Generic call with multiple parameters of generic type passed arguments with multiple best common types
Generic call with multiple parameters of generic type passed arguments with no best common type
Generic call with multiple parameters of generic type where one argument is of type 'any'
Generic call with multiple type parameters and only one used in parameter type annotation
Generic call with parameters but none use type parameter type
Generic class and interface types
Generic construct expression with no parentheses
Generic instantiation cache
Generic overloads with constraints called with type arguments that do not satisfy the constraints
Generic overloads with constraints called without type arguments but with types that satisfy the constraints
Generic overloads with constraints tagged with types that satisfy the constraints
Generic overloads with differing arity called with type argument count that doesn't match any overload
Generic overloads with differing arity called with type arguments matching each overload type parameter count
Generic overloads with differing arity tagging with argument count that doesn't match any overload
Generic overloads with differing arity tagging with arguments matching each overload type parameter count
Generic tag with argument of function type whose parameter is not of type parameter type but body/return type uses type parameter
Generic tag with argument of function type whose parameter is of type parameter type
Generic tag with argument of generic function type
Generic tag with multiple arguments of function types that each have parameters of different generic type
Generic tag with multiple arguments of function types that each have parameters of the same generic type
Generic tag with multiple parameters of generic type passed arguments with a single best common type
Generic tag with multiple parameters of generic type passed arguments with multiple best common types
Generic tag with multiple parameters of generic type passed arguments with no best common type
Generic tag with multiple parameters of generic type where one argument is of type 'any'
Generic tag with multiple type parameters and only one used in parameter type annotation
Generic tag with one parameter
Generic tag with parameter which does not use type parameter
Generic type reference
Get a fresh cache of the host information
Get a list of files in the program
Get a list of root file names that were passed to a 'createProgram'
Get a snapshot of the content of the file so we can make sure any formatting edits didn't destroy non-whitespace characters
Get a string based representation of a completion list entry details
Get accessor only, type of the property is the annotated return type of the get accessor
Get accessor only, type of the property is the inferred return type of the get accessor
Get all entities in the current scope.
Get an error when we assign a string to a number in both cases
Get and return the awaited type of the return type.
Get and set accessor with matching type annotations
Get and set accessor with mismatched type annotations
Get current indentation
Get files of supported extensions in their order of resolution
Get first non javascript function declaration
Get node at the location
Get occurrences only supports reporting occurrences for the file queried.
Get source file from normalized fileName
Get the breakpoint span in given sourceFile
Get the cleaned js doc comment text from the declaration
Get the corresponding JSDocTag node if the position is in a jsDoc comment
Get the declaration file path
Get the element instance type (the result of newing or invoking this tag)
Get the enclosing class that has the declaring class as its base type
Get the indent edit from the indentation info
Get the name to be display in completion from a given symbol.
Get the parent that is really on a different line from the self node
Get the pos after cleaning start of the line
Get the pos after consuming line breaks
Get the relative path
Get the span in the node based on its syntax
Get the text of the entire line the caret is currently at
Get the text to search for.
Get the token whose text contains the position
Get the type of the object or array literal and then look for property of given name in the type
Get the typing info from common package manager json files like package.json or bower.json
Get type from reference to class or interface
Get type from reference to named type that cannot be generic (enum or type parameter)
Get type from reference to type alias.
Get type of the symbol if this is the valid symbol otherwise get type at location
Gets TimeRanges for the current media resource that has been played.
Gets a collection of buffered time ranges.
Gets a collection of objects based on the value of the NAME or ID attribute.
Gets a count of how many times this collection has been modified.
Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.
Gets a flag that specifies whether playback is paused.
Gets a reference to the root node of the document.
Gets a substring beginning at the specified location and having the specified length.
Gets a type checker that can be used to semantically analyze source fils in the program.
Gets a value indicating whether the object currently has focus.
Gets a value that indicates whether standards-compliant mode is switched on for the object.
Gets all the diagnostics that aren't associated with a file.
Gets an object representing the document type declaration associated with the current document.
Gets emitted as C.I, which is the wrong interface
Gets information about whether the playback has ended or not.
Gets or sets a URL of an image to display, for example, like a movie poster.
Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
Gets or sets a flag to specify whether playback should restart after it completes.
Gets or sets a string containing a regular expression that the user's input must match.
Gets or sets a value that indicates whether to start playing the media automatically.
Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
Gets or sets meta-information to associate with httpEquiv or name.
Gets or sets the MIME type of a media resource.
Gets or sets the baseline URL on which relative links are based.
Gets or sets the character set used to encode the object.
Gets or sets the current playback position, in seconds.
Gets or sets the current rate of speed for the media resource to play.
Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
Gets or sets the end position or offset of a text selection.
Gets or sets the height of a canvas element on a document.
Gets or sets the height of the video element.
Gets or sets the intended media type of the media source.
Gets or sets the length of the array.
Gets or sets the optional alternative HTML script to execute if the object fails to load.
Gets or sets the path to the preferred media source.
Gets or sets the primary DLNA PlayTo device.
Gets or sets the starting position or offset of a text selection.
Gets or sets the version attribute specified in the declaration of an XML document.
Gets or sets the volume level for audio portions of the media element.
Gets or sets the width of a canvas element on a document.
Gets or sets the width of the video element.
Gets or sets whether the DLNA PlayTo device is available.
Gets the "awaited type" of a type.
Gets the "promised type" of a promise.
Gets the Float32 value at the specified byte offset from the start of the view.
Gets the Float64 value at the specified byte offset from the start of the view.
Gets the Int16 value at the specified byte offset from the start of the view.
Gets the Int32 value at the specified byte offset from the start of the view.
Gets the Int8 value at the specified byte offset from the start of the view.
Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.
Gets the URL for the document, stripped of any character encoding.
Gets the URL of the location that referred the user to the current page.
Gets the Uint16 value at the specified byte offset from the start of the view.
Gets the Uint32 value at the specified byte offset from the start of the view.
Gets the Uint8 value at the specified byte offset from the start of the view.
Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
Gets the classification and default behavior of the button.
Gets the current network activity for the element.
Gets the date that the page was last modified, if the page supplies one.
Gets the day of the week using Universal Coordinated Time (UTC).
Gets the day of the week, using local time.
Gets the day-of-the-month, using Universal Coordinated Time (UTC).
Gets the day-of-the-month, using local time.
Gets the default character set from the current regional language settings.
Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC).
Gets the effective argument expression for an argument in a call expression.
Gets the effective argument type for an argument in a call expression.
Gets the error node to use when reporting errors for an effective argument.
Gets the hours in a date, using local time.
Gets the hours value in a Date object using Universal Coordinated Time (UTC).
Gets the implementation object of the current document.
Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
Gets the length of the array.
Gets the length of this script snapshot.
Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.
Gets the milliseconds of a Date object using Universal Coordinated Time (UTC).
Gets the milliseconds of a Date, using local time.
Gets the minutes of a Date object using Universal Coordinated Time (UTC).
Gets the minutes of a Date object, using local time.
Gets the month of a Date object using Universal Coordinated Time (UTC).
Gets the month, using local time.
Gets the object that has the focus when the parent document has focus.
Gets the own property descriptor of the specified object.
Gets the root svg element in the document hierarchy.
Gets the seconds of a Date object using Universal Coordinated Time (UTC).
Gets the seconds of a Date object, using local time.
Gets the source associated with the media element for use by the PlayToManager.
Gets the time value in milliseconds.
Gets the type of object literal or array literal of destructuring assignment.
Gets the unencoded version of an encoded Uniform Resource Identifier (URI).
Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).
Gets the year using Universal Coordinated Time (UTC).
Gets the year, using local time.
Gets/sets the script mode - interactive(true) or batch(false).
Given a JSX element that is a class element, finds the Element Instance Type.
Gives lexical classifications of tokens on a line without any syntactic context.
Gives text range for definition.
Global class reference.
Global interface reference.
Global module reference.
Global options (name/value pairs)
Global variable reference.
Go through each clause in the switch statement, collecting the 'case'/'default' keywords.
Go to the correct file
Go to while keyword and do action instead
Go up and add our parent.
Goes to single --out file
Grammar check for checking only related to constructorDeclaration
Grammar check for duplicate default clauses, skip if we already report duplicate default clause
Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.
Grammar checking accessors
Grammar checking for SyntaxKind.Block
Grammar checking for computedPropertyName and shorthandPropertyAssignment
Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration
Grammar checking for withStatement
Grammar checking heritageClause inside class declaration
Greeting should be of type string
Handle cancellation exceptions
Handle catch clause variables
Handle export default expressions
Handle for 0.25s wait timer to trigger recompilation
Handle post-keystroke formatting
Handle prototype property
Handle the case where the next line is moved to be the end of this line.
Handle the case where token2 is moved to the new line.
Handle variable, parameter or property
Have compiler check that we get the correct types
Have never seen this file with these settings.
Helper class representing a path from a root ast node to a (grand)child ast node.
Helper function to decrease the indent if we previously indented.
Here the multiple overloads come from multiple bases.
Here the multiple overloads come from multiple merged declarations, so we do not report errors.
Here the multiple overloads come from multiple merged declarations.
Here we check if alternative name was provided for a given moduleName and return it if possible.
Here, we test whether 'ToString(ToNumber(name))' is exactly equal to 'name'.
Heritage clause is written by user so it can always be named
Heritage clauses for a class or interface declaration.
Highlights the difference between array literals and object literals
Highlights the input area of a form element.
How many characters from the start of this line the error starts at (could be positive or negative)
How many characters of the error are on this line (might be longer than this line in reality)
However, local types are only in scope in the function body.
However, not all symbols will end up in any of these tables.
However, occasionally, they can be different.
However, string literal values aren't.
However, that would not catch the error in the following case.
However, this matters for the case where the call is correct.
I.e all functions at module scope are 'top level'.
ILanguageServiceShimHost implementation
ILogger implementation
Ideally the following shouldn't show up since they're not types.
Ideally, a generated declaration file will have no errors.
Ideally, getTokenAtPosition should return a token.
Ideally, we would capture this.
Identical call signatures should generate an error.
Identifier   TypeAnnotation(opt)
Identifier references default import
Identifier references module export
Identifier references named import
Identifier references namespace export
Identifiers and qualified names may be type nodes, depending on their context.
If "UIElement" isn't found as an exact, prefix.
If '-d' is enabled, check for emitter error.
If 'isExported' is true - then declaration must also be exported.
If 'node' is a CallExpression or a NewExpression, then its argument list is returned.
If 'node' is a parameter, the effective argument type is the number type.
If 'node.target' is a parameter declaration, the effective argument count is 3.
If 'node.target' is a property declaration, the effective argument count is 2.
If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.
If S has a property with the numerical name N, T is the type of that property.
If S is not empty, U has a property P of a union type of the types of P from each type in S.
If T is a function type with exactly one call signature, and if that call signature is non- generic, S is that signature.
If T is a union type, let U be the set of element types in T that have call signatures.
If a BOM is required, emit one
If a member contains nested objects, the nested objects are transformed before the parent object is.
If a rootDir is specified and is valid use it as the commonSourceDirectory
If a source file changes, mark it as unwatched and start the recompilation timer
If a symbol is a synthesized symbol with no value declaration, we assume it is a property.
If a tagged template expression lacks a tail literal, the call is incomplete.
If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.
If alias has value symbol - mark alias as referenced
If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.
If any argument is +Infinity or -Infinity, the result is +Infinity.
If any argument is NaN, the result is NaN.
If any file is not up-to-date, then the whole program is not up-to-date
If array literal is actually a destructuring pattern, mark it as an implied type.
If at any point current node is equal to 'parent' node - return true.
If both operands are of the Number primitive type, the result is of the Number primitive type.
If candidate is undefined, it means that no candidates had a suitable arity.
If child at position 'length - 1' is 'SemicolonToken' it is skipped and 'expectedLastToken' is compared with child at position 'length - 2'.
If contextual typing takes place, these functions should work.
If declaration of for in statement, just set the span in parent
If each type in U has a property P, U has a property P of a union type of the types of P from each type in U.
If end is omitted, the characters from start through the end of the original string are returned.
If entry point for resolving file references is already specified, report duplication error
If fileName is provided, gets all the diagnostics associated with that file name.
If files are listed explicitly, allow all extensions
If first variable declaration of variable statement correct the start location
If fromIndex is omitted, the search starts at index 0.
If fromIndex is omitted, the search starts at the last index in the array.
If function has explicit reachable return on one of codepaths (initialized by binding)
If function implicitly returns on one of codepaths (initialized by binding)
If getResolvedSignature has already been called, we will have cached the resolvedSignature.
If indexArgumentExpression is a constant value, returns its string value.
If indexArgumentExpression is a string literal or number literal, returns its text.
If inference failed, it is necessary to record the index of the failed type parameter (the one we are on).
If initializer of destructuring assignment move to previous token
If it does not have any - its inferred return type is void - don't do any checks.
If it does, return that there was a prefix match.
If it does, return that there was an exact match.
If it does, we need to wrap the expression in parentheses.
If it is a nested binding pattern, we will recursively descend into each element and emit each one separately.
If it is a short-hand property assignment, use the type of the identifier
If it is accessor they are allowed only if location is at name of the accessor
If it is an alias, then it is a value if the symbol it resolves to is a value.
If it is call or construct signature of lambda's write type name
If it is initialized with a function expression, handle it when we reach the function expression node
If it is not provided, undefined is used instead.
If it is not supplied, the value from a call to the getUTCDate method is used.
If it is set this means that all nested loops are not nested in arrow function and it is safe to capture 'this'.
If it isn't, then the 'pos' must be inside the change.
If it wasn't then just try to parse out a '.' and report an error.
If last parameter is contextually rest parameter get its type
If length is 0, the empty string is returned.
If loop contains block scoped binding captured in some function then loop body is converted to a function.
If module name can be matches with multiple patterns then pattern with the longest prefix will be picked.
If msb is set, we still have more bits to continue
If no arguments are passed, the result is +0.
If no error is raised, the test passes.
If no such value is found, the callback is applied to each element of array and undefined is returned.
If no value is given, the method places the element at the end of the collection.
If no value is provided, the last cell in the cells collection is deleted.
If node is a binding element in parameter declaration, we need to use ParameterExcludes.
If node is not a computedPropertyName, just skip the grammar checking
If node was parsed as part of a decorator
If node was parsed in a JavaScript
If node was parsed in a context where 'in-expressions' are not allowed
If node was parsed in the 'await' context created when parsing an async function
If node was parsed in the 'yield' context created when parsing a generator
If not a primitive, the possible types are specified in what is effectively a map of options.
If not options are provided - it will use a set of default compiler options.
If not, add the file to an unattached list, to be rechecked later.
If number of files in the program do not match, it is not up-to-date
If omitted, a single-element array containing the entire string is returned.
If omitted, search starts at the beginning of the string.
If omitted, the array elements are separated with a comma.
If omitted, the elements are sorted in ascending, ASCII character order.
If omitted, the search begins at the end of the string.
If on the span is in right side of the the property or qualified name, return the span from the qualified name pos to end of this node
If one needs to check both directions for comparability, use a second call to this function or 'checkTypeComparableTo'.
If one needs to check both directions for comparability, use a second call to this function or 'isTypeComparableTo'.
If one operand is the null or undefined value, it is treated as having the type of the other operand.
If one or both operands are of the String primitive type, the result is of the String primitive type.
If one or more constituents remain, return a union of those.
If only one accessor includes a this-type annotation, the other behaves as if it had the same type annotation
If output has not been changed, and the file has no external modification
If parent has the unknown (error) type, then so does this binding element
If present, tab settings apply only to this file.
If removeComments is true, no leading-comments needed to be emitted
If result is definitely true, copy assumptions to global cache, else copy to next level up
If return type annotation is omitted check if function has any explicit return statements.
If settingsCallback exists, assume that it modified the global compiler instance's settings in some way.
If so we want to search for whatever is under the cursor.
If so we want to search for whatever under the cursor.
If so, get the member from the resolved type
If so, mark ourselves accordingly.
If so, then just keep the file in the referenced list.
If so, update it appropriately.
If so, use the text from the left-hand side.
If so, use the var name.
If so, we just throw away the old program and start fresh.
If so, we update the project.
If so, we're done with the member.
If source and target are already being compared, consider them related with assumptions
If source and target are references to the same generic type, infer from type arguments
If source and target are tuples of the same size, infer from element types
If spread arguments are present, check that they correspond to a rest parameter.
If symbol is directly available by its name in the symbol table
If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too
If symbol of this name is not available in the symbol table we are ok
If the 'pos' is before the start of the change, then we don't need to touch it.
If the -out option is specified, we should not pass the source file to getEmitResolver.
If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.
If the Promise constructor, resolved locally, is an alias symbol we should mark it as referenced.
If the array literal is empty, the resulting type is an array type with the element type Undefined.
If the binding pattern is empty, this variable declaration is not visible
If the call is incomplete, we should skip the lower bound check.
If the candidate type is assignable to the target type, narrow to the candidate type.
If the comment starts with '*' consume the spaces on this line
If the compilation settings do no match, then the program is not up-to-date
If the configuration file changes, forget cached program and start the recompilation timer
If the current node is a container that also container that also contains locals.
If the current position is a jsDoc tag name, only tag names should be provided for completion
If the declaration happens to be in external module, report error that Promise is a reserved identifier.
If the declaration happens to be in external module, report error that require and exports are reserved keywords
If the declaration includes a type annotation, T is that type.
If the declaration includes a type annotation, the parameter is of that type
If the declaration is function-like and has a body, the parameters of the function are used.
If the declaration specifies a binding pattern, the parameter type is the implied type of that binding pattern (section 5.1.3)
If the declaration specifies a binding pattern, use the type implied by the binding pattern
If the default binding was emitted, write the separated
If the effective argument is 'undefined', then it is an argument that is present but is synthetic.
If the emit is enabled make sure that every output file is unique and not overwriting any of the input files
If the emitter didn't emit anything, then pass that value along.
If the error ended here, or we're at the end of the file, emit its message
If the expression is a class of abstract type, then it cannot be instantiated.
If the expression is a new expression, then the check is skipped.
If the file has a non-ambient class with an extends clause in ES5 or lower (initialized by binding)
If the file has async functions (initialized by binding)
If the file has decorators (initialized by binding)
If the file has parameter decorators (initialized by binding)
If the first template span has an empty literal, then the head must still be emitted.
If the function is static, search in the class type's
If the host can not locate the file, then it does not exist.
If the identifier is the RHS of a qualified name, then it's a type iff its parent is.
If the instance type is null, a call overload was likely declared before the class constructor
If the last item added was an anonymous function expression, and it had no children, discard it.
If the last spans werent emitted, emit them
If the leading comments start on different line than the start of node, write new line
If the member declaration specifies no value, the member is considered a constant enum member.
If the member is the first member in the enum declaration, it is assigned the value zero.
If the name is not a ComputedPropertyName, the grammar checking will skip it
If the noEmitOnError flag is set, then check if we have any errors so far.
If the node is exported
If the node is not a subspan of its parent, this is a big problem.
If the node is not exported or it is not ambient module element (except import declaration)
If the node is parented in the current source file we need to emit export declare or just export
If the only child is jsx element, put it on a new indented line
If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
If the optional parameter is used, will increment the input control's value by that value.
If the output for alias was written asynchronously, the corresponding output
If the package has its own d.ts typings, those will take precedence.
If the parent is not sourceFile or module block it is local variable
If the parent is the constructor, and this isn't an instance method, skip it.
If the parser encountered an error when parsing the code that created this node
If the path is not rooted it is relative to current directory
If the pattern has at least one element, and no rest element, then it should imply a tuple type.
If the program is already up-to-date, we can reuse it
If the requested number of bytes could not be allocated an exception is raised.
If the sourcePathComponents was shorter than the commonPathComponents, truncate to the sourcePathComponents
If the symbol has the value flag, it is trivially a value.
If the symbol is an import we would like to find it if we are looking for what it imports.
If the symbol is an instantiation from a another symbol (e.g. widened symbol) , add the root the list
If the symbol is equivalent and doesn't need further qualification, this symbol is accessible
If the symbol is not visible from module, module's name
If the symbol with this name is present it should refer to the symbol
If the type is type parameter, format it specially
If the user didn't specify a return type, try to use the set-accessor's parameter type.
If the user has just opened a list, consider this item 0.
If the user's code is syntactically correct, the func should always have a star.
If there are any bugs in the test code, mark the scenario as impacted appropriately
If there are decode errors, write
If there are no specified types, try to infer it from the body of the get accessor if it exists.
If there is any bug associated with this test case
If there is constraint present and this is not a type parameter of the private method emit the constraint
If there is no 'props' property, you may not have non-"data-" attributes
If there is no character at the specified index, NaN is returned.
If there is no document, then null will be returned.
If there is no e.g. 'props' member in ElementAttributesProperty, use the element class type instead
If there is no element at that position, the result is undefined.
If there is not emiThisFile flag specified in the test file, throw an error
If there is only one argument, the result is the absolute value.
If there is param help text, add it top the doc comments
If there's a real semicolon, then we can always parse it out.
If there's no corresponding property with this name, error
If these are followed by a dot, then parse these out as a dotted type reference instead.
If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.
If this happens, return undefined.
If this is a class constructor, the "container" is actually the class declaration
If this is a destructuring pattern set breakpoint in binding pattern
If this is a function in a JS file, it might be a class method.
If this is a type resolution session, e.g. Language Service, try to get better information that anySignature.
If this is a union property, add all the symbols from all its source symbols in all unioned types.
If this is an export or import specifier it could have been renamed using the 'as' syntax.
If this is body of arrow function, it is allowed to have the breakpoint
If this is dotted module name, get the doc comments from the parent
If this is left side of dotted module declaration, there is no doc comments associated with this node
If this is name of property assignment, set breakpoint in the initializer
If this is not a constructor and is not private, emit the return type
If this is not an async arrow, emit the closing brace of the outer function body.
If this is not instantiated module block no bp span
If this is private property or method, the scope is the containing class
If this is the current item we are editing right now, do not filter it out
If this is the start of another tag, continue with the loop in search of param tag with symbol name
If this location wasn't recorded or the location in source is going backwards, record the span
If this node or any of its children had an error
If this parameter is a Number, it is the zero-based index of the object.
If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
If this parameter is an integer, it is the zero-based index of the object.
If this value is not specified, the substring continues to the end of stringObj.
If this value is not supplied, the value from a call to the getDate method is used.
If this was a camel case match, how strong the match is.
If this was a case sensitive or insensitive match.
If this was the case, it may have caused some type parameters to be fixed.
If thisArg is omitted, undefined is used as the this value.
If true, comments occurring between the given position and the next line break are returned.
If type has a single call signature and no other members, return that signature.
If type is an anonymous type literal in a type alias declaration, use type alias name
If union property is result of union of non method (property/accessors/variables), it is labeled as property
If we already found this library as a primary reference - nothing to do
If we already resolved to this file, it must have been a secondary reference.
If we are looking in value space, the parent meaning is value, other wise it is namespace
If we are missing the close paren, the call is incomplete.
If we are not emitting first line, we need to write the spaces to adjust the alignment
If we are not in JSX context, we are parsing TypeAssertion which is an UnaryExpression
If we are past the end, stop looking
If we couldn't get parameters, we definitely could not parse out an arrow function.
If we didn't find a containing function with a block body, bail out.
If we didn't find accessible symbol chain for this symbol, break if this is external module
If we do successfully parse arrow-function, we must *not* recurse for productions 1, 2 or 3.
If we don't have a catch clause, then we must have a finally clause.
If we don't want the BOM, then skip it by setting the starting location to 3 (size of BOM).
If we execute synchronously, this will get called before the return below.
If we failed to find a good common directory, but outDir is specified and at least one of our files is on a windows drive/URL/other resource, add a failure
If we got a match, here is what the match array will look like.
If we got here, we didn't find a match
If we have a 'super' container, we must have an enclosing class.
If we have a non-keyword identifier, or if we have an accessor, then it's safe to parse.
If we have a token or node that has a non-zero width, it must have tokens.
If we have an arrow, then try to parse the body.
If we have seen "super" it must be followed by '(' or '.'.
If we haven't create a program yet, then it is not up-to-date
If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.
If we hit a module declaration in an illegal context, just bail out to avoid cascading errors.
If we hit an export assignment in an illegal context, just bail out to avoid cascading errors.
If we hit an export in an illegal context, just bail out to avoid cascading errors.
If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.
If we read from the file, it must exist
If we see any required parameters, it means the prior ones were not in fact optional.
If we succeeded and got a do-while loop, then start looking for a 'while' keyword.
If we were able to get any potential identifier...
If we were contiguous, then keep that value.
If we're acquiring, then this is the first time this LS is asking for this document.
If we're in error recovery we tighten up what we're willing to match.
If we're just after a template tail, don't show signature help.
If we're not exporting the variables, there's nothing special here.
If we're on the last line, then limit it to the last character of the last line.
If we're only looking ahead, then tell the scanner to only lookahead as well.
If we've already seen an asterisk, then we can no longer parse a tag on this line
If we've computed data from children and cached it in this node
If x is already an integer, the result is x.
If year is between 0 and 99 is used, then year is assumed to be 1900 + year.
If you do not specify this parameter, the default value is a PNG format image.
If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale.
If you just use p1:modes, the compiler accepts it - should be an error
If you omit this parameter, the default locale of the JavaScript runtime is used.
Ignore nodes that don't intersect the original span to classify.
Ignore omitted expressions for missing members
Ignore strict mode flag because we will report an error in type checker instead.
Ignore the first asterisk on a line
Ignore type expression
Implement the parser as a singleton module.
Implicit different types
Implicit identical types
Implicit-'any' error for x.
Implicit-'any' errors for first two call signatures, x1, x2, z2.
Implicit-'any' errors for x and z.
Implicit-'any' errors for x, and z.
Implicit-'any' errors for x, y, and z.
Implicit-'any' errors for x.
Import declaration of another module that is visited async so lets put it in right spot
Import declaration without import clause is visible, otherwise it is not visible
Import equals declaration in internal module can become visible as part of any emit so lets make sure we add these irrespective
Import equals declaration is deprecated in es6 or above
In ES3/5, you cannot for...of over an arbitrary iterable.
In ES6, super inside constructor of class-declaration has to precede "this" accessing
In JavaScript files, calls to any identifier 'require' are treated as external module imports
In a class 'extends' clause we are also looking for a value.
In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.
In a destructuring assignment expression, the type of the expression on the right must be assignable to the assignment target on the left.
In a sense, it does not actually emit identifiers as much as it declares a name for a specific property.
In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.
In all of these cases, we want to mark the next node as having had an error before it.
In an ambient declaration, the grammar only allows integer literals as initializers.
In an assignment expression, the right operand is contextually typed by the type of the left operand.
In an interface or class, we're definitely interested in a type.
In case of objStrOrNum3, the S is not union Type but object Literal so we go to next step.
In case of variable declaration, node.parent is variable statement so look at the variable statement's parent
In equality comparisons, NaN does not equal any value, including itself.
In fact, it is the case that the text of the name must be equal to 'ToString(numLit)' for this to hold.
In general cancelling is *not* safe for the type checker.
In incomplete call we want to be lenient when we have too few arguments
In second instance of same module, exported interface is not visible
In some cases, we need to emit a space between the operator and the operand.
In such situations, 'permitInvalidConstAsModifier' should be set to true.
In that case, we should check the argument.
In the TypeScript JSX element, if such element is not defined.
In the case of rest element, we will omit rest element.
In this case we don't indent the next line in the next pass.
In this case, we adjust the span to point to the function keyword.
In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration
Include 'catch' and 'finally' for error recovery.
Include 'text' field for identifiers/literals, but not for source files.
Include 'throw' statements that do not occur within a try block.
Include open bracket computed properties.
Include parameter symbol instead of property symbol in the signature
Include type declarations
Include value completions
Includes the word "Symbol" with unicode escapes
Incomplete call, but too many parameters.
Incomplete call, enough parameters.
Incomplete call, not enough parameters, at EOF.
Incomplete call, not enough parameters.
Incorrect emittedColumn dont support this map
Incorrect error, Bug 829597
Incorrect nameIndex dont support this map
Incorrect sourceColumn dont support this map
Incorrect sourceIndex dont support this map
Incorrect sourceLine dont support this map
Increase our ref count so we know there's another LS using the document.
Increase visibility of all protected members to public
IncrementExpression is used instead of ES6's PostFixExpression.
Incrementally parse the file.
Increments a range input control's value by the value given by the Step attribute.
Indent all semicolons except the ones that belong to the for statement parts (initalizer, condition, itnrement)
Indentation for the scope that can be dynamically recomputed.
Index signature can have readonly modifier
Index signature of type any permits assignment from everything but primitives
Index signatures and computed property names are type members
Index signatures can't be optional
Indicate if the file name list of the project is needed
Indicates a citation by rendering text in italic type.
Indicates whether the stream pointer position is at the end of a line.
Indicates whether the stream pointer position is at the end of a stream.
Individual component times.
Infer string from second argument because it isn't context sensitive
Infer the empty object type when no inferences were made.
Infer typing names from given file names.
Infer union types for disjoint candidates (otherwise undefinedType)
Infer widened union or supertype, or the unknown type for no common supertype
Inferences are made quadratic-pairwise to and from these overload sets
Inferences made directly to a type parameter
Inferences made for each type parameter
Inferences made to a type parameter in a union type
Inferred type for each type parameter
Information about a chunk of text from the pattern.
Information about the entire piece of text between the dots.
Information about the item to be renamed.
Information about the subwords compromising the total word.
Information found in a configure request.
Information found in an "open" request.
Informs the DocumentRegistry that a file is not needed any longer.
Inheritance means that a derived class implicitly contains all non - overridden members of the base class.
Initial indentation for this node will be 0.
Initial root length is http:// part
Initial value is of type string
Initialize a checker so that all our files are bound.
Initialize and prime the scanner before parsing the source elements.
Initialize files constituting the program as all .ts files in the current directory
Initialize global symbol table
Initialize source map data
Initialize special types
Initialize the instantiation cache for generic type aliases.
Initialize the language service with all the scripts
Initialize the list with the root file names
Initializer for declaration
Initializer is an expression.
Initially we can parse out a tag.
Inner should show up in intellisense
Input source file (which one can use on program to get the file), 1:1 mapping with the sourceMapSources list
Insert space after function keyword for anonymous functions
Insert space after keywords in control flow statements
Insert space after opening and before closing nonempty brackets
Insert space after opening and before closing nonempty parenthesis
Insert space after opening and before closing template string braces
Insert space after semicolon in for statement
Insert space before and after binary operators
Inserts new elements at the start of an array.
Inserts the specified audio effect into media pipeline.
Inside function declaration
Inside private accessor getter
Inside private accessor setter
Inside private static accessor getter
Inside private static accessor setter
Inside public accessor getter
Inside public accessor setter
Inside static accessor getter
Inside static accessor setter
Instance 'super' reference
Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)
Instantiated anonymous type
Instantiated lexical module declaration is merged with a previous class declaration.
Instantiates a global type that is generic with some element type, and returns that instantiation.
Instantiations are cached using the type identities of the type arguments as the key.
Instantiations of generic type alias (undefined if non-generic)
Instead, return anySignature.
Instead, the yield expressions are checked against the element type.
Instead, we would get 00 and 9 as two separate tokens.
IntCon, FltCon, StrCon
Interface contains references to "this"
Interfaces and overloads
Interfaces cannot have parameter types that cannot be named
Interfaces cannot have return types that cannot be named
Interfaces cannot have types that cannot be named
Intersect in JSX.IntrinsicAttributes if it exists
Intrinsic string indexer case
Intrinsic types (TypeFlags.Intrinsic)
Invalid binaryIntegerLiteral or octalIntegerLiteral
Invalid, as there is already an exported member.
Invoke function call on value of a subtype of Function with no call signatures with no type arguments
Invoke function call on value of type 'any' with no type arguments
Invoked to perform initial compilation or re-compilation in watch mode
Invokes a callback for each child of the given node.
Invokes the callback with the scanner set to scan the specified range.
Invokes the provided callback.
Is not a member expression so we have found the node for start pos
Is the file being emitted into its own file
Is this : specifying return annotation of the function declaration
Is this close paren token of parameter list, set span in previous token
Is this file going to be emitted separately
Issue an error if this return type isn't assignable to JSX.ElementClass
It allows test-cases to indicate what file to be output in multiple files project
It also triggers the standard error message, such as "this is a required field".
It can be a variable name or a literal.
It can be for a data property or an accessor property.
It does not set the currentSourceFile.
It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression (13.1))
It is actually not necessary for this to be an error at all.
It is an error to explicitly declare a static property member with the name 'prototype'.
It is an error to have a Void this type.
It is an error to inherit an abstract member without implementing it or being declared abstract.
It is built from the bottom up, leaving the head to be the "main" diagnostic.
It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.
It is neither affected by it, nor does it propagate it to its operand.
It is nested in an ambient context, which means it is automatically exported
It is not the iterator property of the global Symbol.
It is not uncommon to accidentally omit the 'from' keyword.
It is now the new best node.
It is safe in the traditional contravariant fashion.
It is usually not safe to call checkExpressionCached if we can be contextually typing.
It is worth asking whether this is what we really want though.
It may change as we tweak the parser.
It might be that inference has already failed on a later type parameter on a previous call to inferTypeArguments.
It needs to be cleared to allow all collected snapshots to be released
It only makes sense to get the type of a value symbol.
It should be counted as a space and should not cause an error.
It should be counted as a space and should not trigger ASI
It was not a type, and it looked like an expression.
It wasn't an assignment or a lambda.
It would be just as correct to reset all of them.
It's a bitmap which contains 6 different sections each is given 5 bits.
It's acceptable for multiple 'this' assignments of the same identifier to occur
It's an empty declaration list.
It's an external module.
It's definitely not a parenthesized arrow function expression.
It's not an error if the file with multiple `export *`s with duplicate names exports a member with that name itself
It's not uncommon for people to write improper constraints to a generic.
Item of diagnostic information found in a DiagnosticEvent message.
JSDoc for the node, if it has any.
JSON.stringify returns `undefined` here, instead of the string "undefined".
JSXElement is part of primaryExpression
JavaScript displays NEGATIVE_INFINITY values as -infinity.
JavaScript displays POSITIVE_INFINITY values as infinity.
JavaScript files are always LanguageVariant.JSX, as JSX syntax is allowed in .js files also.
Just a local name that is not accessible
Just a place to cache element types of iterables and iterators
Just add all the declarations.
Just bail out instead.
Just call this directly so that the return type of this function stays "void".
Just the name with type arguments
Keep in sync with couldStartTrivia
Keep in sync with skipTrivia
Keep searching deeper to find the node.
Keep the flags from the symbol we're instantiating.
Keep track of the type we're about to unwrap to avoid bad recursive promise types.
Keep track on the node if we encountered an error while parsing it.
Keep trying to parse out variable declarators.
Kind of symbol's container symbol (if any).
LS host can optionally implement this method if it wants to be completely in charge of module name resolution.
Language service instance
Language service support
Last 'thunk' is of correct type
Last line of range for which to format text in file.
Last line separator found
Last recorded and encoded spans
Leading comments are emitted at /*leading comment1 */space/*leading comment*/space
Least significant bit if 1 represents negative and rest of the msb is actual absolute value
LeftHandSideExpression
Legal because of the contextual type IAnimal provided by the parameter
Legal to use 'await' in a type context.
Legal to use 'yield' in a type context.
Legal, because module is ambient
Let S be the set of types in U that has a property P.
Let S be the set of types in U that has a string index signature.
Let S be the set of types in U that have call signatures.
Let the host know that this file is now open
Let's consider our termination cases
Lexical 'arguments' used in body (for async functions)
Lexical 'this' reference
Lexical 'this' used in body
Lib.d.ts has similar numbers.
Like iWithCallSignatures
Like removeComputedProperties, but retains the properties with well known symbol names
Likewise, "set" can be used to define setters.
Line number in the .js file.
Line number in the .ts file.
Line/Comma delimiters
List of FourSlashFile that has emitThisFile flag on
List of all the subfiles we've parsed out
List of allowed metadata names
List of file names for which to compute compiler errors.
List of files that were asked to read by compiler
List of files that were emitted by the compiler
List of files to search for document highlights.
List of loop out parameters - detailed descripion can be found in the comment to LoopOutParameter
List of names that get overriden by various test code we eval
List of supported extensions in order of file resolution precedence.
Literal and expression
Literal member completion after member name with empty member expression and missing colon.
Literal member completion after member name with empty member expression.
Literal member completion at existing member name location.
Literal member completion for 2nd member name.
Little endian UTF-16 byte order mark detected
Load file and read the first two bytes into a string with no interpretation
Load only typescript files irrespective of allowJs option if loading from node modules
Loads and starts playback of a media resource.
Local get canonical file name function, that depends on passed in parameter for useCaseSensitiveFileNames
Local symbol declared by node (initialized by binding only for exported nodes)
Local type parameters (undefined if none)
Local types are block scoped
Local types are not in scope in parameters and return types
Locals associated with node (initialized by binding)
Locals of a source file are not in scope (because they get merged into the global symbol table)
Locals that reside in this block should go to the function locals.
Location in source code expressed as (one-based) line and character offset.
Logger-related functions
Look up the corresponding property for this attribute
Looks like a cast, should get classified as a keyword.
Loop that contains block scoped variable captured in closure
Loop through all the emittedFiles and emit them one by one
Lots of Irritating Superfluous Parentheses
M1 should bind to the variable, not to the module.
MS.Entertainment.ObservableArray
Make a scanner we can get trivia from.
Make a whitespace entry between the last item and this one.
Make all the declarations visible for the export name
Make sure each child is contained within the parent.
Make sure each of the children is in order.
Make sure if there is URl we have it cleaned up
Make sure not to write js File and source map file if any of them cannot be written
Make sure sources list is cleaned
Make sure symbols don't leak out into the constructor
Make sure the property type is the primitive symbol type
Make sure this is a type assertion to an array type, and not nested comparison operators.
Make sure we don't think of *bar as the start of a generator method.
Make sure we emit something for every error
Make sure we only highlight the keyword when it makes sense to do so.
Make sure we're not trying to incrementally update a source file more than once.
Make the tuple type itself the 'this' type by including an extra type argument
Makes the selection equal to the current object.
Makes this an external module
Map between option.description and list of option.type if it is a kind
Map storing if there is emit blocking diagnostics for given input
Maps from a symbol ID to the ReferencedSymbol entry in 'result'.
Mark that we've encountered an error.
Mark the anonymous type as instantiated such that our infinite instantiation detection logic can recognize it
Marks that the current scenario is impacted by a bug
Match any of the above three TODO comment start regexps.
Matches a string an object that supports being matched against, and returns an array containing the results of that search.
Matches a string with a regular expression, and returns an array containing the results of that search.
Matching for patterns that don't contain '*' means that module name must be equal to pattern respecting the case.
Matching guards should be assignable
May also return unknownSymbol if both of these lookups fail.
Meaning the previous token was not a comma
Members in array literal
Members in class declaration
Members in enum declaration
Members in interface or type literal
Members in object literal
Members of a class method (1)
Members of classes, interfaces, and modules
Members of the invocation of a class method (1)
Members of the invocation of a class method (2)
Merge a given list of typingNames to the inferredTypings map
Merge id (used to look up merged symbol)
Merge these items together.
Merged symbol (created during program binding)
Method declarations are not necessarily reusable.
Method signatures don't exist in expression contexts.
Method/function type parameter
Methods from ChainedObject with promoted return types
Methods will emit comments at their assignment declaration sites.
Mimics having multiple files, later concatenated to a single file.
Mismatched guards shouldn't be assignable
Missing nodes are effectively invisible to us.
Missing the first operand
Mixing typeguard narrowing
Mixing typeguard narrowing in if statement with conditional expression typeguard
Mocha holds onto the closure environment of the describe callback even after the test is done.
Modifiers are never allowed on properties except for 'async' on a method declaration
Modify in both branches
Modify the package.json structure
Module is detected first to support Browserify users that load into a browser with an AMD loader
Module names are escaped in our symbol table.
Module.Type, instead of Type)
More cases can be added as needed.
More than one property on ElementAttributesProperty is an error
More unary operator special-casing.
Move marker back/forward by the appropriate amount
Move onto the next candidate.
Move the caret to wherever we ended up
Move the scanner so it is after the node we just consumed.
Moves the current item to the next item in the collection.
Multi-line comment with more than one blank line
Multiple function overload signatures that are identical
Multiple function overload signatures that differ only by return type
Multiple properties with the same name
Multiple spreads arguments
Must be in the range 0 - 20, inclusive.
Must be in the range 1 - 21, inclusive.
Must be specified if numDate is specified.
Must be supplied if numDate is supplied.
Must have matching parameter index
Must have same layout as PropertyAccess
N is optional and T contains no property with the same name as N
NEWTODO: Re-implement 'compileString'
NEWTODO: Type baselines
NOTE(cyrusn): This approach feels somewhat unfortunate.
NOTE: JsxText is a weird kind of node that can contain only whitespaces (since they are not counted as trivia).
NOTE: There are two places where we allow equals-value clauses.
NOTE: assignability is checked in checkClassDeclaration
NOTE: do not raise error if leftType is unknown as related error was already reported
NOTE: do not raise error if right is unknown as related error was already reported
NOTE: unknown type here denotes error type.
Name in member declaration or property name in property access
Name of intrinsic type
Name on right hand side of dot in a type query
Name preceding "as" keyword (or undefined when "as" is absent)
Named import clause's import specifier list
Names of one or more entries for which to obtain details.
Namespace declaration
Narrow the given type based on the given expression having the assumed boolean value.
Navto response message.
Need to lookahead to decide if this is a nullable or unknown type.
Needs to be wrapped in parens to be a valid expression (not declaration)
Negative tests - we expect these cases to fail
Neither types is assignable to each other
Nested local functions
New metadata statement after having collected some code to go with the previous metadata
Next container in declaration order (initialized by binding)
Next entry is on same line - no action needed
Next, recursively merge or add any children in the source as appropriate.
No  Error will be reported here since we turn off all type checking
No Privacy errors - importing private elements
No Privacy errors - importing public elements
No breakpoint in interface, type alias
No breakpoints in the function signature
No candidate overloads found
No capture in 'g', so no conflict.
No code gen - no error
No code here since these are the mirror of the above calls
No completion because m1c is not an instantiated module.
No construct signatures, try call signatures
No duplicate error here
No error - no code gen
No error - property exists
No error is recorded here and declaration file will show this as number
No error when the indexer is in a class more derived than the computed property
No error, prototype is instantiated to any
No error, type any only affected by primitive type check
No error, type any unaffected by instanceof type guard
No error, type unaffected in this branch
No errors anymore, uses union types
No errors, const declaration is not shadowed
No explicit rule for given nodes so the result will follow the default value argument
No further restrictions for static properties
No implicit any error given when newing a function (up for debate)
No implicit-'any' errors.
No inner declarations
No instance properties
No interface exists, so the element attributes type will be an implicit any
No match if this is not a call expression to an identifier named 'define'
No match, since we still have more of the pattern to hit
No matching signature
No need to analyze lib.d.ts
No need to check for omitted args and template expressions, their exclusion value is always undefined
No need to do anything with it.
No privacy Error - importing public elements
No recorded indentation, return null
No signature was applicable.
No signatures were applicable.
No space after second type argument
No space before and after indexer
No spaces to emit write empty string
No static member is present.
No this capture in x(), so no conflict.
No type guard in if statement
No type specified and nothing can be inferred
Node has been type checked
Node id used by flow type cache in checker
Node is entirely past the change range.
Node is not an augmentation and is not located on the script level.
Node will just continue to repeat the root path, rather than return null
Non - generic overloads where contextual typing of function arguments has errors
Non-BMP unicode char tests
Non-compatiable type predicate positions for signature declarations
Non-operator non-identifier tokens
Non-standard Attributes
Non-standard extensions
None of the below should cause a runtime dependency on foo_0
None of the types are exported, so per section 10.3, should all be errors
Normalize an array of edits by removing overlapping entries and sorting entries on the minChar position.
Normalize line endings
Not a declaration file
Not a first parameter, go to previous parameter
Not assignment compatible
Not needed for boolean.
Not ok - return types of "f" are different
Not on line 0 because we want to verify the error is placed in the appropriate location.
Not referenced imports
Not to miss zero-range nodes e.g. JsxText
Not valid, but permitted so that it gets caught later on.
Note - commmenting "extends Foo" prevents the error
Note that a MethodDeclaration is considered both a ClassElement and an ObjectLiteralElement.
Note that names generated by makeTempVariableName and makeUniqueName will never conflict.
Note that not every construct has been accounted for.
Note that the apparent type of a union type is the union type itself.
Note that the outermost group *is* a capture group.
Note that these checks are specifically ordered to produce correct results.
Note that this accepts the values 'Infinity', '-Infinity', and 'NaN', and that this is intentional.
Note that this regexp *does not* include the 'delete' character.
Note(cyrusn): this enum is ordered from strongest match type to weakest match type.
Note*: 'interface' is actually a strict mode reserved word.
Note, only class declarations can be declared abstract.
Note, that getWidth() does not take trivia into account.
Note: 'brands' in our syntax nodes serve to give us a small amount of nominal typing.
Note: 'node' cannot be a SourceFile.
Note: 'previousToken' (and thus 'contextToken') can be undefined if we are the beginning of the file
Note: Any addition to the NodeType should also be supported with addition to AstWalkerDetailCallback
Note: Duplex extends both Readable and Writable.
Note: This may be too conservative.
Note: This test is a public API sample.
Note: Transform lacks the _read and _write methods of Readable/Writable.
Note: even when 'ignoreMissingOpenBrace' is passed as true, parseBody will still error.
Note: if this is an external module symbol, the name doesn't include quotes.
Note: it is not actually necessary to save/restore the context flags here.
Note: nextLine is in the Zs space, and should be considered to be a whitespace.
Note: passing in 'true' for setNodeParents is very important.
Note: that the memberFlags come from previous iteration.
Note: the node text must be exactly "use strict" or 'use strict'.
Note: there are 8 because of the functions show up at the top level and as child items.
Note: these are almost certainly not safe to ever reuse.
Note: this function mutates nodes from this SourceFile.
Note: this is not legal as per the grammar.
Note: this subtlety only applies to the last comma.
Note: we *can* reuse tokens when the strict mode changes.
Note: we are overly aggressive here.
Note: we are passed in an expression which was produced from parseBinaryExpressionOrHigher.
Note: we check for this here because this class may be merging into a module.
Note: we may have more pattern parts than candidate parts.
Nothing else should show up
Nothing else to do for self-closing elements
Now LS1 updates their document.
Now LS2 tries to update their document.
Now change the decl by adding a semicolon
Now check the non-nullable types and report errors on the last one.
Now consume white spaces max
Now create a new compiler
Now let's watch the files
Now see if we might be in cases '2' or '3'.
Now skip arrow functions to get the "real" owner of 'this'.
Now traverse back down through the else branches, aggregating if/else keywords of if-statements.
Now we emit the expressions
Now, walk up our containers, adding all their names to the container array.
Now, we *may* be complete.
Null can be converted to anything except Void
Null-propagating 'parent' function.
Number is not a subtype of string.
Number of non-optional parameters
Number of parsing contexts
Number of spaces for each tab.
Number of spaces to indent during formatting.
Numeric indexing info
OK - './file1' is a namespace
OK - ambient class and private method - no error
OK - ambient class and public method - error
OK - non-ambient class and private method - error
OK - non-ambient class and public method - error
OK per spec, Error per implementation (509581)
OK, accessed within a class derived from their declaring class
OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class
OK, accessed within a class derived from their declaring class, and through an instance of the enclosing class or one of its subclasses
OK, accessed within a subclass of the declaring class
OK, accessed within their declaring class
OK, in ambient context
OK, mbp is treated as Pig
OK, string has numeric indexer
OK, we have found a match in the file.
Object containing arguments for the command
Object found in response messages defining a span of text in a specific source file.
Object found in response messages defining a span of text in source code.
Object literal type implied by binding pattern has computed properties
Object literal with everything
Object literals are initially marked fresh.
Object markers can be anonymous
Object types (TypeFlags.ObjectType)
Objects in this collection are in HTML source order.
Objects in this collection are in source order.
Obtain base constraint such that we can bail out if the constraint is an unknown type
Occurs if the load operation has been intentionally halted.
Occurs to indicate progress while downloading media data.
Occurs to indicate the current playback position.
Occurs when Internet Explorer begins looking for media data.
Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.
Occurs when an item is removed from a Jump List of a webpage running in Site Mode.
Occurs when media data is loaded at the current playback position.
Occurs when playback is paused.
Occurs when playback is possible, but would require further buffering.
Occurs when playback stops because the next frame of a video resource is not available.
Occurs when the audio or video has started playing.
Occurs when the current playback position is moved.
Occurs when the download has stopped.
Occurs when the duration and dimensions of the media have been determined.
Occurs when the duration attribute is updated.
Occurs when the end of playback is reached.
Occurs when the media element is reset to its initial state.
Occurs when the play method is requested.
Occurs when the playback rate is increased or decreased.
Occurs when the seek operation ends.
Occurs when the volume is changed, or playback is muted or unmuted.
Ok - should be identical
Ok because T in this particular Promise2 is any, as are all the U and W references.
Ok because index signature type is any
Ok because null is a subtype of function
Ok to go down the chain, but error to climb up the chain
Ok to go down the chain, but error to try to climb back up
Ok to go down the chain, check the constraint at the end.
Ok, because fixing makes us infer boolean for T
Ok, because toString is a subtype of Object's toString
Ok, mbp is treated as Man
Ok, we choose the second overload because the first one gave us an error when trying to resolve the lambda return type
Ok, we have a node that looks like it could be reused.
Old compiler treated this case as any type so do we.
On break or continue keyword and label if present
On different line from the one that we have been recording till now,
On every iteration this variable is initialized with value of corresponding binding.
On first reference we set the Referenced flag, thereafter we set the Shared flag
On the last line of the file, fake the next line start number so that we handle errors on the last character of the file correctly
Once incremental parsing is ready, then just call into this function.
Once this is supported, the inner expression does not need to be parenthesized.
Once this is supported, yield *must* be parenthesized.
Once we have a better way to associate information with nodes, this flag should not be used.
Once we try, we will record the result
One character past last character of the definition.
One character past last character of the text span to edit.
One error: duplicate identifier 'foo'
One example of emitter error is export class implements non-export interface
One file can have multiple watchers
One object literal with all the attributes in them
One of "request", "response", or "event"
One of 'identityRelation', 'subtypeRelation', 'assignableRelation', or 'comparableRelation'.
One past last character of symbol.
One past the last character of the symbol.
One.common.a, Base.a, HasAOrB.a, x.common.a
One.common.a, x.common.a
Only Emit __extends function when target ES5.
Only a public signature is assignable to public signature.
Only allow a symbol to be renamed if it actually has at least one declaration.
Only bother checking on a few construct kinds.
Only bother with the trivia if it at least intersects the span of interest.
Only check rest parameter type if it's not a binding pattern.
Only check this symbol once
Only consider properties defined as constructor parameters
Only consider target-typed object literals
Only difference here is order of type parameters
Only do the constraint check if inference succeeded (to prevent cascading errors)
Only elaborate errors from the first failure
Only emit helpers if the user did not say otherwise.
Only emit if the literal is non-empty.
Only error inside the function, but not outside (since it would be applicable if not for the provisional error)
Only error on the declarations that contributed to the intersecting spaces.
Only finite values of the type number, result in true.
Only function expressions, arrow functions, and object literal methods are contextually typed.
Only have two named elements.
Only here do we need to check that the initializer is assignable to the enum type.
Only include referenced symbols that have a valid definition.
Only indent line comment and the first line of block comment
Only infer typings for .js and .jsx files
Only inference mappers have this set (in createInferenceMapper).
Only keywords should show in completion, no members or types
Only one error for duplicate identifier (don't consider visibility)
Only one of these errors should be large
Only outline spans of two or more consecutive single line comments
Only perform the action per file regardless of '-out' flag as LanguageServiceHost is expected to call this function per file.
Only perform this check once per symbol
Only pick labels that are either the target label, or have a target that is the target label
Only process instance properties with computed names here.
Only process signatures with parameter lists that aren't already in the result list
Only properties accepting unitless numbers are listed here (see CSSProperty.js in React)
Only select non-omitted expression from the bindingPattern's elements.
Only set the parent nodes if we're asserting invariants.
Only trying to find super-call if we haven't yet tried to find one.
Only type check the symbol once
Only values of the type number, that are also NaN, result in true.
Only walk into nodes that intersect the requested span.
Open Brace braces after TypeScript module/class/interface
Open Brace braces after control block
Open the first file by default
Opens a file given its 0-based index or fileName
Opens a new window and loads a document specified by a given URL.
Operands of an enum type are treated as having the primitive type Number.
Operator non-identifier tokens
Optional limit on the number of items to return.
Optional modifiers for the kind (such as 'public').
Optional name (index into names array) associated with this span.
Optional parameters and let args
Optional prefix to apply to possible completions.
Optional string to insert at location (file, line, offset).
Optional symbol name that results in error
Optional type annotation
Optionally, get the shebang
Or Move backward to the new-end if it's in the 'Y' range.
Or if it is nested inside class methods and constructors.
Or if it is not parented by another function.
Order matters here so test all the variants
Ordinary case: just highlight the keyword.
Original syntaxKind which get set so that we can report an error later
Originates in an object literal
Originating declaration
Otherwise base on parent indentation.
Otherwise fall through
Otherwise get inferred return type from function body and report error only if it is not void / anytype
Otherwise just return the original string.
Otherwise just try to preserve the formatting.
Otherwise return undefined.
Otherwise returns an empty string.
Otherwise returns false.
Otherwise they're an identifier in an expression statement.
Otherwise this may not be very useful.
Otherwise this would be never true for javascript file
Otherwise we require the yield/return expressions to have a best common supertype.
Otherwise, actually compare the structure of the two types.
Otherwise, emit and report any errors we ran into.
Otherwise, fall back to 'any'.
Otherwise, find returns undefined.
Otherwise, if the current type is assignable to the candidate, keep the current type.
Otherwise, it is the type any.
Otherwise, it is the type of the string index signature in T, if one exists.
Otherwise, just create a new source file.
Otherwise, no contextual signature can be extracted from T and S is undefined.
Otherwise, only emit if we have at least one initializer present.
Otherwise, report generic fallback message.
Otherwise, return undefined.
Otherwise, returns a new symbol with this key.
Otherwise, returns a undefined.
Otherwise, returns all the diagnostics (global and file associated) in this collection.
Otherwise, returns undefined.
Otherwise, the argument count is the length of the 'args' array.
Otherwise, the array is entirely before the change range.
Otherwise, the new entry is just pushed onto the stack, and true is returned.
Otherwise, the node is entirely before the change range.
Otherwise, the result is of type Any.
Otherwise, the resulting type is an array type with an element type that is the union of the types of the element expressions.
Otherwise, the types are completely unrelated, so narrow to the empty type.
Otherwise, undefined is returned.
Otherwise, use the indentation from the textBuffer
Otherwise, we *might* have an arrow function.
Otherwise, we need to aggregate each identifier to build up the qualified name.
Otherwise, we try to parse out the conditional expression bit.
Otherwise, we will not show signature help past the expression.
Otherwise, we'll just squiggle the rest of the line, giving 'slice' no end position.
Outcome of the request.
Outer type parameters (undefined if none)
Output the gutter and the error span for the line using tildes.
Overlap in constituents
Overloads have no scope, so bail here
Overloads, generic or not, that differ only by return type are an error.
Override sys.write because fs.writeSync is not reliable on Node 4
Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation.
Overrides the action attribute (where the data on a form is sent) on the parent form element.
Overrides the submit method attribute previously specified on a form element.
Overrides the target attribute on a form element.
PROPERTY, PRIVATE, STATIC, INTERFACE, CLASS, MODULE, EXPORT, IMPORT
Parameter index and argument index for the type guard target is not matching.
Parameters in parameter list
Parameters with names are handled at the top of this function.
Parent node (initialized by binding
Parentheses - tested a bunch above
Parenthesised expression
Parenthesized arrow signatures often look like other valid expressions.
Parse ES7 IncrementExpression.
Parse a file on disk given its filename
Parse error to export module
Parse file given its source text
Parse out the files and their metadata
Parse the contents of a config file (tsconfig.json).
Parses a comma-delimited list of elements
Parses a list of elements
Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.
Parses out a JSDoc type expression.
Parsing a signature isn't enough.
Parsing context flags
Part of a symbol description.
Passed argument is not the same as the one being guarded.
Passing these as arguments should cause an error.
Path of the directory containing the host executable.
Path used to used to compute primary search locations
Pattern part is longer than the candidate part.
Pauses the current playback and sets paused to TRUE.
Per 11.2.3, foo_0 should still be "instantiated", albeit with no members
Per spec, no contextual signature can be extracted in this case.
Perform binary search in one of the Unicode range maps
Perform extra checks only if error reporting was requested
Perform resolution on the closing tag so that rename/go to definition/etc work
Performs a binary search, finding the index at which 'value' occurs in 'array'.
Performs the specified action for each element in an array.
Pick the first candidate that matches the arity.
Place a space before open brace in a TypeScript declaration that has braces as children (class, module, enum, etc)
Place a space before open brace in a control flow construct
Place a space before open brace in a function declaration
Point.origin declared as type Point
Pool writers to avoid needing to allocate them for every symbol we write.
Pop an entry from the type resolution stack and return its associated result value.
Pop sourceMapDecodedMappings to remove last entry
Position in somewhere within this child.
Position must be at 0 before encoding can be changed
Position that goes forward, get text
Position was within this node.
Preconditions for using JSX
Prefer declaration folder if specified
Prefer using isTupleLikeType() unless the use of `elementTypes` is required.
Prefered relative indentation for child nodes.
Present for use with reporting a grammar error
Present on optional parameter
Present on optional property
Present on rest binding element
Present on rest parameter
Preserve whitespace where important for JS compatibility
Prevent cascading error by short-circuit
Prevents the addition of new properties to an object.
Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
Prevents the modification of existing property attributes and values, and prevents the addition of new properties.
Previous token may have been a keyword that was converted to an identifier.
Print emitOutputStatus in readable format
Print out each row, aligning all the descriptions on the same column.
Privacy errors - importing private elements
Private/protected properties/methods are not visible
Process any subtrees after the one containing range end
Produces a new SourceFile for the 'newText' provided.
Program cached from last compilation
Project baselines verified go in project/testCaseName/moduleKind/
Proper function declarations can only have identifier names
Properties common to all types
Property Declaration symbol is a member of the class, so the symbol is stored in its class Declaration.symbol.members
Property access expression
Property access of class instance type
Property access of module member
Property access on value of type 'any'
Property in union or intersection type
Property name in binding element or import specifier
Property or enum member
Property signatures can be optional
Property/Method/Function
PropertyName + CallSignature
Props cannot be a union type
Props is of type 'any' or unknown
Protected properties in constructors
Prototype property (no source representation)
Provide a full list of tag names
Provides a way to direct a user to a specific field when a document loads.
Provides a way to extend the internals of Chai
Provides functionality common to all JavaScript objects.
Public constructor is accessible.
Public interface of a language service instance shim.
Public interface of the host of a language service instance.
Public interface of the host of a language service shim instance.
Public interface of the the of a config service shim instance.
Public properties are otherwise accessible.
Public properties/methods are visible if its parents are visible, so const it fall into next case statement
Pull on the RHS of an import
Push an entry on the type resolution stack.
Putting a marker in line "  */" would bring some error when parsing code in automation.
Putting a marker in line "*" would bring some error when parsing code in automation.
Qualified name with type arguments
Qualify if the symbol from symbol table has same meaning as expected
Queue a configure command
Queue an echo command
Quick checks so we can bail out when asked to match a candidate.
Quickinfo response message.
REVIEW: Remove when classes completely replace oldclass
REVIEW: Shouldn't allocate another table for interface privates
REVIEW: Technically, interfaces should be ambient
REVIEW: This flag is to mark lambda nodes to note that the LParen of an expression has already been matched in the lambda header.
REVIEW: This logic should be symmetric with preCollectClassTypes
REVIEW: This will have to change when we move to "export"
REVIEW: Users should know the type that was actually used.
REVIEW: can optimize by coalescing simple edits
REVIEW: could use linked list
REVIEW: for diagnostic purposes
REVIEW: for now this implementation uses polling.
REVIEW: technically, this call isn't strictly necessary, since we'll find the type during the call to resolveTypeMembers
Raised when the object has been completely received from the server.
Raw source map spans that were encoded into the sourceMapMappings
Re-order candidate signatures into the result array.
Reached source file or module block
React-specific Attributes
Read in and evaluate the test list
Read leading trivia and token
Read the content length
ReadText method always strips byte order mark from resulting string
Reads a file under /tests
Reads the data from a post request and passes it to the given callback
Record the cancellation token so it can be checked later on during checkSourceElement.
Record visited node and the associated type in the cache.
Recording means they will be declared later.
Recurse into our child nodes.
Recurse into the source file to find the highest node at this position.
Recursive usage, use any
Reduce the properties of a map.
Reduced union type (all subtypes removed)
Reference a class static.
Reference misses function parameter.
Reference to a class parameter.
Reference to binding pattern
Reference to rest parameter
Referenced as antecedent more than once
Referenced as antecedent once
References and Occurrences
References are combinations of identifiers, parentheses, and property accesses.
References to a class argument.
References to a class parameter.
References to a field declared in a base interface.
References to a field declared in a chain of base class and interfaces.
References to a function argument.
References to a function parameter.
References to a member method with the same name as a static.
References to a member property with the same name as a static.
References to a static method with the same name as a member.
References to a static property with the same name as a member.
References to a type.
References to a variable declared in a class.
References to a variable declared in a function.
References to a variable declared in global.
References to foo should now not be in error
References to illegal assignment.
References to local inside a class.
References to no context.
References to shadowed function parameter.
References to static variable declared in a class.
References to unresolved symbol.
Regression test for #8295
Regular version of fresh type
Reinitialize these pointers for round two
Relating types of a and b produces instantiations of the cyclic anonymous types in foo and bar
Relative Column 0 based
Relative external module names are not permitted.
Relative namePosition 0 based
Relative sourceColumn 0 based
Relative sourceLine 0 based
Releases all resources held by this script snapshot
Relevant symbols are stored in the captured 'symbols' variable.
Remember if the module contains Unicode chars, that is needed for dynamic module as we will generate a file for each.
Remember if the script contains Unicode chars, that is needed when generating code for this script object to decide the output file correct encoding.
Remember the last meaning
Remember the property node, it will be used later to report appropriate error
Remove extra underscore from escaped identifier
Remove non-found files from the log (shouldn't really need them, but we still record them for diagnostic purposes)
Remove spaces in empty interface literals.
Remove the comments from a json like text.
Remove this file from the set of open, non-configured files.
Remove those constituent types of declaredType to which no constituent type of assignedType is assignable.
Remove typings that the user has added to the exclude list
Removes an element from the collection.
Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.
Removes the first element from an array and returns it.
Removes the last element from an array and returns it.
Removes the leading and trailing white space and line terminator characters from a string.
Removes the specified cell from the table row, as well as from the cells collection.
Removes the specified row (tr) from the element and from the rows collection.
Removing this line fixes the constructor of ItemValue
Rename response message.
Replace the "T" type with the non-existent type 'V'.
Replace the disk specific path into the project root path
Replaces instances of full paths with fileNames only
Replaces text in a string, using a regular expression or search string.
Replaces text in a string, using an object that supports replacement within a string.
Replaces text in a string, using this regular expression.
Report all bugs affecting this scenario
Report an error if expected value and actual value do not match.
Report an error if getNavigateToItems does not find any matched searchValue.
Report constraint errors only if the constraint is not the empty object type
Report error identifier expected
Report error if function is not top level function declaration
Report error if multiple files write into same file
Report error if the output overwrites input file
Report error only if there are no parse errors in file
Report implicit any error within type if possible, otherwise report error on declaration
Report implicit any errors unless this is a private property within an ambient declaration
Report specific message if provided with one.
Report structural errors only if we haven't reported any errors yet
Report that we need an identifier.
Reports errors for conflicting identifier names.
Represents a parsed source file with metadata
Represents a set of parsed source files and options
Represents a set of signature help items, and the preferred item that should be selected.
Represents a single signature to show in signature help.
Represents the completion of an asynchronous operation
Request a stored SourceFile with a given fileName and compilationSettings.
Request to reload the project structure for all the opened files
Request whose sole parameter is a file name.
Required, whereas the member inherited from FunctionDeclaration is optional
Reserved words are between 2 and 11 characters long and start with a lowercase letter
Reserved words are not allowed to be used as an identifier in parameter declaration
Resets the current item in the collection to the first item.
Resolve a given name for a given meaning at a given location.
Resolve the signatures, preferring constructors
Resolve the symbol as a type so that we can provide a more useful hint for the type serializer.
Resolve the symbol as a value to ensure the type can be reached at runtime during emit.
Resolve type so we know which symbol is referenced
Resolved (non-alias) target of an alias
Resolved base constructor type of class
Resolved exports of module
Resolved object, union, or intersection type
Resolved symbol is alias
Resolves a decorator as if it were a call expression.
Resolves a local path to a path which is absolute to the base of the emit
Resolves a qualified name and any involved aliases
Resolving the members of a class requires us to resolve the base class of that class.
Response by server to client request message.
Response message body for "projectInfo" request
Response message for "projectInfo" request
Response object for a SignatureHelpRequest.
Response to "brace" request.
Response to "configure" request.
Response to "references" request.
Response to "reload" request.
Rest element has an array type with the same element type as the parent type
Rest parameter with generic
Result is union of signatures collected (return type is union of return types of this signature set)
Resulting type should be a number, so toExponential should be valid, charAt should not
Results should have the same type as the third operand
Retrieves a collection of all a objects that have a name and/or id property.
Retrieves a collection of all a objects that specify the href property and all area objects in the document.
Retrieves a collection of all applet objects in the document.
Retrieves a collection of all cells in the table row.
Retrieves a collection of all embed objects in the document.
Retrieves a collection of all script objects in the document.
Retrieves a collection of all tBody objects in the table.
Retrieves a collection of objects based on the specified element name.
Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
Retrieves a collection of the area objects defined for the given map object.
Retrieves a collection, in source order, of all controls in a given form.
Retrieves a collection, in source order, of all form objects in the document.
Retrieves a collection, in source order, of img objects in the document.
Retrieves a form object or an object from an elements collection.
Retrieves a reference to the form that the object is embedded in.
Retrieves a select object or an object from an options collection.
Retrieves a string of the URL where the object tag can be found.
Retrieves a value that indicates the current state of the object.
Retrieves an existing object with the specified ProgID from memory, or creates a new one from a file.
Retrieves an object from various collections.
Retrieves or sets the text in the entry field of the textArea element.
Retrieves or sets the text of the object as a string.
Retrieves the CSS language in which the style sheet is written.
Retrieves the URL of the plug-in used to view an embedded document.
Retrieves the URL to an external file that contains the source code or data.
Retrieves the caption object of a table.
Retrieves the contained object.
Retrieves the document object of the page or frame.
Retrieves the object of the specified.
Retrieves the palette used for the embedded document.
Retrieves the position of the object in the cells collection of a row.
Retrieves the position of the object in the collection.
Retrieves the position of the object in the rows collection for the table.
Retrieves the string associated with a command.
Retrieves the tFoot object of the table.
Retrieves the tHead object of the table.
Retrieves the type of control.
Retrieves the type of select control based on the value of the MULTIPLE attribute.
Retrieves whether the object is fully loaded.
Return "null" if the enclosing scope can't be found.
Return Unknown to let the caller know.
Return a cached result if super-statement is already found.
Return a copy of the list
Return a list of all indices where a string occurs.
Return a list of symbols that are interesting to navigate to
Return a module of either the given text in the first argument, or of the source file path
Return a new instance of the language service shim, up-to-date wrt to typecheck.
Return a temp variable name to be used in `export default` statements.
Return b to the caller as a rightOperand
Return code used by getEmitOutput function to indicate status of the function
Return contextual type of parameter or undefined if no contextual type is available
Return existing SourceFile object if one is available
Return properties of an object type or an empty array for other types
Return the String value whose elements are, in order, the elements in the List elements.
Return the cached type if one is available.
Return the components of date-time formats.
Return the contextual signature for a given expression node.
Return the contextual type for a given expression node.
Return the count for whichever signature doesn't have rest parameters.
Return the declared type to reduce follow-on errors
Return the index type of the given kind in the given type.
Return the indexing info of the given kind in the given type.
Return the inferred type for a binding element
Return the inferred type for a variable, parameter, or property declaration
Return the next available name in the pattern _a ...
Return the signatures of the given kind in the given type.
Return the symbol for the property with the given name in the given type.
Return the symbol of the for-in variable declared or referenced by the given for-in statement.
Return the type associated with a variable, parameter, or property declaration.
Return the type implied by a binding pattern element.
Return the type implied by a binding pattern.
Return the type implied by an array binding pattern
Return the type implied by an object binding pattern
Return the type of a binding element parent.
Return the type of the given property in the given type, or undefined if no such property exists
Return the union of the element types, and string if there was a string constituent.
Return true if identifier resolves to an exported member of a namespace
Return true if identifier resolves to an imported identifier
Return true if the given contextual type is a tuple-like type
Return true if the given identifier is classified as an IdentifierName
Return true if the given type is considered to have numeric property names.
Return true if the given type is part of a deeply nested chain of generic instantiations.
Return true if the given type is the constructor type for an abstract class
Return true if there was no error, false if there was an error.
Return true if type is of the given kind.
Return true if type might be of the given kind.
Return true if we can parse an array or object binding pattern with no errors
Return true if we have the start of a signature member
Return type is Object
Return type is boolean
Return type is number
Return type is string
Returning false means that node was not examined and caller needs to dive into the node himself.
Returning undefined here will cause our caller to rewind to where we started from.
Returns 'true' if the code was actually indented, false otherwise.
Returns JSON-encoded value of the type TextInsertion.
Returns a  ValidityState object that represents the validity states of an element.
Returns a Boolean value indicating the state of the global flag (g) used with a regular expression.
Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression.
Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression.
Returns a Boolean value that indicates the current state of the command.
Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).
Returns a Boolean value that indicates whether or not a pattern exists in a searched string.
Returns a Boolean value that indicates whether the current command is supported on the current range.
Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
Returns a FileList object on a file type input object.
Returns a Javascript array with all the elements in the VBArray.
Returns a String value that is made from count copies appended together.
Returns a Symbol object from the global symbol registry matching the given key if found.
Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.
Returns a copy of the text of the regular expression pattern.
Returns a date as a string value appropriate to the host environment's current locale.
Returns a date as a string value in ISO format.
Returns a date as a string value.
Returns a date converted to a string using Universal Coordinated Time (UTC).
Returns a date converted to a string using the current locale.
Returns a key from the global symbol registry matching the given Symbol if found.
Returns a new array from a set of elements.
Returns a new unique Symbol value.
Returns a pseudorandom number between 0 and 1.
Returns a reference to the collection of elements contained by the object.
Returns a reference to the first object with the specified value of the ID or NAME attribute.
Returns a section of a string.
Returns a section of an ArrayBuffer.
Returns a section of an array.
Returns a specified number of characters from an input stream, starting at the current pointer position.
Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.
Returns a string containing a number represented in exponential notation.
Returns a string indicating the flags of the regular expression in question.
Returns a string representation of a date.
Returns a string representation of a string.
Returns a string representation of an array.
Returns a string representation of an object.
Returns a string representing a number in fixed-point notation.
Returns a string that contains the concatenation of two or more strings.
Returns a string that specifies whether the client can play a given media resource type.
Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale.
Returns a supplied numeric expression rounded to the nearest number.
Returns a time as a string value appropriate to the host environment's current locale.
Returns a time as a string value.
Returns a value as a string value appropriate to the host environment's current locale.
Returns a value that indicates whether new properties can be added to an object.
Returns all characters from an input stream.
Returns all the properties of the Jsx.IntrinsicElements interface
Returns an AudioTrackList object with the audio tracks for a given video element.
Returns an array of all symbol properties found directly on object o.
Returns an array of key, value pairs for every entry in the array
Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
Returns an entire line from an input stream.
Returns an implementation-dependent approximation to the cube root of number.
Returns an list of keys in the array
Returns an list of values in the array
Returns an object representing the current error state of the audio or video element.
Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document.
Returns e (the base of natural logarithms) raised to a power.
Returns length of path root (i.e. length of "/", "x:/", "//server/share/, file:///user/files")
Returns script API version.
Returns the URL that can be used to access the provided service.
Returns the Unicode value of the character at the specified location.
Returns the absolute value of a number (the value without regard to whether it is positive or negative).
Returns the angle (in radians) from the X axis to a point (y,x).
Returns the angle (in radians) from the X axis to a point.
Returns the arc cosine (or inverse cosine) of a number.
Returns the arcsine of a number.
Returns the arctangent of a number.
Returns the base 10 logarithm of a number.
Returns the base 2 logarithm of a number.
Returns the character encoding used to create the webpage that is loaded into the document object.
Returns the constant value this property access resolves to, or 'undefined' for a non-constant
Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
Returns the content type of the object.
Returns the cosine of a number.
Returns the current item in the collection
Returns the current value of the document, range, or current selection for the given command.
Returns the duration in seconds of the current media resource.
Returns the effective argument count for a node that works like a function invocation.
Returns the effective argument type for the provided argument to a decorator.
Returns the effective argument type for the third argument to a decorator.
Returns the effective arguments for an expression that works like a function invocation.
Returns the effective type for the second argument to a decorator.
Returns the effective type of the first argument to a decorator.
Returns the element for the specified x coordinate and the specified y coordinate.
Returns the elements of an array that meet the condition specified in a callback function.
Returns the error message that would be displayed if the user submits the form, or an empty string if no error message.
Returns the greatest number less than or equal to its numeric argument.
Returns the hyperbolic cosine of a number.
Returns the hyperbolic sine of a number.
Returns the hyperbolic tangent of a number.
Returns the index of the first occurrence of a value in an array.
Returns the index of the last occurrence of a specified value in an array.
Returns the index of the last occurrence of a value in an array.
Returns the input field value as a number.
Returns the integral part of the a numeric expression, x, removing any fractional digits.
Returns the inverse hyperbolic cosine of a number.
Returns the inverse hyperbolic sine of a number.
Returns the inverse hyperbolic tangent of a number.
Returns the larger of a set of supplied numeric expressions.
Returns the largest available index for a given dimension.
Returns the last element of an array if non-empty, undefined otherwise.
Returns the last occurrence of a substring in the string.
Returns the length of a String object.
Returns the name of the function.
Returns the names of the enumerable properties and methods of an object.
Returns the names of the own properties of an object.
Returns the natural logarithm (base e) of a number.
Returns the natural logarithm of 1 + x.
Returns the nearest single precision float representation of a number.
Returns the node flags for this node and all relevant parent nodes.
Returns the number of dimensions (1-based).
Returns the number of leading zero bits in the 32-bit binary representation of a number.
Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.
Returns the object o.
Returns the position of the first occurrence of a substring.
Returns the primitive value of the specified object.
Returns the prototype of an object.
Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
Returns the result of 32-bit multiplication of two numbers.
Returns the sign of the x, indicating whether x is positive, negative or zero.
Returns the sine of a number.
Returns the smaller of a set of supplied numeric expressions.
Returns the smallest available index for a given dimension.
Returns the smallest number greater than or equal to its numeric argument.
Returns the square root of a number.
Returns the square root of the sum of squares of its arguments.
Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC.
Returns the substring at the specified location within a String object.
Returns the tHead element object if successful, or null otherwise.
Returns the tangent of a number.
Returns the target object.
Returns the target of an export specifier without following aliases
Returns the value of a base expression taken to a specified power.
Returns the value of the data at the cursor's current position.
Returns true if 'keyword2' can legally follow 'keyword1' in any language construct.
Returns true if 'span' contains 'other'.
Returns true if any preamble code was emitted.
Returns true if at least one token was consumed from the stream
Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.
Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.
Returns true if node and its subnodes were successfully traversed.
Returns true if node is a valid property access, and false otherwise.
Returns true if node should be treated as classified and no further processing is required.
Returns true if passed value is finite.
Returns true if start of variable declaration list was emitted.
Returns true if the class or interface member given by the symbol is free of "this" references.
Returns true if the interface given by the symbol is free of "this" references.
Returns true if the position is within a comment
Returns true if the value passed is a safe integer.
Returns true if the value passed is an integer, false otherwise.
Returns true if the values are the same value, false otherwise.
Returns true if there exists a module that introduces entities on the value side.
Returns true if this node contains a parse error anywhere underneath it.
Returns true if this node is missing from the actual source code.
Returns true if we should abort parsing.
Returns true iff React would emit this tag name as a string rather than an identifier or qualified name
Returns true iff the JSX element name would be a valid JS identifier, ignoring restrictions about keywords not being identifiers
Returns whether a form will validate when it is submitted, without having to submit it.
Returns whether an element will successfully validate based on forms validation rules and constraints.
Reverse mapping of enum returns string name of property
Reverses the elements in an Array.
Review 2's-complement if this is confusing.
Rewrite element to a declaration that accesses array element at index i
Rewrite element to a declaration with an initializer that fetches property
Right now we just sort by kind first, and then by name of the item.
Right of dot member completion list
Root fileNames for compilation
Run the block, and if the block doesn't raise an error, run the children.
Run the children of the scenario (other scenarios and test cases).
Run the resulting test
Run the test case block and fail the test if it raised an error.
Runs TypeScript or Javascript code.
Runs after each individual 'it' block in the current 'describe' is run
Runs before each individual 'it' block in the current 'describe' is run
Runs once after all 'it' blocks in the current 'describe' are run
Runs once before any 'it' blocks in the current 'describe' are run
S is a subtype of a type T, and T is a supertype of S, if one of the following is true, where S' denotes the apparent type (section 3.8.1) of S:
S is not a tuple- like type and the numeric index signature type of S is assignable to the target given in E.
S is the type Any, or
S is union type and each constituent type of S is a subtype of T
S' and T are object types and, for each member M in T..
SVG-related properties
Same as h, i, j with construct signatures
Same as module.exports
Same class, everything is visible
Sampling of stuff from AisIn1_1_1
Scanner that is currently used for formatting
Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.
See LICENSE.txt in the project root for complete license information.
See examples in tests/cases/conformance/jsx/tsxReactEmitWhitespace.tsx
See https://github.com/nodejs/node/issues/4002
See if it is a property assignment, and if so use the property name
See if it is a var initializer.
See if the Callback needs to be handled using specific one or default one
See if the casing indicates we're starting a new word.
See if this is a doc comment.
See if this is the start of a generic invocation.
See if we can find a keyword instead.
See if we can find some symbol with the call expression name that has call signatures.
See if we can index as a property.
See signatureAssignableTo, compareSignaturesIdentical
See signatureRelatedTo, compareSignaturesIdentical
See the comment in isReusableVariableDeclaration for why we do this.
See the comments above for more information.
See what we're being asked to do
Semantic filtering of signature help
Semicolon Formating should not be triggered inside an unterminated string literal
Semicolon Formating should not be triggered inside comments
Sends a specified number of blank lines (newline characters) to an output stream.
Sends a string followed by a newline character to an output stream.
Sends a string to an output stream.
Separator for the entry found
Sequence number of the message
Sequence number of the request message.
Serialize an object graph into a JSON string.
Serializes a TypeReferenceNode to an appropriate JS constructor value.
Serializes the parameter types of a function or the constructor of a class.
Serializes the return type of function.
Serializes the type of a declaration to an appropriate JS constructor value.
Server does not currently send a response to a change request.
Server-initiated event message
Services.EditorOptions
Services.FormatCodeOptions
Set accessor only, type of the property is Any for an unannotated set accessor
Set accessor only, type of the property is the param type of the set accessor
Set breakpoint in first binding element
Set breakpoint in the function declaration body
Set breakpoint on the decorator emit
Set if module declaration is an augmentation for the global scope
Set of flags specific to Node
Set on parent if on same line otherwise on first statement
Set span as if on while keyword
Set span in function body
Set span on previous token if it starts on same line otherwise on the first statement of the block
Set span on while expression
Set the current start to point to the end of the current marker to ignore its text
Set the indent override string on the indent node and on every parent (on different line) after adjusting the indent by the negative delta
Set the indentation on all the siblings to be the same as indentNode
Set the new margin for the description column if necessary.
Set the option to false first
Set the option to true
Set the spaces to remove after asterisk as margin if not already set
Set the span on whole function declaration
Set the special options that depend on other testcase options
Set the symbol for functions and their overloads
Set the values specified using json
Set up the members collection if it doesn't exist already
Sets a custom error message that is displayed when a form is submitted.
Sets a value or an array of values.
Sets or gets a value that indicates whether the document can be edited.
Sets or gets a value that you can use to implement your own width functionality for the object.
Sets or gets the URL for the current document.
Sets or gets the color of all active links in the document.
Sets or gets the color of the document links.
Sets or gets the color of the links that the user has visited.
Sets or gets the current value of a progress element.
Sets or gets the foreground (text) color of the document.
Sets or gets the security domain of the document.
Sets or gets whether clicks in this region cause action.
Sets or retrieves a URI to a long description of the object.
Sets or retrieves a URL to be loaded by the object.
Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
Sets or retrieves a character string that can be used to implement your own declare functionality for the object.
Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
Sets or retrieves a comma-separated list of content types.
Sets or retrieves a description and/or structure of the object.
Sets or retrieves a destination URL or an anchor point.
Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
Sets or retrieves a list of header cells that provide information for the object.
Sets or retrieves a message to be displayed while an object is loading.
Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
Sets or retrieves a text alternative to the graphic.
Sets or retrieves a value that indicates the background color behind the object.
Sets or retrieves a value that indicates the reading order of the object.
Sets or retrieves a value that indicates the table alignment.
Sets or retrieves a value that you can use to implement your own ch functionality for the object.
Sets or retrieves a value that you can use to implement your own chOff functionality for the object.
Sets or retrieves a value that you can use to implement your own label functionality for the object.
Sets or retrieves abbreviated text for the object.
Sets or retrieves how many rows in a table the cell should span.
Sets or retrieves how text and other content are vertically aligned within the object that contains them.
Sets or retrieves how the object is aligned with adjacent text.
Sets or retrieves how to handle wordwrapping in the object.
Sets or retrieves how to send the form data to the server.
Sets or retrieves reference information about the object.
Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
Sets or retrieves the DTD version that governs the current document.
Sets or retrieves the Internet media type for the code associated with the object.
Sets or retrieves the MIME encoding for the form.
Sets or retrieves the MIME type for the associated scripting engine.
Sets or retrieves the MIME type of the object.
Sets or retrieves the URL of the component.
Sets or retrieves the URL of the file containing the compiled Java class.
Sets or retrieves the URL property that will be loaded after the specified time has elapsed.
Sets or retrieves the URL that references the data of the object.
Sets or retrieves the URL to which the form content is sent for processing.
Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
Sets or retrieves the alignment of the caption or legend.
Sets or retrieves the alignment of the object relative to the display or table.
Sets or retrieves the amount of additional space between the frames.
Sets or retrieves the amount of space between cells in a table.
Sets or retrieves the amount of space between the border of the cell and the content of the cell.
Sets or retrieves the border color of the object.
Sets or retrieves the character set used to encode the object.
Sets or retrieves the content type of the resource designated by the value attribute.
Sets or retrieves the coordinates of the object.
Sets or retrieves the current typeface family.
Sets or retrieves the data type of the value attribute.
Sets or retrieves the date and time of a modification to the object.
Sets or retrieves the default or selected value of the control.
Sets or retrieves the encoding type for the form.
Sets or retrieves the event for which the script is written.
Sets or retrieves the file name or path specified by the object.
Sets or retrieves the font size of the object.
Sets or retrieves the frame heights of the object.
Sets or retrieves the frame name.
Sets or retrieves the frame widths of the object.
Sets or retrieves the group of cells in a table to which the object's information applies.
Sets or retrieves the height and width units of the embed object.
Sets or retrieves the height of the object.
Sets or retrieves the horizontal margin for the object.
Sets or retrieves the host name part of the location or URL.
Sets or retrieves the hostname and port number of the location or URL.
Sets or retrieves the index of the selected option in a select object.
Sets or retrieves the initial contents of the object.
Sets or retrieves the language code of the object.
Sets or retrieves the left and right margin widths before displaying the text in a frame.
Sets or retrieves the maximum number of characters that the user can enter in a text control.
Sets or retrieves the media type.
Sets or retrieves the name of an input parameter for an element.
Sets or retrieves the name of the object.
Sets or retrieves the number columns in the table that the object should span.
Sets or retrieves the number of columns in the group.
Sets or retrieves the number of columns in the table.
Sets or retrieves the number of horizontal rows contained in the object.
Sets or retrieves the number of objects in a collection.
Sets or retrieves the number of rows in the list box.
Sets or retrieves the object that is bound to the event script.
Sets or retrieves the object to which the given label object is assigned.
Sets or retrieves the ordinal position of an option in a list box.
Sets or retrieves the port number associated with a URL.
Sets or retrieves the protocol portion of a URL.
Sets or retrieves the relationship between the object and the destination of the link.
Sets or retrieves the shape of the object.
Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
Sets or retrieves the state of the check box or radio button.
Sets or retrieves the status of an option.
Sets or retrieves the status of the script.
Sets or retrieves the subsection of the href property that follows the number sign (#).
Sets or retrieves the substring of the href property that follows the question mark.
Sets or retrieves the text string specified by the option tag.
Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
Sets or retrieves the value indicated whether the content of the object is read-only.
Sets or retrieves the value indicating whether the control is selected.
Sets or retrieves the value of a list item.
Sets or retrieves the value of an input parameter for an element.
Sets or retrieves the value specified in the content attribute of the meta object.
Sets or retrieves the value which is returned to the server when the form control is submitted.
Sets or retrieves the vertical margin for the object.
Sets or retrieves the way the border frame around the table is displayed.
Sets or retrieves the width of the border to draw around the object.
Sets or retrieves the width of the object.
Sets or retrieves the window or frame at which to target content.
Sets or retrieves whether the browser automatically performs wordwrap.
Sets or retrieves whether the caption appears at the top or bottom of the table.
Sets or retrieves whether the frame can be scrolled.
Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
Sets or retrieves whether the image is a server-side image map.
Sets or retrieves whether the option in the list box is the default item.
Sets or retrieves whether the user can resize the frame.
Sets or retrieves whether to display a border for the frame.
Sets or retrieves which dividing lines (inner borders) are displayed.
Sets the date and time value in the Date object.
Sets the hour value in the Date object using local time.
Sets the hours value in the Date object using Universal Coordinated Time (UTC).
Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).
Sets the milliseconds value in the Date object using local time.
Sets the minutes value in the Date object using Universal Coordinated Time (UTC).
Sets the minutes value in the Date object using local time.
Sets the month value in the Date object using Universal Coordinated Time (UTC).
Sets the month value in the Date object using local time.
Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).
Sets the numeric day-of-the-month value of the Date object using local time.
Sets the prototype of a specified object o to  object proto or null.
Sets the seconds value in the Date object using Universal Coordinated Time (UTC).
Sets the seconds value in the Date object using local time.
Sets the start and end positions of a selection in a text field.
Sets the text for the scanner to scan.
Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.
Sets the year of the Date object using local time.
Sets the year value in the Date object using Universal Coordinated Time (UTC).
Setter parameter type
Setters have to have type named and cannot infer it so, the type should always be named
Setting the parents on the new tree should be very fast.
Setup global builtins
Setup some globals based on the current environment
Share a single scanner across all calls to parse a source file.
Shebangs check must only be done at the start of the file
Short-circuit if the class tag is using an element type 'any'
Should all be strings.
Should be "yield +1".
Should be able to reuse all the parameters.
Should be able to reuse most of the enum elements.
Should be able to reuse most of the type members.
Should be allowed, but currently give error ('supplied parameters do not match any signature of the call target')
Should be allowed, can access properties as well as invoke
Should be allowed, can assign to var with compatible signature
Should be allowed, method on base prototype
Should be allowed, we will not restrict assignment
Should be an error but isn't
Should be any (no property found)
Should be called only on prologue directives (isPrologueDirective(node) should be true)
Should be error that couldnt find symbol field1
Should be fine (previous bug report visibility error).
Should be global v2 of type number again
Should be of type void, not E.
Should be ok because signature type parameters get erased to any
Should be ok to have var 'm' as module is non instantiated
Should be okay, as we suppress implicit 'any' property access checks
Should be unreachable.
Should be valid (rest params correspond to an infinite expansion of parameters)
Should cause runtime import
Should cause runtime import - interesting optimization possibility, as gets inlined to 0.
Should compile, since the second declaration of a overrides the first
Should error for the same reason
Should error on "abc" because it is not a Function
Should error, as .ts preferred over .d.ts
Should error, as declaration should win
Should error, as last one wins, and is wrong type
Should error, instance data property not a public instance member function
Should error, instance property, not a public instance member function
Should error, private not public instance member function
Should fail (private x originates in the same declaration, but different types)
Should fail because the iterator is not iterable
Should fail, I1 not exported.
Should fail, type I1 of visible member C1.m1 not exported.
Should get an error that we are assigning a string to a number
Should give error for attempting to reference b.
Should give error for attempting to use type query on b.
Should give type 'any'.
Should have no effect on S1.SS1.ClassA above because it is not exported
Should have number members, and not enum members
Should not be allowed
Should not be allowed -- type of 'f' is incompatible with 'I'
Should not be an error
Should not be called directly.
Should not be emitted
Should not crash the compiler
Should not error that property type of get are incomaptible
Should not infer string because it is a static property
Should not produce an error
Should not produce errors - can reference later parameters if they occur within a function expression initializer.
Should not return error at all.
Should only be accessed through the Program instance.
Should only be the one error in the file
Should only have the enum's own members, and nothing else
Should parse as a union type, not a bitwise 'or' of (32 as number) and 'string'
Should report an implicit 'any'.
Should report error only once for instantiated module
Should report error that W is private
Should report no error at all because error is internal to F
Should return any (widened form of undefined)
Should return error for implicit `any` on parameter.
Should return error for implicit any on `new` and `foo`.
Should return error for implicit any on return type.
Should return error for implicit any.
Should succeed (private x originates in the same declaration)
Should trigger an '_arguments' capture into function 'h'
Should work, private type I1 of visible class C1 only used in private member m1.
Should yield an implicit 'any' error
Should yield an implicit 'any' error.
Should yield error (a is not a value)
Should yield error (d is not a value)
Should yield error (e is not a value)
Shouldn't be an error
Shouldn't be filtered
Shouldn't change the number of errors
Shouldn't compile b.B is not defined in C
Shouldn't work, negatives are not allowed.
Shouldnt emit I and C2 into the js file and emit C and I in .d.ts file
Shouldnt error on this overload
Shouldnt get compiled so shouldnt error
Signature help information for a single parameter
Signature help items found in the response of a signature help request.
Signatures aren't identical, do not use
Similar to above, but T is now constrained.
Similar to above, but optionality does not matter here.
Similarly valid octalIntegerLiteral must have at least one octal digit following o or O.
Simple Hash table with list of keys and values matching each other at the given index
Simulate another LS getting that document.
Simulate another LS getting the document at another version.
Simulate one LS getting the document.
Simulated typing tests.
Since parameters are applied outer-to-inner, only the last outer parameter needs to be checked.
Since we already checked for ExportAssignment, this really could only be an Import
Since we dont unwind inner any more, it is error here
Single Line Comment with more than one blank line
Single line comment of style //....
Single line comment with more than one blank line
Single-line comment ranges include the beginning '//' characters but not the ending line break.
Skip Program since it has no indentation
Skip checking lib.d.ts to help speed up tests.
Skip folders that are inaccessible
Skip identifiers produced only from the current location
Skip over 'i' and 'n'
Skips a specified number of characters when reading from an input text stream.
Skips the next line when reading from an input text stream.
Slice off 'node bisect-test.js' from the commandline args
So "Aaa" will come before "bar".
So consider it visible outside its declaration scope.
So for JavaScript files, '.jsx' is only emitted if the input was '.jsx', and JsxEmit.Preserve.
So if this failure is on preceding type parameter, this type parameter is the new failure index.
So in this case we don't format.
So in this case we format.
So it must be done now.
So just do a full parse instead.
So just use 'undefined' here.
So move left by 1 offset from marker 5 to locate the caret in this line.
So move right by 1 offset from marker 4 to locate the caret in this line.
So should inject new _this capture
So should inject new _this capture into function inner
So skipping it is an optimization.
So that a test doesn't have side effects for tests run after it, restore the compiler settings to their previous state.
So the classification will go back to being an identifier.
So the parser will attempt to parse out a type, and will create an actual node.
So there's no match at all.
So this definitely doesn't match.
So we definitely want to treat this as a type arg list.
So we disable these parameters here before moving on.
So we don't want an error on 'concat'.
So we need just a bit of lookahead to ensure that it can only be a signature.
So we parse out a primary expression to start with.
So, first, we try to just parse out a BinaryExpression.
So, in this case the arg count will be 2.
Some applications save a working file via rename operations
Some bundlers (SystemJS builder) sometimes want to rename dependencies.
Some constituent is a string and target is less than ES5 (because in ES3 string is not indexable).
Some constituent is neither a string nor an array.
Some extra spacing if this isn't the first file
Sort errors by position because tslint doesn't
Sort our options by their names, (e.g. "--noImplicitAny" comes before "--watch")
Sort the file name list to make the recently touched files come first
Source and target are both unions or both intersections.
Source file is always visible
Source files are declarations when they are external modules.
Source is a union or intersection type, infer from each constituent type
Source map's file field - .js file name
Source map's mapping field - encoded source map spans
Source map's names field - list of names that can be indexed in this source map
Source map's sourceRoot field - location where the sources will be present if not ""
Source map's sources field - list of sources that can be indexed in this source map
Source map's sourcesContent field - list of the sources' text to be embedded in the source map
SourceFile objects account for most of the memory usage by the language service.
Sourcemap data that will get encoded
Space added after '()'
Space after backslash
Space within type literal removed
Spaces for anything not declared a 'default export'.
Span on close brace token
Span on first variable declaration
Span only on this declaration
Spans to highlight in file.
Special case for binary operators (that are keywords).
Special case that can't fit in the loop.
Special cases for the tokens that don't show up in the tree, such as curly braces and comments
Special handling for shebang
Special handling for unknown / resolving types, they should show up as any and not unknown or __resolving
Special handling of unary operators.
Specialized to any because no type argument was specified
Specifically, a template only can end in a TemplateTail or a Missing literal.
Specifies the ID of a pre-defined datalist of options for an input element.
Specifies the beginning and end of the document body.
Specifies the media protection manager for a given media pipeline.
Specifies the output device id that the audio will be sent to.
Specifies the properties of a border drawn around an object.
Specifies the purpose of the audio or video media, such as background audio or alerts.
Specifies whether autocomplete is applied to an editable text field.
Specifies whether or not to enable low-latency playback on the media element.
Speculatively look ahead to be sure, and rollback if not.
Split a string into substrings using the specified separator and return them as an array.
Squiggle the entire line.
Standard HTML Attributes
Start Debugger Test Code
Start new file on new line
Start position of text of current token
Start position of whitespace before current token
Starting file location at which text applies.
Starting file location of symbol.
Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.
Starts of conflict marker trivia
Statements in switch clause
Static 'super' reference
Staying at T or S should be fine
Staying at T or S should keep the constraint.
Still an error because b is declared inside the function
Stop the walk if this node is not related to "minChar"
Store edit range + new length of script
Store original token kind if it is not just an Identifier so we can report appropriate error later in type checker
Store when we last tried to cancel.
Stores a line map for the file.
Stores an Float32 value at the specified byte offset from the start of the view.
Stores an Float64 value at the specified byte offset from the start of the view.
Stores an Int16 value at the specified byte offset from the start of the view.
Stores an Int32 value at the specified byte offset from the start of the view.
Stores an Int8 value at the specified byte offset from the start of the view.
Stores an Uint16 value at the specified byte offset from the start of the view.
Stores an Uint32 value at the specified byte offset from the start of the view.
Stores an Uint8 value at the specified byte offset from the start of the view.
Strict mode reserved words
String literal types (TypeFlags.StringLiteral)
String named and numeric named properties conflict if they would be equivalent after ToNumber on the property name.
String representation of type of 'x' should be truncated in error message
String.raw is intended for use as a tag function of a Tagged Template String.
Stuff related to the subfile we're parsing
Submit a POST request to the server to do the given action (ex WRITE, DELETE) on the provided URL
Substitution is a string that can contain zero or one '*'.
Support class for baseline files
Suspends script execution for a specified length of time, then continues execution.
Symbol associated with type (if any)
Symbol declared by node (initialized by binding)
Symbol in this context resolves to the global Symbol object
Symbol is accessible if it by itself is accessible
Symbols are not allowed at all in arithmetic expressions
Syntactically and semantically checks a call or new expression.
T is a union type and S is assignable to at least one constituent type of T.
T is fixed, should be string
THIS, TRUE, FALSE, NULL
TODO (drosen): De-duplicate code between related functions.
TODO (drosen): Parse string literal types in JSDoc as well.
TODO (drosen): Reconcile with 'emitMemberFunctions'.
TODO (drosen): TaggedTemplateExpressions may eventually support type arguments.
TODO (drosen): The CURRENT behavior is that findAllRefs doesn't work on 'this' or 'super' keywords.
TODO (drosen): This should be enabled in a later release - currently breaks rename.
TODO (drosen): we should *also* get another classification type for these literals.
TODO (yuisu): Remove this check in else-if when SyntaxKind.Construct is moved and ambient context is handled
TODO Should render login page that shows auth options
TODO filter meaning based on the current context
TODO to handle when we look into sourcemaps for computed properties, for now use propName
TODO(cyrusn): Find a way to support this for unicode digits.
TODO(cyrusn): get the gamut of comparisons that VS already uses here.
TODO(drosen): Currently completion entry details passes the SemanticMeaning.All instead of using semanticMeaning of location
TODO(drosen): use contextual SemanticMeaning.
TODO(jfreeman): Deal with computed properties in error reporting.
TODO(jfreeman): These are methods, so handle computed name case
TODO/REVIEW: this doesn't work quite right in the browser if a multi file test has files whose names are just the right length relative to one another
TODO: Allow `this` types for interfaces
TODO: Check that target label is valid
TODO: Consider doing this at least some of the time for higher fidelity.
TODO: Consider redesigning this using modules so that we can use non-unique names of classes and bundle them with the test code.
TODO: Find an implementation of isIdenticalTo that works.
TODO: Fix path joining
TODO: Handle generic call with incomplete syntax
TODO: It would be nice to be able to get rid of this.
TODO: Make this a more specific error and decouple it from the exclusion logic.
TODO: Review for error recovery
TODO: Type baselines (need to refactor out from compilerRunner)
TODO: add successor as catch block/finally block if present
TODO: assert this offset is actually on the line
TODO: avoid duplicate code (with formatonkey)
TODO: check for while (true)
TODO: check for while (true) and then only continue if afterLoop has predecessors
TODO: fall-through from previous (+ to end of switch)
TODO: figure out a better solution to the API exposure problem.
TODO: figure out what to do with the unused arguments.
TODO: get these options from host
TODO: handle FormatCodeOptions
TODO: it should be moved into a namespace though.
TODO: make sure that enum still disallow template literals as member names
TODO: move these to enums
TODO: new with length TokenID.LimFixed
TODO: no emit support with pull yet
TODO: no need for the tolowerCase call
TODO: not sure why Utils.evalFile isn't working with this, eventually will concat it like old compiler instead of eval
TODO: project tests don't work in the browser yet
TODO: refactor indent logic for use in emit
TODO: this is to force generation of implicit module in AST
TODO: this is used by VS, clean this up on both sides of the interface
TODO: we should get another classification type for these literals.
Take the element types of the array constituents.
Take the new pos instead since there is no change in emittedLine and column since last location
Takes an index for each dimension in the array, and returns the item at the corresponding location.
Takes the descriptors and forms a regexp that matches them as if they were literals.
Target is a value symbol, check that it is not hidden by a local declaration with the same name
Target is not a class or var, good error
Target type for an object literal (null if no target type)
Target type is type of construct signature
Target type is type of the prototype property
Target will be emitted as "this" argument
Technically a keyword is valid here as all identifiers and keywords are identifier names.
Technically, "of" is not a binary operator, but format it the same way as "in"
Technically, this signatures list may be incomplete.
Technically, type argument list types are probably safe to reuse.
Temp variable counter
TempFlags._i or TempFlags._n may be used to express a preference for that dedicated name.
Temporary assignment needed to emit root should highlight whole binary expression
Test case is json of below type in tests/cases/project/
Test conflict markers.
Test reading and writing files
Tests that number formatting is handled correctly.
Tests that the given value is valid for the given date-time component.
Tests whether a value is an array.
Tests whether the given object does not have the named property.
Tests whether the named options property is correctly handled by the given constructor.
Text of an item describing the symbol.
Text of diagnostic message.
Text of identifier (with escapes converted to characters)
Text of line containing the reference.
Text of string literal
Text-based snapshots do not support incremental parsing.
That means we're calling back into the host around every 1.2k of the file we process.
That way we don't match something like 'Class' when the user types 'a'.
That way when we lex we'll think we're still in a multiline comment.
That way when we lex we'll think we're still in a string literal.
The "scopeStartAST" of the returned scope is always valid.
The "this" type (undefined if none)
The '+' prefix operator is equivalent here to applying the abstract ToNumber operation.
The AST walker skips comments, but we might be in one, so check the pre/post comments for this node manually
The ArrayBuffer instance referenced by the array.
The ES6 spec permits export * declarations in a module to circularly reference the module itself.
The Foo accessors' return and param types should be contextually typed to the Foo field
The StringLiteral must specify a top - level external module name.
The TypeReferenceNode could not be resolved.
The TypeReferenceNode resolves to a Boolean-like type.
The TypeReferenceNode resolves to a Number-like type.
The TypeReferenceNode resolves to a String-like type.
The TypeReferenceNode resolves to a Void-like type.
The TypeReferenceNode resolves to an Array-like type.
The TypeReferenceNode resolves to any other type.
The TypeReferenceNode resolves to the ESSymbol type.
The Windows Script Host build version number.
The `parameterIndex` for a parameter decorator is always a number
The address or URL of the a media resource that is to be considered.
The allowReservedWords parameter controls whether reserved words are permitted after the first dot
The anyFunctionType contains the anyFunctionType by definition.
The argument count for a list is normally the number of non-comma children it has.
The argument selected in the set of parameters.
The base file name is not part of the common directory path
The base-10 logarithm of e.
The base-2 logarithm of e.
The body of a "references" response message.
The caller should have already tested whether the node has decorators.
The character offset (on the line) for the request (1-based).
The checker will then give an error that there is an empty declaration list.
The child ends entirely before this position.
The closest number to zero that can be represented in JavaScript.
The column number of the current character position in an input stream.
The command requested.
The command to execute
The constraint may need to be further instantiated with its 'this' type.
The contents are initialized to 0.
The contents of the file (with markers, etc stripped out)
The current caret position in the active file
The current line number in an input stream.
The current node does not have locals.
The current node is a block-scoped-container.
The current node is a container.
The current stack of Runnable objects
The decision to provide completion depends on the contextToken, which is determined through the previousToken.
The default value is -1, which appends the new cell to the end of the cells collection.
The default value is -1, which appends the new row to the end of the rows collection.
The definition locations of the item.
The directory in which sourcemap will be
The element must be a direct child of some node list in the tree.
The element will keep its position if possible.
The end marker of a single-line comment does not include the newline character.
The ending can be on the same line as the declaration.
The error, if any, that occurred when running 'block'
The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.
The exported symbol for an export default function/class node is always named "default"
The expression has an identifier, so use that as the name
The expression is restricted to a single identifier or a sequence of identifiers separated by periods
The file content (minus metacharacters) so far
The file for the request (absolute pathname required).
The file for which diagnostic information is reported.
The file in which the symbol is found.
The file locations referencing the symbol.
The file names that belong to the same project.
The file that's currently 'opened'
The file to which the spans apply
The file which trigged the searching and error-checking of the config file
The filename of the currently running script.
The files will be checked in list order.
The filter method calls the callbackfn function one time for each element in the array.
The first argument to a decorator is its `target`.
The first call to the callbackfn function provides this value as an argument instead of an array value.
The first gives the types for all expressions.
The first node that causes this file to be a CommonJS module
The first node that causes this file to be an external module
The flag is only allow once per test file
The flag is used to communicate this piece of information to the calling parseTerm, which intern will remove it.
The following block preserves behavior forbidding boolean returning functions from being assignable to type guard returning functions
The following checks only apply on a non-ambient instantiated module declaration.
The following members encode facts about particular kinds of types for use in the getTypeFacts function.
The following should all come back as strings.
The following should be of type 'any'.
The following values are supported.
The following variables are captured and modified by calls to chooseOverload.
The format of the string depends on the locale.
The format options to use during formatting and other code editing features.
The formating of the close curly should not be affected
The fourslash file state object we are generating
The full display name of the symbol.
The full path of the currently running script.
The function has a return type, but the return statement doesn't have an expression.
The function returns a value symbol of an identifier in the short-hand property assignment.
The functionality is not supported if the ts module is consumed outside of a node module.
The host does not know about this file.
The identity mapper and regular instantiation mappers do not need it.
The identityMapper object is used to indicate that function expressions are wildcards
The index of the first character in the string is zero.
The inference context this mapper was created from.
The initial value of Object.prototype.constructor is the standard built-in Object constructor.
The is the amount the nodes after the edit range need to be adjusted.
The item selected in the set of available help items.
The item's display text.
The items's kind (such as 'className' or 'parameterName' or plain 'text').
The largest number that can be represented in JavaScript.
The last file location at which the text applies.
The latest position of the start of an unflushed plain text area
The length in bytes of the array.
The length of the ArrayBuffer (in bytes).
The length of the array.
The library files are only loaded when the feature is used.
The line number for the request (1-based).
The list of normalized file name in the project, including 'lib.d.ts'
The list we got back can include commas.
The location of the .d.ts file we located, or undefined if resolution failed
The location within file at which the symbol is found.
The map method calls the callbackfn function one time for each element in the array.
The map of package names to their cached typing locations
The mappingThisOnly flag indicates that the only type parameter being mapped is "this".
The marker is about to be closed, ignore the 'invalid' char
The mathematical constant e.
The members and properties collections are empty for intersection types.
The members and properties collections are empty for union types.
The message describing what the command line switch does
The method will also keep track of the parameter index inside the expression.
The moment we get something that isn't trivia, then stop processing.
The more complex case is when we wish to assign a value, especially as part of a destructuring assignment.
The name of the found config file.
The name of the host executable (WScript.exe or CScript.exe).
The name of the symbol.
The name to be used for a non-boolean option's parameter
The natural logarithm of 10.
The natural logarithm of 2.
The new line character to be used.
The new line may or may not contain non-whitespace characters.
The node might be a list element (nonsynthetic) or a comma (synthetic).
The null and undefined types are guaranteed to be at the end of the constituent type list.
The number of language services that this source file is referenced in.
The offset in bytes of the array.
The one that can be used from program to get the actual source file
The only way to trigger these errors is to try checking its return type.
The options struct has a matching property, just set it directly
The original height of the image resource before sizing.
The original width of the image resource before sizing.
The outer type parameters are those defined by enclosing generic classes, methods, or functions.
The parameter index and argument index for the type guard target is matching.
The parent must not be valid.
The parent node to take its indentation is the first parent that has indentation.
The path to the project root directory
The path used to retrieve the safe list
The pattern matcher maintains an internal cache of information as it is used.
The position has to be: 1.
The position in newText the caret should point to after the insertion.
The prefix display parts.
The program is asking for this file, check first if the host can locate it.
The properties of JSX.ElementAttributesProperty
The properties of an object include both fields (objects) and functions.
The property access is of the primitive type symbol.
The raw strings contain the (escaped) strings of what the user wrote.
The reactNamespace symbol should be marked as 'used' so we don't incorrectly elide its import.
The reason this is done inside the Indenter is because it only affects indentation behavior.
The reason this is not automatic is that 'of' is a valid identifier.
The reduce method calls the callbackfn function one time for each element in the array.
The reduceRight method calls the callbackfn function one time for each element in the array.
The regExp argument is a Regular expression object.
The relative paths are relative to the common directory
The rename info should be the same for every project
The result is always of the Boolean primitive type.
The result is always of the Number primitive type.
The result is that the user sees validation messages without actually submitting.
The result is undefined if the reference isn't a dotted name.
The return value indicates whether an error was in fact reported.
The return value is an array containing a TextRange for each comment.
The return value is undefined if no comments were found.
The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
The rgExp argument is a Regular expression object.
The rules about 'yield' only apply to actual code/expression contexts.
The same applies to objects and arrays.
The same error should be observed in both cases.
The scope of a class constructor is hidden somewhere we don't expect :-S
The search scope is the container node
The search set contains at least the current symbol
The second argument to a decorator is its `propertyKey`
The second gives symbols for all identifiers.
The second is with a parameter.
The second operand is string
The second operand type is Object
The second operand type is any
The second operand type is boolean
The second operand type is number
The selectedItemIndex could be negative for several reasons.
The semantic error should not affect it
The separator display parts.
The serialized type of a PropertyDeclaration is the serialized type of its type annotation.
The serialized type of an AccessorDeclaration is the serialized type of the return type annotation of its getter or parameter type annotation of its setter.
The serialized type of any other FunctionLikeDeclaration is "Function".
The serialized type of any other node is "void 0".
The set of things we consider semantically classifiable.
The shorter chain should come first.
The signature help items.
The signature helps items for the parameters.
The signature's documentation
The signatures of a union type are those signatures that are present in each of the constituent types.
The size in bytes of each element in the array.
The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.
The span for which signature help should appear on a signature
The span of the document to actually collapse.
The span of the document to display when the user hovers over the collapsed span.
The specified symbol flags need to be reinterpreted as type flags
The square root of 0.5, or, equivalently, one divided by the square root of 2.
The square root of 2.
The start character offset of the symbol (on the line provided by the references request).
The substring includes the characters up to, but not including, the character indicated by end.
The subtlety is in the latter portion, as we cannot reliably say that anything that looks like a numeric literal is a numeric name.
The suffix display parts.
The symbol is considered matched with the symbol in the list if and only if all given parameters must matched.
The symbol was an internal symbol and does not have a declaration e.g. undefined symbol
The symbol's kind (such as 'className' or 'parameterName' or plain 'text').
The symbol's kind (such as 'className' or 'parameterName').
The temp name will be of the form _default_counter.
The template literal must have kind TemplateMiddleLiteral or TemplateTailLiteral.
The test suite will likely crash if you try 'jake runtests' with reference comments enabled.
The text of a chunk in lower case.
The text of the chunk.
The text property of a LiteralExpression stores the interpreted value of the literal in text form.
The text spans in this group
The text to display in the editor for the collapsed region.
The this object of the bound function is associated with the specified object, and has the specified initial parameters.
The total number of metacharacters removed from the file (so far)
The two names can be identical.
The type predicate type is assignable to the parameter type.
The type was not a PromiseLike, so it could not be unwrapped any further.
The unknownType indicates that an error already occurred (and was reported).
The user is probably in the middle of a generic type.
The value for January is 0, and other month values follow consecutively.
The value must be a non-negative number between 0 and the max value.
The value of previousIterationSymbol is undefined when the function is first called.
The version of the TypeScript compiler release
The version of the language service API
The weight of being first should be greater than the weight of being contiguous
Then check that the RHS is assignable to it.
Then it adds explicit `this` arguments to the static members.
Then the known content will be used upon opening instead of the disk copy
Then we recurse into the children of the node to bind them as well.
Then we sort case sensitively, so "aaa" will come before "Aaa".
Then we'll match 'U' against 'UI'.
Then, loop through all of the open files that are project roots.
There are many like it, but this one is mine.
There are situations in which a modifier like 'const' will appear unexpectedly, such as on a class member.
There are still more digits to decode, set the msb (6th bit)
There are three things we might try to look for.
There are two primary ways we can access `super` from within an async method.
There can be no body when there are parse errors.
There can never be a match.
There have been crashes that might be caused by this violation.
There is already an error, so no need to report one.
There is no property named 'props' on this instance type
There is no reason for this other than that JSON.stringify does not handle it either.
There is no type ElementAttributesProperty, return 'any'
There is remaining text on this line that will be part of next source span so write marker that continues
There may be a destructuring assignment on the left side
There should be a parse error here.
There should be no errors in this file
There should be no reused nodes between two trees that are fully parsed.
There should now be a single error.
There was a blank line between the last comment and this comment.
There weren't enough container parts to match against the pattern parts.
Therefore only get diagnostics for given file.
Therefore we have to clean out large objects after the test is done.
Therefore, if the name we find is purely an export specifier, it is not actually considered in scope.
Therefore, we will have to recursively emit each element in the bindingPattern.
These are all legal modifiers.
These are mostly just helpers for the unit test.
These are number of spaces writer is going to write at current indent
These events provide syntactic and semantic errors for a file.
These functions will add/remove named units and code to the compiler for each dependency.
These nodes should extend FunctionLikeDeclaration.
These rules are higher in priority than user-configurable rules.
These rules are lower in priority than user-configurable rules.
These should all be Opt3
These should all be of type 'any'
These should emit identically
These tentatively don't work.
They should be assignable to/from something of a type 'string'.
They should not be assignable to either "Hello" or "World".
Things between opening and closing JSX tags
Things like "-d, --declaration" go in here.
Things we lazy load from the JSX namespace
This *could* be a parenthesized arrow function.
This T is the difference between C3 and C1
This also applies to all our other context flags as well.
This array is used only during construction of the rulesbucket in the map
This attribute is true when present on an element, and false when missing.
This call should be ok
This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.
This can be a native JavaScript object or a DOM object.
This can be a still frame from the video, or another image if no video data is available.
This can be an object that you created or an existing Document Object Model (DOM) object.
This can be any command identifier given in the list of Command Identifiers.
This can be used to create a "save draft"-type submit option.
This can be used to test whether the media is playing or paused.
This can either be an identifier or the 'get' or 'set' keywords.
This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens.
This can refer to it as A.C.Z
This case and others are handled by the following code.
This case is covered by bug 3028.
This check is done before an open brace in a control construct, a function, or a typescript block declaration
This check is mainly used inside SpaceBeforeOpenBraceInControl and SpaceBeforeOpenBraceInFunction.
This check is to ensure we don't report error on constructor parameter property as that error would be reported during parameter emit
This code is governed by the BSD license found in the LICENSE file.
This command can be any of the command identifiers that can be executed in script.
This comment should appear for foo
This comment should appear for nonExportedFoo
This comment should appear for privateFoo
This comment should appear for privateStaticFoo
This comment should appear for static foo
This container didn't match the pattern piece.
This does not give appropriate results for a NoSubstitutionTemplateLiteral
This does not need to exist strictly speaking, but many tests will need to be updated if it's removed
This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.
This error could mask a private property access error.
This event provides errors for a found config file.
This fall-through is a deviation from the EcmaScript grammar.
This field is read-only.
This field should never be used directly to obtain line map, use getLineMap function instead.
This flag is used for testing getEmitOutput feature.
This flag is used to specify entry file for resolve file references.
This function does not test if the node is in a JavaScript file or not.
This function is called for each member of the object.
This function is only for imports with entity names
This function is to update the project structure for every projects.
This function is used to propagate certain flags when creating new object type references and union types.
This function is useful to ensure that the expression's value can be read from in subsequent expressions.
This function rebuilds the project for every file opened by the client
This function specifically handles numeric/string literals for enum and accessor 'identifiers'.
This function tries to search for a tsconfig.json for the given file.
This function will compile source text from 'input' argument using specified compiler options.
This happens in incremental scenarios.
This helper creates an object with a "value" property that wraps the `super` property or indexed access for both get and set.
This helper funciton processes a list of projects and return the concatenated, sortd and deduplicated output of processing each project.
This interface is not complete.
This is *not* a bi-directional relationship.
This is Euler's number, the base of natural logarithms.
This is a 'NoFoo', set 'Foo' to false
This is a case sensitive match, only if all the submatches were case sensitive.
This is a conditional expression:
This is a declaration, call getSymbolOfNode
This is a destructuring pattern, so call emitDestructuring instead of emit.
This is a new file, just parse it
This is a number one higher than the highest element defined in an array.
This is a semantic operation.
This is a shortcut function for transpileModule - it accepts transpileOptions as parameters and returns only outputText part of the result.
This is a test case of formatting.
This is a useful function for debugging purposes.
This is an alias, follow what it aliases
This is an arrow function with no parameters.
This is another variable comment
This is basically copied from tsc.ts's reportError to replicate what tsc does
This is because we do incremental parsing in-place.
This is blank line when there is text already parsed
This is class c2 without constuctor
This is comment for c1
This is comment for c2 - the global class
This is comment for function signature
This is done by declaring new variable (out parameter holder) outside of the loop for every binding that is reassigned inside the body.
This is due to the fact that we emit the body of an async function inside of a generator function.
This is exported symbol
This is for caching the result of getSymbolDisplayBuilder.
This is great most of the time.
This is helpful as our tree don't have parents.
This is just another way to define a constructor.
This is multiplication function
This is necessary when resolveReference flag is specified
This is often the href of the document that the object is in, or the value set by a base element.
This is on import declaration
This is possible in case if resolution is performed for directives specified via 'types' parameter.
This is probably not safe to reuse.
This is simple signle line comment
This is the callback function when a watched directory has added or removed source code files.
This is the callback function when a watched directory has an added tsconfig file.
This is the general case, which should include mostly expressions and statements.
This is the let keyword for the counter and rhsReference.
This is the main host that tests use to direct tests
This is the node that will handle its own comments and sourcemap
This is the portion of the match we'll return as part of the TODO comment result.
This is the ratio of the circumference of a circle to its diameter.
This is the same file, just a newer version.
This is trailing comment
This is used in compileOnSave feature
This is used when "position" might be inside a comment or string, etc.
This list is a work in progress.
This may or may not be the actual node used.
This means "compare in a case insensitive manner."
This means that this is declaration of ambient module that is located in other module or namespace which is prohibited.
This means we are in a context that looks like a block to the user, but in the grammar is actually not a node (it's a class, module, enum, object type literal, etc).
This method *requires* a contiguous, complete, and ordered stream of classifications for a file.
This method *requires* an ordered stream of classifications for a file, and spans are highly recommended.
This method determines whether to emit the "design:paramtypes" metadata based on the node's kind.
This method determines whether to emit the "design:returntype" metadata based on the node's kind.
This method determines whether to emit the "design:type" metadata based on the node's kind.
This method emits the serialized type metadata for a decorator target.
This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files
This name is used as the value for the TARGET attribute on a form or an anchor element.
This needs to be emitted
This needs to be refered as X.A.C.Z as A has conflict
This node will now be set as the parent of all of its children as we recurse into them.
This one is not truly a function, but for formatting purposes, it acts just like one
This one should be an error because the first type argument is not contained inside a type literal
This one should be okay, it's a valid way of distinguishing types
This only happens when we have something of the form: 'new C'
This results in inconsistent behavior.
This should be a block body
This should be emitted
This should be error since prototype would be static property on class m
This should be the 'false' state for that flag.
This should be the identifier 'I'
This should be the identifier 'declare'
This should be the identifier 'interface'
This should change down the line.
This should issue a large error, not a small one
This should probably stop working in the future.
This should result in error
This should result in type ClassB
This shouldnt be emitted
This shouldnt be error
This shouldnt be error as its a static property
This shouldnt be of type number and result in error.
This shoulnot be help comment
This signature will contribute to contextual union signature
This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree.
This speed is expressed as a multiple of the normal speed of the media resource.
This trailing Comment1
This type of declaration is permitted only in the global module.
This value denotes the character position in line and is different from the 'column' because of tab characters.
This value is only used for numbers.
This value is set on demand.
This wasn't the start of a token.
This will allow types number, string, symbol or any.
This will take us to the end of the line, so it's OK to parse a tag on the next pass through the loop
This works whether the declaration is a var, let, or const.
This would probably be safe to reuse.
Though, we do extra check on the context to make sure we are dealing with get/set node.
Thus, the type inferred for 'x' is number and the type inferred for 's' is string.
Thus, we include intersection types on the source side here.
Tilde, Bang, Inc, Dec
To access the non-shim (i.e. actual) language service, use the "ls.languageService" property.
To achieve that we will keep iterating until the result stabilizes.
To do this, the method will back parse the expression starting at the position required.
To find the correct statement, we look for the adjacent node on the left of the semicolon.
To test whether a value is equivalent to NaN, use the isNaN function.
Todo: add support for ModuleResolutionHost too
Tokens other than ')' are here for better error recovery
Too far away from what we know
Too many arguments implies incorrect arity.
Transient symbol (created during type check)
Traverse upwards through all parent if-statements linked by their else-branches.
Treat them as library files, so include them in build, but not in baselines.
Tries to compute the indentation for a list element.
Trigger non-simple-loop emit
Trigger said event from the server
Trim off comment end indicator
Trimming will be done for lines after the previous range
Triple slash comment 1
Triple slash comment on the assignement shouldnt be in .d.ts file
Triple slash multiline comment
Triple slash reference comments
Triple slash references need to be tracked as they are added to the compiler as an additional parameter to addUnit
True if alias symbol has been referenced as a value
True if exports of external module have been checked
True if item can be renamed.
True if last parameter is rest parameter
True if module contains only const enums or other modules with only const enums
True if module exports some value (not just types)
True if option can only be specified via tsconfig.json file
True if option value is a path or fileName
True if positioned at a list terminator
True if positioned at element or terminator of the current list or any enclosing list
True if positioned at the start of a list element
True if reference is a write location, false otherwise.
True if symbol is block scoped redeclaration
True if the comment starts with '/**' but not if it is '/**/'
True if the file was a root file in a compilation or a /// reference targets
True if the given identifier is part of a type reference
True if the given identifier, string literal, or number literal is the name of a declaration node
True if the occurrence is a write location, false otherwise.
True if the type declaration file was found in a primary lookup location
Try all qualified names of this type
Try getting just type at this position and show
Try to find the result through normal fileName
Try to find the rightmost token in the file without filtering.
Try to get a valid display name for this symbol, if we could not find one, then ignore it.
Try to get the first property-like token following all modifiers
Try to get the first property-like token following all modifiers.
Try to match the candidate with this word
Try to parse as an octal
Try to recognize this pattern when node is initializer of variable declaration and JSDoc comments are on containing variable statement.
Try to translate short option names to their full equivalents.
Try to use a number indexer.
Try to use string indexing.
Try with different permutations of features.
Turn on a human-readable diff
Two errors here, one for blah not being defined, and one for the overload since it would not be applicable anyway
Two mutually recursive function implementations with no return type annotations
Two mutually recursive function implementations with return type annotation in one
Two variants of qualifying a peer type
Two visibility errors (one for the clodule symbol, and one for the merged container symbol)
Type Annotation for declaration
Type Date does not satisfy the constraint 'Number' for type parameter 'T extends Number'
Type and kind of symbol.
Type annotations must instead be written on the top- level parameter declaration
Type arguments (undefined if none)
Type arguments in type argument list
Type assertion cannot be a type-predicate type
Type assertion of non - unary expression
Type assertion should check for assignability in either direction
Type check the default argument with the type annotation
Type check using the function's contextual type
Type guards affect nested function expressions and nested function declarations
Type guards as assertions
Type is K, should be number
Type is any, but should be string
Type is or contains object literal type
Type is or contains undefined or null type
Type mapper for instantiation alias
Type mapper for this inference context
Type of 'this' in function implementation is 'any'
Type of an inferred ES5 class
Type of class, interface, enum, type alias, or type parameter
Type of e1 reduced to I3 upon accessing property or signature
Type of e2 immediately reduced to I3
Type of symbol primitive introduced in ES6
Type of the FuncDecl, before target typing
Type of unannotated accessors is the inferred return type of the get accessor
Type of unannotated get accessor return type is the type annotation of the set accessor param
Type of unannotated set accessor parameter is the return type annotation of the get accessor
Type only accessible from the root
Type parameter constraints are named by user so we should always be able to name it
Type parameter not used
Type parameters (TypeFlags.TypeParameter)
Type parameters (undefined if non-generic)
Type parameters and top-level local types are in same declaration space
Type parameters are always visible
Type parameters are in scope in parameters and return types
Type parameters for which inferences are made
Type parameters from outer context referenced by source type are fixed by instantiation of the source type
Type parameters in type parameter list
Type parameters of type alias (undefined if non-generic)
Type predicate type is not assignable
Type predicates in non-return type positions
Type predicates with different parameter name.
Type reference directives
Type reference target
Type reference type arguments (undefined if none)
Type references (TypeFlags.Reference).
TypeParameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_type_1
TypeParameter_0_of_exported_class_1_has_or_is_using_private_type_2
TypeParameter_0_of_exported_function_has_or_is_using_private_type_1
TypeParameter_0_of_exported_interface_1_has_or_is_using_private_type_2
TypeParameter_0_of_method_from_exported_interface_has_or_is_using_private_type_1
TypeParameter_0_of_public_method_from_exported_class_has_or_is_using_private_type_1
TypeParameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_type_1
TypeScript Definition File for React.
TypeScript source file preserving JSX syntax
TypeScript-specific rules
Types mapped by this mapper
UTC time will always be implicit here.
UTF-8 byte order mark detected
Unconditionally back up and scan a template expression portion.
Undefined is used to indicate the value has not been computed.
Underlying signatures of a union signature
Undo these changes before compiling/committing/editing any other fourslash tests.
Unicode 3.0 space characters
Uninitialized parameter makes the initialized one required
Uninstantiated module
Uninstantiated modules shouldnt do this check
Union Cond is a number type expression
Union Cond is a number type literal
Union Results shoud be same as Expr1 and Expr2
Union the result types when more than one signature matches
Unique id (used to look up NodeLinks)
Unique id (used to look up SymbolLinks)
Unknown symbol means an error occurred in alias resolution, treat it as positive answer to avoid cascading errors
Unless 'reuseIdentifierExpressions' is false, 'expr' will be returned if it is just an identifier.
Unnamed function expressions and arrow functions have reserved names that we don't want to display
Unreachable code errors are reported in the binding phase.
Unwrap all type assertions.
Update the list of scripts known to the compiler
Update the server's view of the file named by argument 'file'.
Update the version to signal a change in the file
Upon detecting a file change, wait for 250ms and then perform a recompilation.
Usage of no privacy error imports
Usage of privacy error imports
Use 'void 0' in absence of value and initializer
Use argument expression as error location when reporting errors
Use contextual parameter type if one is available
Use default host function
Use emit location of "var " as next emit start entry
Use module/enum name itself if it is unique, otherwise make a unique variation
Use null for no filter.
Use of module as a function call.
Use parent module declarations name for start pos
Use scanner.ts, decent size, does not change frequently
Use specific property type when parent is a tuple or numeric index type when parent is an array
Use the first candidate:
Use the shim adapter to ensure test coverage of the shim layer for the classifier
Use the type of the initializer expression if one is present
Use this signature for contextual union signature
Use type from type annotation if one is present
Use/preference flag for '_i'
Used as PrimaryExpression
Used as PrimaryExpression in TypeQuery
Used as TypeName and PrimaryExpression (error on TypeName)
Used as a source for typing inference
Used as both to determine which checks are performed and as a cache of previously computed results.
Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization.
Used by the __metadata decorator for a class member.
Used by the __metadata decorator for a method or set accessor.
Used by the __metadata decorator for a method.
Used by the __metadata decorator.
Used for configured projects which may have multiple open roots
Used for initialize lastEncodedSourceMapSpan and reset lastEncodedSourceMapSpan when updateLastEncodedAndRecordedSpans
Used in checking whether super is called before this-accessing
Used to be indexer, now it is a computed property
Used to customize the typing inference process
Used to keep track of what directories are watched for this project
Used to match a candidate against the last segment of a possibly dotted pattern.
Used to override the encoding (formEnctype attribute) specified on the form element.
Used to report forbidden declarations.
Used to specify the script kind of the file explicitly.
Used to temporarily assign a contextual type during overload resolution
Used when a version of the file content is known to be more up to date than the one on disk.
Uses V instead of T in callback's parameter
Using ES6 wellknown-symbol
Using construct signature arguments, no errors expected
Using field here shouldnt be error
Using function arguments, no errors expected
VOID, DELETE, TYPEOF, AWAIT
Valid Unicode escape is always six characters
Valid because T is instantiated to any
Valid detachedComments
Valid use of this in a property bound decl
Validate the promise constructor type.
Validate the value of the digit
Values for enum members have been computed, and any errors have been reported for them.
Variable (var) or parameter
Variable comment after class
Variable declaration is used as the span
Variable declarations are hoisted to the top of their function scope.
Variable declarations in variable statement
Variable has initializer that circularly references the variable itself
Variable has type annotation that circularly references the variable itself
VariableDeclarationList
Variables of the same / different type
Verifies the completion list contains the specified symbol.
Verifies the completion list items count to be greater than the specified amount.
Verifies the member list contains the specified symbol.
Verify content length
Verify if the symbol is accessible
Verify indentation level is correct after Format-on-Enter is called
Verify markers for uniqueness
Verify that all the emit files are unique and don't overwrite input files
Verify that all the generated .d.ts files compile
Verify that applying edits to sourceFileName result in the content of the file baselineFileName
Verify that currentIndentText is all whitespaces
Verify that returned navigationItems from getNavigateToItems have matched searchValue, matchKind, and kind.
Verify that the completion list does NOT contain the given symbol.
Verify that the constraint is maintained across invocations
Verify the baselines of output files, if this is false, we will write to output to the disk but there is no verification of baselines
Verify the code is up to date with the enum
Verify the type of the instance property
Verify there are no errors
Verify there is no local declaration that could collide with the promise constructor.
Verify we didn't miss any errors in this file
Verify we didn't miss any errors in total
Very subtle incremental parsing bug.
Visit the typeReference as well to see if it directly or indirectly use that property
WAWA is not a valid type
Was: Error: Supplied parameters do not match any signature of call target
We actually need to verify smart (virtual) identation here rather than actual identation.
We allow type members to be separated by commas or (possibly ASI) semicolons.
We already had a source file for this file name.
We already perform checking on the type arguments on the class declaration itself.
We also have seen a starting asterisk.
We are *only* completing on properties from the type being destructured.
We are at the beginning of the file
We are either parented by another statement, or some sort of block.
We are elaborating errors and the cached result is an unreported failure.
We are in JSX context and the token is part of JSXElement.
We assume the first line starts at position 0 and 'position' is non-negative.
We can parse out an optional semicolon in ASI cases in the following cases.
We can't do anything with it.
We can't reuse statement nodes.
We cannot answer semantic questions within a with block, do not proceed any further
We cannot use createDiagnosticFromNode because nodes do not have parents yet
We check if the project file list has changed.
We conservatively include alias symbols to cover cases where they're emitted as locals
We detect and provide better error recovery when we encounter a git merge marker.
We didn't already have the file.
We didn't even have an open paren.
We didn't have a direct match.
We didn't have any sig help items produced by the TS compiler.
We do a check here so that we won't be doing unnecessarily call to "lookAhead"
We do not include methods that does not have child functions in it, because of duplications.
We do not perform structural deduplication on intersection types.
We don't need them otherwise.
We don't respond to the second one.
We don't want the BOM, skip it by setting the starting location to 3 (size of BOM).
We don't want to accidentally hold onto it for too long.
We don't want to consider things like '(1)' a type.
We either have a binary operator here, or we're finished.
We emit `null` here to indicate to `__decorate` that it can invoke `Object.getOwnPropertyDescriptor` directly.
We first sort case insensitively.
We force resolution here such that we catch circularities now.
We found no signatures at all, which is an error
We get back a set of edits, but langSvc.editScript only accepts one at a time.
We had an item with the same name.
We handle that case here.
We have 8 module keywords, and 4 var keywords.
We have a remapping of this name, use that instead
We have a transition from an upper to a lower letter here.
We have already reported the errors for the invalid signature.
We have an element that intersects the change range in some way.
We have an entry for this file.
We have made sure that a grand parent node exists with 'isFunctionBlock()' above.
We have this extra argument here so that we can inject an explicit property descriptor at a later date.
We have to check this without calling getSymbol.
We have to do this to avoid emitting trailing commas.
We have to explicitly emit square bracket and bracket because these tokens are not store inside the node.
We have to explicitly emit square bracket and bracket because these tokens are not stored inside the node.
We have to use this name for start pos
We have type references to same target type, see if all type arguments are identical
We have type references to same target type, see if relationship holds for all type arguments
We haven't looked for this file, do so now and cache result
We just return 'undefined' in that case.
We just want to consume and move on.
We know *exactly* where things went wrong when comparing the types.
We know we don't have a binding pattern or computed name here
We may be here because of some extra nodes between overloads that could not be parsed into a valid node.
We may need to update both the 'pos' and the 'end' of the element.
We might not be able to resolve type symbol so use unknown type in that case (eg error case)
We must be parented by a statement.
We must have a (possible ASI) semicolon.
We need the original "Scope type" for completion list, etc.
We need this options dealing with an AST coming from an incomplete AST.
We need to adjust the end position for the case where the template does not have a tail.
We need to check if whatever was inside the quotes is actually a valid identifier name.
We need to look one token ahead to see if it permissible to try parsing a declaration.
We need to make sure that the filePath is prefixed with "lib." not just containing "lib." and end with ".d.ts"
We need to return null because baselining isn"t required.
We need to return null here or the runBaseLine will actually create a empty file.
We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line
We need to use 'null' to interface with the managed side.
We never narrow type any in an instanceof guard
We only disallow modifier on a method declaration if it is a property of object-literal-expression
We only need to format if the block is multiline context.
We only support expressions that are simple qualified names.
We only try to find one if this flag is undefined, indicating that we haven't made an attempt.
We parse any expression (including a comma expression).
We perform two passes over the arguments.
We preserve this behavior so we can accurately compare times.
We should also get the exact same set of diagnostics.
We should get the same tree when doign a full or incremental parse.
We should not get a regex here becuase of the / in the comment.
We should prefer something that starts at the beginning if possible
We still have both chains.
We still have one chain remaining.
We track type references (created by createTypeReference) and instantiated types (created by instantiateType)
We treat locals and exports of the same name as mutually exclusive within a container.
We want the index of the previous line start, so we subtract 1.
We want to align our "syntax" and "examples" commands to a certain margin.
We want to find what index we're at.
We want to maintain quotation marks.
We want to order the braces when we return the result.
We want to treat type as an iterable, and get the type it is an iterable of.
We were canceled while performing the operation.
We would like to emit the subexpr as is.
We'll have 3 pattern parts Si/U/I against two candidate parts Simple/UI.
We'll only assert invariants outside of light mode.
We're changing from a generator to a non-genarator.
We're changing from a non-generator to a genarator.
We're going to append a representation of the current time at the end of the current version.
We're in a context where 'yield expr' is not allowed.
We're likely here because of error recovery
We're looking up possible property names from contextual/inferred/declared type.
We're now at a node that is entirely past the position we're searching for.
We've already gotten one pattern part match in this candidate.
We've already marked this child as the best so far.
We've had some invalidation errors where adding a member to a generic type with statics could cause a crash to occur
We, thus, need to check if whatever was inside the quotes is actually a valid identifier name.
What kind of match this was.
What was thrown, or the string 'Falsy' if something falsy was thrown.
When changing this make sure the changes are reflected in the managed side as well
When comparing call or construct signatures, parameter names are ignored and rest parameters correspond to an unbounded expansion of optional parameters of the rest parameter element type.
When deleting a file, the passed baseFileName is null
When doing so we want to highlight the passed in source map node since thats the one needing this temp assignment
When errorNode is undefined, it means we should not report any errors.
When files are deleted from disk, the triggered "rename" event would have a relativefileName of "undefined"
When options come from a config file, its path is recorded here
When present, marks an element that can't be submitted without a value.
When targeting ES6, emit arrow function natively in ES6
When targeting ES6, emit arrow function natively in ES6 by omitting function keyword and using fat arrow instead
When targeting es6, arrow function lexically bind "this" so we do not need to do the work of binding "this" in emitted code
When there are no attributes, React wants "null"
When these don't start a declaration, they're an identifier in an expression statement
When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
When yield/return statements are contextually typed we allow the return type to be a union type.
Where the sourcemap file is written
Whether 'super' occurs in a static context within a class.
Whether 'this' occurs in a static context within a class.
Whether or not a 'node' is preceded by a label of the given string.
Whether or not the pattern contained dots or not.
Whether or not this chunk is entirely lowercase.
Whether or not this object has any failures (including in its descendants)
Whether or not we should format on keystrokes
Whether or not we've had a parse error since creating the last AST node.
Whether tabs should be converted to spaces.
Whether the call is an error is determined by assignability of the arguments.
Whether the parameter is optional or not.
Whether the signature accepts a variable number of arguments.
Which error we report depends on whether there was a string constituent.
While neither Animal nor TallThing satisfy the constraint, T is at worst a Giraffe and compatible with both via covariance.
Why loop initializer is excluded - since we've introduced a fresh name it already will be undefined.
Will either be a CallExpression, NewExpression, or Decorator.
Windows Script Host version
With call signature count mismatch
With call signatures with different return type
With noImplicitThis, functions may not reference 'this' if it has type 'any'
Won't-fixed: Should go to '2' instead
Won't-fixed: Smart indent during chained function calls
Wrap the API changes for 2.0 release.
Wraps the call into WinJS.XHR to allow for mocking and telemetry.
Write arrow style signature
Write characters in UTF-8 encoding
Write emitted output to disk
Write out the fully qualified type name (eg.
Write symbol's own name instead of 'any' for any like types (eg.
Write the comment line text
Write the lines pending on the single line
Write the type arguments instead of type parameters of the signature
Write type arguments of instantiated class/interface here
Write typeof instead of function type literal
Write undefined/null type as any
Writes a property access or element access with the name of the symbol out to the writer.
Writes one or more HTML expressions to a document in the specified window.
Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
Writes only the name of the symbol out to the writer.
Writing an array or union element type
Writing first type argument of the instantiated type
Yield/await always starts an expression.
You can also use the pause or play events to tell whether the media is playing or not.
You can tell that we are contextually typing because of the contextualMapper parameter.
_this needs to be emitted to the js file
a 0 arg call signature
a bug made this not report the same error as below
a construct signature that returns a union type
a construct signature that returns any
a construct signature with generics
a constructor signature
a path to directory watcher map that detects added tsconfig files
a prime or an odd constant
a type with a prototype that has any type
a type with a prototype, it overrides the construct signature
a value of a primitive type, or an object literal mapping named values to actual values
a1 is a valid identifier
above is equivalent to this:
accessing getter property
actual start of the node is past the position - previous token should be at the end of previous child
add a root file to project
addRange correctly handles cases when wither 'from' or 'to' argument is missing
added level of function nesting
additional optional properties do not cause errors
adjust the container reference in case if super is used inside arrow functions with arbitrary deep nesting
after all there is no point to invalidate it if we have no idea where to look for the module.
alias for 'this' from the calling code stack frame in case if this was used inside the converted loop
alias not used in typeof
aliases that need to have this symbol visible
all expected to be valid
all invocations here are illegal
all of these are errors
all of these are valid
all of these invocations are errors
all ok - second argument is processed before x is fixed
all the necesarry information to set the right compiler settings
all the necessary information to set the right compiler settings
allow references to constant members of other enums
allowComputedPropertyNames
allowPositionInLeadingTrivia
also a Media Event Keyboard Events
also allowed, used to be errors
also if HasImplicitReturn flag is not set this means that all codepaths in function body end with return or throw
also works for 'apply'
always pop stack because post only called when child has been visited
always process imported modules to record module name resolutions
ambient context - no codegen impact
ambiguous (up and down conversion)
an actual value if it did match.
an object literal mapping named values to actual values
and all the comments.
and not a module, unless module emit enabled
and that matches the original signature for assignability since we treat its T's as Object
another level of indirection
another line in the comment
any as left operand, result is type Any except plusing string
any as right operand, result is type Any except plusing string
any is assignable to number
any is assignable to void.
any is not a valid type argument unless there is no constraint, or the constraint is any
any satisfies constraint and passes assignability check between 'target' properties
any, not a subtype of number so it skips that overload, is a subtype of itself so it picks second (if truly ambiguous it would pick first overload)
any, return types are not subtype of first overload
any, should be boolean
any, should be number
any, should be string
apply asynchronous additions to the synchronous output
argumentCount is either 1 or (numSpans + 1) to account for the template strings array argument.
argumentCount is the *apparent* number of arguments.
assert that import will success once file appear on disk
assignable because null is widened, and therefore BCT is any
assigned number to string
assignment should be legal (both U's get instantiated to any for comparison)
assume file was written to a directory that exists, if not, start recursively creating them as necessary
async function with which promised type is void - return can be omitted
async method with assignment/destructuring on 'super' requires a binding
async method with only call/get on 'super' does not require a binding
at line break, set this comment line text and go to next line
at the end of a regular expression (due to trailing flags like '/foo/g').
at the end of the comment
at the end position of an unterminated token.
at this point the only legal case for parent is ClassLikeDeclaration
augment sys so first ts.executeCommandLine call will be finish silently
b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.
bail out if symbol does not have associated declarations (i.e. this is transient symbol created for property in binding pattern)
bar should type check just like foo.
base type has a generic call signature with overloads
base type has generic call signature
base type with non-generic call signatures
basic assignable check, rest covered in tests for 'assignement compatibility'
basic non-generic and generic case inside a module
bind expansions on the parent type symbol
body but are not permitted to reference parameters or local variables of the constructor.
body of ambient external module is always a module block
boolean + every type except any and string
boolean type expressions
boolean unless otherwise specified
boolean, last definition wins
both indexers are any
both of these attempts to construct a type is an error
both of these should work
both operands are invalid
both types are the same - covers 'they are the same primitive type or both are Any' or the same type parameter cases
break from inside function
breakpoint in last statement of the last clause
bubble up and find containing type
bug caused an error here, couldn't select overload
bug lead to 'could not find dotted symbol' here
bug was 'could not find dotted symbol T' on x's annotation in the type assertion instead of no error
bug was that this caused 'Could not find symbol T' on return type T in the type assertion on x.a's definition
bug was that this satisfied the return statement requirement
bug was there was an error on this line
build the thenable type that is used to verify against a non-promise "thenable" operand to `await`.
by default exclude node_modules, and any specificied output directory
by default, AST adds itself to current basic block and does not check its children
c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.
call signature - no error
call with element access
call with property access
callee:void doesn't match this:I
can be called except with type arguments which is an error
can be used as a constructor function
can't assign number to string
can't do anything about this name.
can't name parameters 'this' in a lambda.
can't narrow type from 'any'
can't type narrowing, construct signature returns any.
can't use private in modules
canDefineTempVariablesInPlace
canUseParsedParamTagComments
candidate should be in this node
capture constructors in 'initializeState' to avoid null checks
case SyntaxKind.MemberFunctionDeclaration:
case SyntaxKind.MethodSignature:
case insensitive matching will find 'horizon'
case sensitive matching for 'Horizon' will fail
case sensitive matching will find 'Distance' and INITIATED
case sensitive matching will find 'INITIATED'
change compilation setting that doesn't affect parsing - should have the same document
change this to return active project settings for file
change value of compilation setting that is used during production of AST - new document is required
check assignability here.
check computed properties inside property names of binding elements
check if at least one of alternative have moved scanner forward
check if constant enum value is integer
check if containig folder exists - if it doesn't then just record failures for all supported extensions without disk probing
check if current node is a list item - if yes, take indentation from it
check if node is used as LHS in some assignment expression
check if numeric literal was originally written with a dot
check if program source files has changed in the way that can affect structure of the program
check if project has tsconfig.json in the list of files
check if this is a duplicate entry in the list
check imports and module augmentations
check meaning of the local symbol to see if declaration needs to be analyzed further
check private/protected variable access
check secondary locations
check that at least one declaration of top level symbol originates from type declaration file
check that last parameter has an array type
check tripleslash references
check what declarations in the symbol can contribute to the target meaning
check whether last characters deleted are line break
checkArgumentIsStringLiteral
checkGrammarForInOrForOfStatement will check that there is exactly one declaration.
checkIfSourceFileLevelDecl
checkParentVariableStatement
checks if properties actually were merged
child is const enum only - record state and continue searching
child is instantiated - record state and stop
child is non-instantiated - continue searching
child node is outside the target range - do not dive inside
class defined in module
class expression can use T
class with statics and constructor
class-based assignability
class-interface mergability done in checker.ts
classes are valid targets
clear the line map after an edit
clear the requested context flags
closes "React.createElement("
closing paren to React.__spread(
collect diagnostics from the program only once if either no source file was specified or out/outFile is set (bundled emit)
collection of labeled jumps that transfer control outside the converted loop.
collision with 'Origin' var in other part of merged module
collision with namespace of external module db
combine prefix, changed text and suffix
comment after function this is another comment
comment preventing line merging
compiler ts sources, used to test
completely inside the comment, or 2.
compute file name relative to current directory (expanded project root)
computed properties with non-literal names are treated as 'any'
conservatively assume that changing compiler options might affect module resolution strategy
consider situation if we have no candidate locations as valid resolution.
considerSemicolonAsDelimiter
const enum declarations
const enum member value comment (generated by TS)
const enums are completely erased during compilation.
const enums merge only with const enums
const the writer know we just wrote out a symbol.
constant enum declarations are completely erased in the emitted JavaScript code.
constantVariableMessage
constructor - no error
constructor keyword for an overload, should take us to the definition if it exist
constructor, toString, toLocaleString, valueOf, hasOwnProperty, isPrototypeOf, propertyIsEnumerable
constructors not checked for conformance like a call signature is
constructors should have a 'prototype' member
consume any tokens that precede the list as child elements of 'node' using its indentation scope
consume both CR and LF
consume comma and keep going
consume leading trivia
consume list end token
consume list start token
consume the semicolon if it was explicitly provided.
consume trailing trivia
contains the tests to run
content of resolution cache should not change
contextually typed parameters.
contextually typing from ambient class declarations
continue from inside function
copies, since exported
copy all text up to marker position
copy all text up to range marker position
copy generated file to output location
correct cases: reference to the enum member from different enum declaration
couldn't get type for the first accessor, try the another one
count of how many projects are using the directory watcher.
create asynchronous output for the importDeclarations
create file gets the whole path to create, so this works as expected with the --out parameter
create new inferred project p with the newly opened file as root
current block will be thenBod
current directory "."
currentNode corresponds to parent, but in the new tree
currently all tests use classic module resolution kind, this will change in the future
cursor in the leading trivia
declaration list, set breakpoint in first declaration
declaration spaces for exported and non-exported declarations intersect
declare var module/*1
declare variables to hold out params for loop body
deduplicate and hoist collected variable declarations
deduplicate/group entries in dependency list by the dependency name
default as is ok, error of default binding name
default to this for historical reasons
default value of configurable, enumerable, writable are `false`.
define an export star helper function
defined here to avoid outer scope pollution
definitely questionable
delete characters starting from t1.end up to t2.pos exclusive
delete entry from the list
delete global variable s
derive a unique name for parameter from the first named entry in the group
derived class inherits base without override/redeclaration
derived overrides base.
destructuring assign with element access
destructuring assign with property access
destructuring assignment
destructuring in variable declarations
detach all dom ready events
details will be provided by call to reportNoCommonSupertypeError
detectJavaScriptImports
different interesting stuff here
directly serialize the spans out to a string.
dispose all resources held by old script snapshot
do not create variable declaration for exports and imports that lack import clause
do not emit duplicate entries (in case of declaration merging) in the list of hoisted variables
do not emit extends clause
do not emit var if variable was already hoisted
do not include computed properties in the implied type
do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks
do not treat blocks directly inside a function as a block-scoped-container.
do not trim whitespaces in comments or template expression
do not use lib since we already read it in above
docComment for type parameter
docComment of method type parameter
doesn't effect equivalence
doesn't get rewritten to Foo.bar.
doesn't use compiler - no need to synchronize with host
don't have to give a value, in fact
don't overwrite previous resolution result
don't proceed any further in the search.
don't want to baseline output
dont keep this comment
duplicate identifier error
duplicate local variables are only reported at global scope
e) If the part was not entirely lowercase, then attempt a camel cased match as well.
e.foo would return string
e.g "b a" is valid quoted name but when we strip off the quotes, it is invalid.
e.g. '* as ns' in: import * as ns from 'mod' (in ImportClause)
e.g. 'def' in: import def from 'mod' (in ImportDeclaration)
edit should not be applied only if we have one line feed between elements
edit was a deletion - just combine prefix and suffix
edit will trigger formatting - should succeeed
effective identation of the block
either base or derived property is private - not override, skip it
element access (assign)
element access (read)
elide this import since defaultBinding2 is not used
else formating should not be affected
else is not part of the tree
else, use the contained scope
emit call to exporter only for top level nodes
emit output for the __decorate helper function
emit output for the __extends helper function
emit output for the __metadata helper function
emit output for the __param helper function
emit prologue directives prior to __extends
emit x1: number, y1: string
emitAsEmbeddedStatement
emitExternalModuleSpecifier is usually called when we emit something in the.d.ts file that will make it an external module (i.e. import/export declarations).
emitRelativePathAsModuleName
emitted incorrectly as typeof f
emitted incorrectly as typeof im
emitting single module file
encoding is automatically handled by the implementation in ChakraHost
end value is exclusive so add 1 to the result
ensure all type annotations with a value declaration are checked as an expression
ensure file has correct number of errors after edit
ensure merges as expected
ensure merging works as expected
ensure that imported file was found
ensure that label is unique
ensure that module resolution results are still correct
ensure that types resolutions are still correct
ensure the right var decl is exported
entirely within the token text.
entry.next.prev does not show intellisense, but entry.prev.prev does
enum type expressions
equivalent to other files on the file system not directly passed to the compiler (ie things that are referenced by other files)
equivalent to the files that will be passed on the command line
error (arity mismatch)
error - access modifiers do not agree
error - accessors do not agree in visibility
error - does not match any signature
error - duplicate identifier Foo - confirmed
error - getters must not have a parameter
error - no call signatures
error - no implementation
error - setters must not specify a return type
error - signatures are not assignment compatible
error -- BB is of type typeof B.
error -- Factory is of type typeof B.
error -- cannot merge function with non-ambient class
error -- cannot merge interface with non-ambient class
error -- class declaration must preceed module declaration
error -- declarations must be adjacent
error -- doesn't implement bar
error -- doesn't implement foo
error -- inherits abstract methods
error -- not declared abstract
error -- use of modifier abstract must match on all overloads.
error : Can't use shorthand in the type position
error Baz is protected
error C2 is protected
error LocalClass is inaccisible
error T not assignable to U
error TS2095: Could not find symbol 'stack2'.
error U not assignable to T
error after constraints above made illegal
error after constraints above made illegal, doesn't matter
error at "c1, c3, "constructor"
error at "emptyArray" these should not be error
error at "f1, f2, funcOfIFace"
error at "haveOnlyGet"
error at "haveOnlySet, newXValue"
error at "nullWidenFuncOfC"
error at "nullWidenFunction"
error at "undefinedWidenFunction"
error at "underfinedWidenFuncOfC"
error at "widenArray"
error at "y3" this should not be an error
error at "z,w" these shouldn't be errors
error at array literal
error because C does not extend D
error because T is string in the first declaration, and T is boolean in the second Return type and callback return type are ok because T is any in this particular Promise
error because neither is supertype of the other
error because number is not assignable to string
error because of the prototype's not matching, not because of the instance side
error because return types don't match
error but shouldn't be
error cases, so function calls will all result in 'any'
error d is not assignable to e
error e and number both not subtype of string
error e is not assignable to d
error each individual name in variable statement instead of marking the entire variable statement
error for misplaced super call (nested function)
error for no super call (nested scopes don't count)
error for redeclaring var in a different parent
error here TypeParameters
error here, but should be okay
error in parameter type
error in type instead
error in type of parameter
error missing parameter
error name is missing
error no call signature
error no coercion to string
error no default export
error numer is not subtype of string
error return type mismatch
error since C is not assinable to either D or E
error since instantiated
error since number is not assignable to string A type T is assignable to a union type U if T is assignable to any type in U
error since the module is instantiated
error since types are structurally equal
error string is not assignable to number
error string is not subtype of number
error supplied parameters do not match any call signature
error to have module first
error to use accessors in ES3 mode
error to use as constructor as there is not constructor symbol
error to use default as binding name
error to use interface name as call target
error, "any" does not satisfy the constraint
error, 'length' does not exist on 'number'
error, 'void' is missing everything
error, AA is not of abstract type.
error, C must evaluate to constructor function
error, T defaults to Base, which is not compatible with number or string
error, assigning to a const
error, can not be unintalized
error, can't use this in enum
error, cannot extend it though
error, cannot instantiate abstract class.
error, chose first overload
error, class isn't ambient or declared before the module
error, constraint referencing itself
error, could not find symbol Foo
error, could not find symbol xs
error, could not select overload for 'new' expression
error, differ only by return type
error, evaluated in scope of constructor, cannot reference x
error, evaluated in scope of constructor, cannot reference y
error, incompatible type
error, incompatible types
error, mismatched optionality
error, missing initialicer
error, missing intialicer
error, missing property value from ArgsString
error, no 'a' in 'void'
error, no contextual signature instantiation since I2.a2 is not generic
error, no inferences for U so it doesn't satisfy constraint
error, no non-specialized signature in overload list
error, no return statement
error, not identical and contextual signature instatiation can't make inference from T to T
error, not nominally equal
error, number doesn't have a length
error, privates conflict
error, rest param has type mismatch
error, rest params have type mismatch
error, second param has type mismatch
error, should be typeof M.C.f
error, should be typeof M.D.f
error, should be typeof M.E.f
error, this.n: number
error, this.n: number, no member 'length'
error, too many required params
error, type params are actually part of the arg list so you need both
error, types are structurally equal
error: "super" has to be called before "this" accessing
error: Unable to invoke type with no call signatures
error: `this` is `window`, but is still of type `any`
error: can't use short-hand property assignment in type position
error: cannot convert A to T
error: cannot convert B to T
error: cannot convert C to T
error: could not find symbol V
error: duplicate identifier expected
error: no intialization expected in ambient declarations
error: numeric indexer returns the type of the string indexer
error: numeric indexer returns the type of the string indexere
error: this is implicitly any
errors because there are no return statements
errors expected, these are not exported
errors on all 3 lines, bug was that r5 was the only line with errors
errror - duplicate id
exact, substring, or prefix.
exclusiveStartPosition
exit early if we on different lines and rule cannot change number of newlines
exit early in the case of signature - super checks are not relevant to them
expect error invalid expressions
expect error miss  an operand
expect error miss an operand
expect error miss parentheses
expect three failed lookup location - attempt to load module as file with all supported extensions
expected boolean here.
expected duplicate identifier error
expected error for all the LHS of compound assignments (arithmetic and addition)
expected output is not set, just verify that output text has sourceMappingURL as a last line
expected to work since all are exported
expected to work, but actually doesn't
export assignment is not supported in es6 modules
export makes the var property and not variable
exported variable in external module
exported variable in the module
expressionType is not comparable to caseType, try the reversed check and report errors if it fails
external module augmentation is always visible
external module node + class + property
external module node + variable in module + class + property
external modules are automatically in strict mode
f) The word is all lower case.
fall through to report error
fall-though for import declarations that import internal modules
falsy means we expect no error.
file has no changes - use it as is
file is empty - return span for the beginning of the file
file references will be relative to dirPath (or absolute)
filename: instantiatedModule.ts
filename: nonInstantiatedModule.ts
files referenced by this file
fill the reminder with spaces
find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)
find node that fully contains given text range
find sub-tree containing start
find syntax list that covers the span of the node
find the child that contains 'position'
find the else keyword
find the smallest node that fully wraps the range and compute the initial indentation for the node
first - try to load from a initial location
first load from current location
first try to load module as file
first try to read content of 'typings' section (backward compatibility)
first: try to load module as-is
flags for knowing what kind of element/attributes we're dealing with
foo doesn't exist, so both references should be in error
foo should still be there
foo.A should be ok but foo.bar should be error
fooFunctionValue param
foo_0 not an external module
for accurate classification, the actual token should be passed in.
for all open, referenced files f
for case-sensitive file systems check if we've already seen some file with similar filename ignoring case
for each inferred project root r
for external modules module all nested ambient modules are augmentations
for inner static functions, use the parent's member scope, so local vars cannot be captured
for mapping when type checking
for now ignore jsdoc comments
for now treat files as JavaScript
for now we just check if the next token is an identifier.
for object literal assume that type of 'super' is 'any'
for single file tests just add them as using the old '0.ts' naming scheme
for switch statement allow only non-labeled break
for tests assume that directory exists
for tests pessimistically assume that directory always exists
forEach calls the callbackfn function one time for each element in the array.
format from the beginning of the line
formatting context is used by rules provider
formatting is not applied to ranges that contain parse errors.
formatting on function return type
formatting on function with void argument type
formatting on variable type
formatting on void operator
forward reference to the element of the same enum
found a possible marker start
found an object marker start
from a namespace with import
from a shadow namespace with export
from a shadow namespace with no export
from differing object types
from exported class in mod1
from exported function in mod1
from exported namespace in mod1
from extended namespace
from function in mod1
from namespace in mod1
fs.rmdirSync won't delete directories with files in it
function F(pref: (a/*1
function call return type
function foo(*Y*: string)
function merged with module
functionally only possible when your class is otherwise devoid of members so of little consequence in practice
functions signatures can be optional
generic cases of Derived7 and Derived8
generic interfaces in a module
generic signature, subtype in both directions
generics and type assertions
get comments without detached comments
get rid of all multi-underscores
get rid of all trailing underscores.
get start position for the previous line
get symbol of the first identifier of the entityName
get the decorators from the first accessor with decorators
get the leading comments from detachedPos
get the leading comments from the node
get the original type -- represented as the type constraint of the 'this' type
get the relative sourceMapDir path based on jsFilePath
getSemanticDiagnostics return array of Diagnostics.
getSourceFile method from default host
getSourcefile() results can not be serialized.
getter with annotation
getter without annotation
global (1) + variable declarations (4) + binding patterns (7)
global vars in function declaration
grab the fragment from the beginning of the original text to the beginning of the span
grab the fragment from the end of the span till the end of the original text
gracefully handle if readFile fails or returns not JSON
grammar allows this for constructors
handle broken code gracefully
handle cases when type is Type parameter with invalid constraint
handle nesting properly.
harness always uses one kind of new line
has a member from i2P1, but not from I1
has multiple construct signature
has to be the same as the class name
have already seen asterisk
have no effect on members of objects such as properties.
have to be fully qualified since in different root
here we are using similar heuristics as 'isYieldExpression'
high priority, but any type is ignored.
history wiped out by reload
hostCache is captured in the closure for 'getOrCreateSourceFile' but it should not be used past this point.
however symbol might contain other declarations that are exported
http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4
http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.5
i points to the first non whitespace character
i.e. 'undefined' in position 3 above means TODO(jason) didn't match.
i.e. default settings
i.e. super call is legal in constructor but not legal in the class body.
i.e. the span starting at 30 with length 30 is increased to length 40.
i1 is interface with properties
ideally this shouldn't show up for a type
identical and subtype, ok
identifiers: module, class, enum, function
identifiers: variable and parameter
if D is a valid class definition than E is now not safe tranisitively through C
if alias for arguments is set
if alias for this is set
if body of ForStatement will be converted to function then we'll need a extra machinery to propagate reassigned values back.
if child is a list item - try to get its indentation
if child is last and there is more room and only one node to place, place it
if child node is a token, it does not impact indentation, proceed it using parent indentation scope rules
if closed file is root of project
if containing type was not found or it is ambient - exit (no codegen)
if f was referenced by the removed project, remember it
if file has passed all checks it should be safe to reuse it
if file was external module with augmentations - this fact should be preserved in .d.ts as well.
if host does not support 'directoryExists' assume that directory will exist
if it is in the list, then we are done
if it's static, enter it into the class's member list directly
if jsx is specified then treat file as .tsx
if localSymbol is defined on node then node itself is exported - check is required
if loop initializer contains block scoped variables - they should be passed to converted loop body as parameters
if module symbol has already been merged - it is safe to use it.
if no - position is in the node itself so we should recurse in it.
if outer converted loop has already accumulated some state - pass it through
if parent of the loop was labeled statement - attach the label to loop skipping converted loop body
if r referenced by the new project
if range is on single line, we will never make this state transition
if shimHost is a COM object then property check will become method call with no arguments.
if symbolFromVariable is export - get its final target
if the .d.ts is non-empty, confirm it compiles correctly as well
if the chains are done, then these messages are the same.
if the current token is var, let or const, skip the VariableDeclarationList
if the given file has no dependencies, there is no context to return, it can be compiled without additional work
if the next token is not on the same line as yield.
if the open curly belongs to a non-indented object, do nothing here.
if the parent is the class constructor, use the constructor scope
if the ref count for this directory watcher drops to 0, it's time to close it
if the text didn't change, then we can just return our current source file as-is.
if there are break statements that match this switch, then just link cond block with block after switch
if there was an explicit match kind specified, then it should be validated.
if this is a top level default export of decorated class, write the export after the declaration.
if this is anonymous type break
if this is comma expression, the breakpoint is possible in this expression
if this is the case - then we should assume that token in question is located in previous child.
if this method has a body and its parent is a class declaration, this is a valid target.
if this token is the first token following the list of decorators, we do not need to indent
if token line equals to the line of containing node (this is a first token in the node) - use node indentation
if underlying system can distinguish between two files whose names differs only in cases then file name already in canonical form.
if we don't have a cursor, we could never return a node from the old tree.
if we don't, rewind and return nothing.
if yes - then position is in the trivia and we need to look into the previous child to find the token in question.
ignoreActualIndentationRange
ignoreMissingOpenBrace
illegal case: forward reference
illegal, 2 constructor implementations
implicit any is still allowed
import clause without export
import d, * as x from "foo"
import statement without including semicolon
imports has changed - program is not reused
in a lambda inside a instance method
in a lambda inside a static method
in an object literal inside a instance method
in an object literal inside a static method
in call type arguments
in case of 'continue' we'll just fallthough here
in case of labeled breaks emit code that either breaks to some known label inside outer loop or delegates jump decision to outer loop
in converted loop body arguments cannot be used directly.
in error recovery cases, there may not be a term
in function return type annotation
in ternary exression within paren
in the constructor case, we want to check the parent scope for overloads
in the generated code a 'this' is added before this call
in the leading trivia (before token.getStart()), and 2.
in var type annotation
inForStatementInitializer
include only identifiers in completion list
includeArrowFunctions
includeItemAtEndPosition
includeNonAmdDependencies
includeNonIndentChars
includeNonIndentChars:
incompatible on the param type
incompatible on the property type
incompatible on the return type
increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line
indent token only if end line of previous range does not match start line of the token
indent token only if is it is in target range and does not overlap with any error ranges
index is numeric and property name is not valid numeric literal
infinitely expanding type reference
initialize new private scope for the type
initialize the 'constructor' field
initialize the list of files
initializer of variable/parameter declaration go to previous node
inside a class, so already correct
instead of B does see this
instead pick current enum type and later try to fetch member from the type
intential fall through
intentionally misspelled
interesting stuff here
interface before module declaration
interface declarations, type alias declarations
interface has implicit `prototype: any`.
interface instance comments
interface is inaccessible
interface w/ 2 properties, class w/ 2 properties, 3 modules
interfaces do not permit private members, these are errors
introduce a new indentation scope for lists (including list start and end tokens)
invalid Point3d is not exported
invalid left operand the left operand is required to be of type Any, an object type, or a type parameter type
invalid left operands the left operand is required to be of type Any, the String primitive type, or the Number primitive type
invalid right operand the right operand to be of type Any or a subtype of the 'Function' interface type
invalid right operands the right operand is required to be of type Any, an object type, or a type parameter type
invalidReferenceMessage
is contextually typed (section 4.19) by a type T and a contextual signature S can be extracted from T
is exported function symbol
is single line comment or just /*
is unterminated multi-line comment
isAssignmentExpressionStatement
isClassHeritageClause
isExternalLibraryImport
isFinite handles cases when constantValue is undefined
isListElement allows to stop on the list element level
isModuleElementVisible
isView should be a guard that narrows type to ArrayBufferView.
issue custom error message for super property access in constructor arguments (to be aligned with old compiler)
it is a label definition and not a target, search within the parent labeledStatement
it is an error to have duplicate index signatures of the same kind in a type
it is ok to have member named '_super' or '_this' - member access is always qualified
it is type of the symbol uses itself recursively
it preserves the name of the class for use in error messages it throws if no render function is defined
it renders a simple stateless component with prop
it renders based on context in the constructor
it renders based on state using initial values in this.props
it renders based on state using props in the constructor
it renders only once when setting state in componentWillMount
it renders using forceUpdate even when there is no state
it setState through an event handler
it should be treated like a space
it should not implicitly bind event handlers
it should render with null in the initial state property
it should throw with non-object in the initial state property
it should warn when misspelling componentWillReceiveProps
it should warn when misspelling shouldComponentUpdate
it supports classic refs
it supports this.context passed via getChildContext
it was actual edit, fetch the fragment of new text that correspond to new span
it will call all the normal life cycle methods
it will go to next iteration of outer loop
it's a getter or setter for a class property
it's a getter or setter function
iteratedType may be undefined.
its constituent types, with types that are unions of the respective members in the constituent types.
jsDoc comments are emitted at /*leading comment1 */space/*leading comment*/space
jsdocstyle comment - only this comment should be in .d.ts file
json for Tools.CompilationSettings
just an overload - no codegen impact
just gather text from the leaves
just to make the file valid before checking next completion location
just want to make sure this one doesn't crash the compiler
keep arguments indented
keep indentation of 'blah'
label on non-loop statement
labels accross function bounderies
lambdas are assignable to anything
lambdas have this: void for assignability purposes (and this unbound (free) for body checking)
last line - return EOF
least significant 5 bits are the next msbs in the final value.
legal, considered a constructor function
legal, overload signatures for (presumably) 1 implementation
legal, overload signatures for 1 implementation
list of input files to be given to program
load file pointed by typings
load folder as module
load remapped file as module
load remapped module from folder
load type declarations specified via 'types' argument
local function declaration
local names set is needed only in presence of star exports
local names set should only be added if we have anything exported
local types not visible outside the function body
local variable in external module
lookInLabeledStatement
lookInLabeledStatements
looks like define ("modname", ...
main check - report error if value declaration of the parent symbol is module augmentation)
make sure merging works as expected
make sure no changes happen before this one is finished
make sure that  name of 'exports' function does not conflict with existing identifiers
makeWhitespaceVisible
mark individual names in binding pattern
mark iteration statement as containing block-scoped binding captured in some function
mark variables that are declared in loop initializer and reassigned inside the body of ForStatement.
match template for filtering 'own' properties from obj
matches overload but bad assignment
merge module augmentations.
merged case: module is const enum only if all its pieces are non-instantiated or const enum
merged enums compare all their members
merged symbol is module declaration symbol combined with all augmentations
method is overridden with method or property/accessor is overridden with property/accessor - correct case
mid has to be even to catch a range's beginning
miss assignment operator
miss assignment operators
miss assignment opertors
missing toString satisfied by Object's member
mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one
modify x in right hand operand
modify x in right hand operand with string type itself
module C will be classified as value
module comment of m2.m3
module comment of m3.m4.m5
module comment of m4.m5.m6
module comment of m5.m6.m7
module not found - be conservative
moduleAugmentations has changed
more than one emittable child, emit indented list
move all detected ambient modules to imported files since they need to be resolved
move range end just past line that will merge with previous line
multi line comment with more than one blank line
multi line with a comment
multi line with a comment 2
multi line with a comment 3
multi-line comment with more than one blank line
multi-line comments, apply delta indentation to all the other lines
multiline 3, arrow on a new line
multiline 4, arguments
multiline comments can be in the middle of a line
multiple delete  operator
multiple delete  operators
multiple matches on multiple lines
multiple trailing comments
multiple typeof  operator
multiple typeof  operators
multiple void  operator
multiple void  operators
naked break not allowed
name from different external module that is not visible
name of function declaration
names and dotted names
names are stored in the compiler with this relative path, this allows people to use goTo.file on just the fileName
names of modules with corresponding parameter in the factory function
names of modules with no corresponding parameters in factory function
need the following lines to not have parse errors in order for completion list to appear
need to make this line parse so we can get reasonable LS answers to later tests
nested cast, should keep one pair of parenthese
nested parenthesized expression, should keep one pair of parenthese
nested ternary expressions
new declaration space, making redeclaring x as a string valid
no ASI, comma expected
no code gen - no error
no content for leaf node, so delete it
no error - as no code generation
no error - no code gen
no error - z is of type interface Sammy from module 'M'
no error as no code gen
no error because function is ambient
no error expected below this line
no error on implementors because IFoo's T is different from foo's T
no error since we use the contextual type in BCT
no error, different T
no error, different declaration for each T
no error, different declaration for each U
no error, this is any
no errors expected below
no errors expected except illegal constraints
no errors expected here
no errors expected, these are all exported
no go only applies to children of node issuing it
no imports - drop cached module resolutions
no inferences for T so constraint isn't satisfied, error
no initializer or annotation, so this is an 'any'
no need to do anything special as we are already in all of the requested contexts
no need to do anything special as we are not in any of the requested contexts
no parent was found - return 0 to be indented on the level of SourceFile
no preceding token found - start from the beginning of enclosing node
no repro if this is first line in class body
no such property on x
no such property on y
no test files but multiple d.ts's, e.g. winjs
no type annotation allowed
no versions earlier than min version will maintain change history
node is in the strict mode environment
node is lhs that can be modified
node is the lhs of a dot expr
node is the lhs of an incomplete dot expr at cursor
nodeNotFoundErrorMessage
nodes are in different files and order cannot be determines
non slash character means we continue proceeding to next component of root search
non-exported import declarations
non-merged case - use the current state
non-overlapping edits
non-shorthand property assignments should always have initializers
none of these lines should error
nope y private property of M
nope, duplicate member
nope: array assignment
nope: element assignment
normalize the fileName for the single file case
normalize the filename for the single file case
normally parent references are set during binding.
not a collision, since we don't export
not a construct signature, function called new
not a predefined type anymore
not an error since exported
not an error since not exported
not an error, because of ASI.
not an error, since not exported
not assignable because null is not widened.
not copied, since not exported
not expected to be an error.
not expected to work since non are exported
not ok - needs number
not ok - there's an assignment compat error
not reflected in class type
not sure how this is typechecking at all..
note usage of writer.
note: return value is emitted only to simplify debugging, call to converted loop body does not do any dispatching on it.
note: this function creates only node
note: this: this is not allowed in an object literal type.
nothing (boolean not in declared type)
nothing else should show up
now an error due to referencing type parameter in constraint
null + boolean/Object
null if test completed normally.
number (guard as assertion)
number + every type except any and string
number + number is valid
number type expressions
number, string, boolean
numeric named properties work correctly, no errors expected
o should be any rest parameters
object + every type except any and string
of the form 'require("name")'
ok (function takes an any param)
ok + operator promotes
ok - overload signatures are assignment compatible with their implementation
ok - subtype of number
ok - type inferred from getter return statement
ok - type must be declared
ok - types agree (inference)
ok because base returns void
ok because this getStatus overrides the conflicting ones above
ok because we overrode D's number index signature
ok e and number both subtype of number
ok public property of M
ok since Base returns void
ok since module is not instantiated
ok since non-instantiated
ok since the module is not instantiated
ok since this is not the case: The constructor declares parameter properties or the containing class declares instance member variables with initializers.
ok to add optional parameters
ok to drop parameters
ok, U is in a parameter position so inferences can be made
ok, `this:any` because it refers to an outer object
ok, adds a new call signature
ok, all present params match
ok, any identical to itself
ok, callee:void matches this:any
ok, chose first overload
ok, circularity in assignment compat check causes success
ok, different declaration space from other M2.A
ok, different declaration space than other M2
ok, excess params are optional in b.a3
ok, fewer params in b.a3
ok, fewer params in lambda
ok, fewer required params
ok, identical, same number of required params
ok, implicitThis(this:any)
ok, implicitThis(this:any) is assignable to explicitThis(this: this)
ok, instantiation of N is a subtype of M, T is number
ok, instantiation of N is a subtype of M, T is string, U is number
ok, it is safe to use existing name resolution results
ok, less specific parameter type
ok, more general parameter type
ok, need a var in the statement production
ok, no inferences for T but assignable to any
ok, nominally compared with first overload
ok, not considered identical because the steps of contextual signature instantiation create fresh type parameters
ok, not enforcing assignability relation on this
ok, one operand is any
ok, one operand is string
ok, rest param corresponds to infinite number of params
ok, same T of required params
ok, same as a5 but with object type hierarchy
ok, same as a8 with compatible object literal
ok, same number of params
ok, same number of required params
ok, same number of required params with matching types
ok, type parameters not identical across declarations
ok, use assignability here
ok, use assignment compatibility
ok, we relate each signature of a16 to b16, and within that, we make inferences from two different signatures in the respective A.a16 signature
ok: no reference to this
okay -- implements abstract method
okay -- undefined behavior at runtime
one error (visibility)
one more time with full typecheck
one param, no type with default value
one param, no type, optional
only allow export default at a source file level
only bother scanning if we have something that could be trivia.
only check when this is directly accessing in constructor
only emit members in the correct group
only public and protected methods of the base class are accessible through super
only set the files property if we have at least one file
only used privately no need to emit
open and close brace, 'else' and 'while' (in do statement) tokens has indentation of the parent
open braces are always indented at the parent level
open files referenced by a project
open files that are roots of a configured project
open, non-configured root files
operand before delete operator
opreand before typeof
optional node that results in error
or substring match, then the character spans will be used to attempt a camel case match.
other entry in rootDirs
other kinds of value declarations take precedence over modules
other uninstantiated module declarations.
otherwise add it back to the list of referenced files
otherwise just check each operand separately and report errors as normal
otherwise use toLowerCase as a canonical form.
otherwise, keep r as root of inferred project
overload implementation signature
p1 comment appears in output
p2 comment does not appear in output
p3 comment appears in output
p4 comment does not appear in output
parameter supplied for type argument inference for U
parameter supplied for type argument inference to succeed
parent is in function block
parent is not source file or it is not reference to internal module
parentheses, the contained expression is reference
parentheses, the containted expression is value
parenthesized expression
parenthesized first type argument
parse 'global' as name of global scope augmentation
parse error unlike the others
partial revert of https://github.com/Microsoft/TypeScript/pull/7583 to prevent breaking changes
pass it to outer converted loop
pass the cache of module/types resolutions from the old source file
pass them to outer converted loop
patch fileExists to make sure that disk is not touched
path at least length two (root and leaf)
path should already be well-formed so it does not need to be normalized
path to start of range
pattern was matched as is - no need to search further
perform fast check if host supports it
performCharacterChecks
permitInvalidConstAsModifier
pick only errors that fall in range
position was in this array.
position wasn't in this array, have to keep searching.
position wasn't in this node, have to keep searching.
pp1 is property of c1
predefined type (void) or keyword (class)
previous token ends exactly at the beginning of child
previous token is comma that separates items in list - find the previous item and try to derive indentation from it
previous token is enclosed somewhere in the child
previousIterationSymbolsCache
private getter property
private setter property
proceed any parent tokens that are located prior to child.getStart()
proceed any tokens in the node that are located after child nodes
program does not have any files with type reference directives - bail out
project to use by default for file
project where it lives - this also is the current directory when compiling
projects built from openFileRoots
projects specified by a tsconfig.json file
propagate 'hasReturn' flag to outer loop
property access (assign)
property access (read)
property declarations are valid if their parent is a class declaration.
property visible only in module
property visible to any code
pullUpdateUnit is sufficient if an existing unit is updated, if a new unit is added we need to do a full typecheck
put r in referenced open file list
put ranges in the correct order
re-assign to be the owning class
readTokenInfo was called before but scan action differs - rescan text
readTokenInfo was called before with the same expected scan action.
record package json as one of failed lookup locations - in the future if this file will appear it will invalidate resolution results
record string literals as module names
recorded result when we try to find super-call.
redeclaration - always should be renamed
regular enums merge only with regular enums and modules
reload whole script, leaving no change history behind reload
remove a root file from project
remove any leading underscore, unless it is followed by a number.
remove project from inferred projects list because root captured
remove project rooted at r
remove that project and remember it
removeAllButLast(sortedTypes, undefinedType, /keepNullableType**/ true)/*1
removeComments is false, just get detached as normal and bypass the process to filter comment
removing this method fixes the error squiggle.....
reorderCandidates fills up the candidates array directly
replace comments with whitespace to preserve original character positions
replace old results with a new one
replace the disk specific project url path into project root url
report error on all statements except empty ones
report error on class declarations
report error on instantiated modules or const-enums only modules if preserveConstEnums is set
report error on regular enums and const enums if preserveConstEnums is set
report errors on type errors in computed properties used in destructuring
report errors only if it was requested
reportAtCurrentPosition
requireCompleteParameterList
requires unit to already exist in the compiler
reset all emit helper flags on node (for incremental scenarios)
reset all reachability check related flags on node (for incremental scenarios)
reset flag when merging instantiated module into value module that has only const enums
reset interned strings if FormatCodeOptions were changed
reset the cache of existing files
reset the context flags we just set
resolveReference file-option is not specified then do not resolve any files and include all inputFiles
resolved element attributes type of a JSX openinglike element
resolved from the primary path
restore the context flags we just cleared
result type includes indexer using BCT
result2 should have the same type as result
return expression of the method
return index of the first non prologue directive
return is not necessary in the body of generators
return true if we hit a violation of the rule, false otherwise
return type of function go to previous token
return type should be 'number'
return type should be 'string'
return undefined if we can't find a symbol.
returned by CScript sys environment
returning C1M1A1 will result in "Unresolved symbol C1M1A1"
returns true if 'node' is defined and has a matching 'kind'.
returns true if the position is in between the open and close elements of an JSX expression.
reuseIdentifierExpressions
reverse sort assuming no overlap
root module now multiple module declarations
run check on export symbol to check that modifiers agree across all exported declarations
run check once for the first declaration
run check only former check succeeded to avoid cascading errors
run check only if former checks succeeded to avoid reporting cascading errors
run subsequent checks only if first set succeeded
run the check only for the first declaration in the list
s1 is static property of c1
same as above but with an additional level of nesting
same as above but with an additional level of nesting and third module declaration
same as foo4 with different type parameter ordering
same as indexing by 1 when done numerically
same as subtypingWithCallSignatures2 just with an extra level of indirection in the inheritance chain
same as subtypingWithConstructSignatures2 just with an extra level of indirection in the inheritance chain
same cases as above but with optional
satisfies subtype for both of base's call signatures
satisifies string indexer but not numeric indexer
save import into the local
save previousRange since processRange will overwrite this value with current one
scanner is not on the token (either advance was not called yet or scanner is already past the end position)
searchLocation: a node where the search value
see ScriptElementKind
see ScriptElementKindModifier, comma separated
see the Intl.Collator object for details.
self references are illegal
set 'declared inside loop' bit on the block-scoped binding
set breakpoint in binding pattern
set default project of r to the new project
set the flag to put default library to the beginning of the list
set the requested context flags
set this to true to check each edit for accuracy
set to undefined when enum member is non-constant
sets the container to the class type's symbol (which is shared by the instance type)
setter with annotation
setting compiler options discards module resolution cache
shift all parts on the delta size
shimmed host does not support getProjectVersion
should already be reasonably well covered
should be a comment line
should be an error - can't coerce infered return type to match setter annotated type
should be an error - i3 does not implement the members of i1
should be an error - is
should be an error - it doesn't implement the members of I1
should be an error - subtype relationship - is
should be an error, used to be indexer, now it is a computed property
should be compile error
should be error, currently reported correctly
should be legal, once was an error
should be ok - subtype relationship - is
should be ok everywhere
should be start of dependency list
should be type mismatch error
should be valid, but MyClass has no implementation to handle it.
should be valid: any includes void
should error - string expected
should error for continued autonumbering
should error if 'n3' is correctly type 'string'
should error since './file1' does not have namespace meaning
should error, 123 is not string
should error, as 'n1' should be type 'number', not 'any'.
should error, as 'n2' should be type 'number', not 'any'.
should get a fresh type parameter which each then call
should have explicit export
should keep the parentheses in emit
should not be an error
should not be an error - infer number
should not be an error here
should not be an error to order them this way
should not crash compiler
should not crash the compiler :)
should not error - "test" should not expect a boolean
should not error - return types are the same
should not error if 'n1' is correctly number.
should not error if 'n2' is correctly number.
should not error if 'n3' is correctly type 'string'
should not error on '+'
should not fully qualify 'x'
should not generate 'this.Math.E'
should not raise a 'container type' error
should not raise an error
should not work, as 'number' has a different brand
should only report one error
should produce an error
should raise error at class decl
should report 1 error
should return 'string', once returned 'any'
shouldEmitCommaBeforeAssignment
shouldn't be an error
shouldn't be an error since type is the same as the first declaration
shouldn't be picking up "x" and "y" from the object lit
shouldn't crash at this point
shouldn't need to redeclare the string overload
show (constructor) Type(...) signature
single line multiple trailing comments
single line with a comment
skip .tsx files if jsx is not enabled
skip a member if it or any of its parameters are not decorated
skip an accessor declaration if it is not the first accessor
skip decoration of the constructor if neither it nor its parameters are decorated
skip list items that ends on the same line with the current list element
skip members that cannot be decorated (such as the constructor)
skip parenthesized nodes
skip property names in property access expression
skip the initially matched entry
skip the next keyword
skip this check for nodes that cannot have decorators.
so the below are all errors
so this one hides the base type member that is identical modulo return types
some sort of block quote
source file level classes in system modules are hoisted so 'var's for them are already defined
source map URL written in the .js file
space after second type argument
space before first type argument
spaces before the first type argument
spacing around arrow in chained fat arrow syntax
span in first statement of the clause
span in statement of the do statement
span of for (a in ...)
span on complete module if it is instantiated
span on complete node
span on debugger keyword
span on return keyword and expression if present
span on the expression
spanIndex is either the index for a given template span.
specifically checking output here, bug was that test used to be undefined at runtime
specified range ends before the error refered by 'index' - no error in range
specified range overlaps with error range
split comment in lines
starts of normal trivia
state is CharRangeSection.End
state used by reachability checks
state used for emit helpers
static as constructor parameter name should give error if 'use strict'
static getter property
static off an instance - should be an error
static side of the class
static sum with property
statment terminated by an automatic semicolon
statment terminated by an explicit semicolon
stop when formatting scanner advances past the beginning of the child
stop when formatting scanner moves past the beginning of node list
store resolved type directive on the file
store text by appending to end of insertedText
store the compilation settings
string (guard as assertion)
string as right operand
string could plus every type, and the result is always string string as left operand
string indexer is A, number indexer is B
string indexer is any, number indexer is A
string indexer is any, number indexer is B
string named numeric properties work correctly, errors below unless otherwise noted
string or string array
string type expressions
string unless otherwise specified
string, contextual signature instantiation is applied to generic functions
string, number or boolean
strip any trailing slash
strips the fileName from the path.
stub implementation if Buffer is not available (in-browser case)
stub missing host functionality
success after using alternative rootDir entry
success on loading '/root/folder1/file1_1/index.d.ts'
super call in a constructor
super call in a lambda in a constructor
super call in a lambda in a function expression in a constructor
super call in a lambda in a method
super call in a lambda in an inner function in a constructor
super call in a lambda in an inner function in a method
super call in a method
super call in a nested lambda in a constructor
super call in a nested lambda in a method
super call in an inner function in a constructor
super call in class accessor (get and set) of derived type
super call in class accessor (get and set) with no base type
super call in class constructor of derived type
super call in class member function of derived type
super call in class member function with no base type
super call in class member initializer of derived type
super call in class member initializer with no base type
super call in static class accessor (get and set) with no base type
super call in static class member function with no base type
super call in static class member initializer with no base type
super call with type arguments
super in a nested lambda in a constructor
super in a nested lambda in a method
super in a non class context
super in static functions
super property in a nested lambda in a constructor
super property in a nested lambda in a method
symbol should not originate in augmentation
syntacticClassifierAbsent
syntax error, missing '(x)'
syntax-ish errors /////
system modules does not support export assignment
target type has generic call signature
target type with non-generic call signatures
targetSourceFile is when users only want one file in entire project to be emitted.
tempFun - Can't have fun for too long.
ternary exression's else clause
test basic configurations
test codegen for instance properties
test error on property declarations within class constructors
test html file to drive the test
test requirements for super calls
test this reference in field initializers
text change information
text doesn't get defined.
that omit a value are considered computed members (as opposed to having auto- incremented values assigned).
the class was never entered into type space, so add it
the compiler js sources + a call the compiler
the constraints are self-referencing, no downstream error
the corresponding inferred type arguments to become fixed and no further candidate inferences are made for them.
the currentDirectory is needed for rwcRunner to passed in specified current directory to compiler host
the dynamic import case will insert the semi-colon automatically
the file requesting project error list
the first iteration aligns us with the change start.
the last non-whitespace character in the current line
the parameter list is fixed, so this should not error
the problem is if the declaration has an initializer.
the property bar does not exist on a value of type A
the type of a variable or parameter is narrowed by any type guard in the 'if' condition when true.
the type of a variable or parameter is narrowed by any type guard in the left operand when true.
then try alternative rootDir entry
then try to resolve using remaining entries in rootDirs
thenBod created continuation for if statement
there are no parts after http:// just return current string as the pathComponent
there exists a symbol with this name
there is --outDir specified
there is --sourceRoot specified
there is an old program, check if we can reuse its structure
there is no contextual this type from an Foo.x.
there is no such thing as terminator token for CaseClause/DefaultClause so for simplicity always consider them non-completed
there was existing error:
these 3 should be errors
these are multiple trailing comments
these are not same type
these fields can be present in the project file
these should be error for implicit any return type
these should be errors
these should be errors at the type parameter constraint declarations, and have no downstream errors
these should be errors for implicit any parameter
these should be errors unless otherwise noted
these should not be errors since the functions are exported
these two should give the same error
they actually are properly being contextually typed.
they are union types with identical sets of constituent types, or
thi is multi module 2
this *should* always be an 'if' keyword.
this capture only in both setter and getter
this capture only in setter
this function will run after checking the source file so 'CaptureThis' is correct for all nodes
this is a combined symbol for multiple augmentations within the same file.
this is a pure local symbol (all declarations are non-exported) - no need to check anything
this is a workaround for React
this is call signature
this is comment about a
this is comment for b
this is eg of single line jsdoc style comment
this is f2 var comment
this is fine for let, but not const.
this is inline comment for a
this is inline comment for b
this is interface 2 with memebers
this is just a string
this is lambda comment
this is lambda multiplication
this is module comment
this is multi declare module
this is multi module 2
this is multi module 3 comment
this is signature 4 - with number parameter
this is signature 4 - with string parameter
this is the identifier 'declare'
this is the identifier 'm'
this is the identifier 'module'
this is the identifier 'n'
this is the identifier 'namespace'
this is token that starts at the end of previous token - return it
this is top level converted loop and we need to create an alias for 'arguments' object
this is valid since B.Line _is_ visible outside Geometry
this is what React would like to write (and what they write today)
this is where user expects to see sourceMap
this line causes the nullref
this line should not cause the following 2 to have errors
this line should raise an error otherwise, there's a bug in overload resolution / partial typechecking
this map is used by transpiler to supply alternative names for dependencies (i.e. in case of bundling)
this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed
this requires linear space so don't hold on to these
this set is used to filter names brought by star exports.
this should be an error
this should be an unresolved symbol I error
this should be be an erro
this should be errors
this should not be an error
this should not be an error as the error is raised by expr above
this should not cause a crash - push should be typed to any
this should report error
this shouldn't be an error
this shouldn't crash the compiler...
this was handled as if this was in a module
this will set up a series of describe/it blocks to run between the setup and cleanup phases
this will work in the browser via browserify
this would cause the compiler to run out of memory.
this: IndexedWithThis because of contextual typing.
this: any because 'foo' matches the string indexer
this: any because of the string indexer
this: any because the contextual signature of init doesn't specify this' type
this: contextual typing
this: superclass compatibility
this:any compatibility
this:void compatibility
to 'return undefined'
to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported
to inferences made directly to that type parameter
top level converted loop - return unwrapped value
top level script node
trailing commen single line
trailing comment 1 getter
trailing comment for property
trailing comment module
trailing comment of // style
trailing comment of constructor
trailing comment of constructor 2
trailing comment of function
trailing comment of method
trailing comment of only getter
trailing comment of setter only
trailing comments are emitted at space/*trailing comment1 */space/*trailing comment
trailing dotted module 2
trailing dotted module comment
trailing inner module
transpileModule does not write anything to disk so there is no need to verify that there are no conflicts between input and output paths.
treat as single line comment
treat computed property names where expression is string/numeric literal as just string/numeric literal
treat orphaned files as newly opened
treat this as a property declaration with a missing name.
trigger synchronization to make sure that LSHost will try to find 'f2' module on disk
trigger synchronization to make sure that import will be fetched from the cache
trim whitespaces starting from the beginning of the span up to the current line
trimmed forward and ending spaces text
triple slash comment1
tripleslash references has changed
true when the current location also allows for a new identifier
true: delete read-only files
truthy means we expect some error.
try get the call/construct signature from the type if it matches
try to fetch actual indentation for current node from source text
try to get file using a relative name
try to step on generated name
tslint:disable:no-in-operator
tslint:disable:no-null-keyword
tslint:disable:no-unused-variable
tslint:disable:no-var-keyword
tslint:enable:no-in-operator
tslint:enable:no-null
tslint:enable:no-unused-variable
tslint:enable:no-var-keyword
two errors (visibility and type mismatch)
two errors: the types are not identical and duplicate signatures
two levels of privates
type alias declaration here shouldnt make the module declaration instantiated
type arg inference should fail for S since a generic lambda is not inferentially typed.
type as the second operand.
type of 'this' in a fat arrow expression body is Any
type of 'this' in a fat arrow expression param list is Any
type of 'this' in a function declaration body is Any
type of 'this' in a function declaration param list is Any
type of 'this' in a function expression body is Any
type of 'this' in a function expression param list list is Any
type of 'this' in an object literal is the containing scope's this
type of 'this' in an object literal method is the type of the object literal
type of 'this' in constructor body is the class instance type
type of 'this' in global module is Any
type of 'this' in member accessor(get and set) body is the class instance type
type of 'this' in member function body is the class instance type
type of 'this' in member function param list is the class instance type
type of 'this' in member variable initializer is the class instance type
type of 'this' in static accessor body is constructor function type
type of 'this' in static function body is constructor function type
type of 'this' in static function param list is constructor function type
type of 'x' should be 'Colors'
type of parameter is overload set which means we can't do inference based on this type
type of super call expression is void
type of the guarded variable.
type of this is the constructor function type
type parameter as left operand
type parameter as right operand
type parameter inference ////
type parameters are visible in parameter list, return type and type parameter list
type parameters not identical across declarations
type reference directives has changed - program is not reused
type should be number
typechecking the function type shouldnot crash the compiler
typed param with default value
typeof  operator on boolean type
typeof  operator on enum type
typeof  operator on number type
typeof is allowed only for static/non local functions
types.length - 1 is the maximum score, given that getCommonSupertype returned false
typescript doesn't like the elements being different
unconditionally set oldProgram to undefined to prevent it from being captured in closure
undefined + boolean/Object
undefined + number/enum
unexpected error here bug 840246
unexpected error here, bug 840000
uninstantiated module
union Cond is a boolean type expression
union Cond is a boolean type literal
union Cond is a string type expression
union Cond is a string type literal
union Cond is an any type expression
union Cond is an any type literal
union Cond is an object type expression
union Cond is an object type literal
union Results shoud be same as Expr1 and Expr2
unit tests always list files explicitly
unknown, __resolving__ etc)
unlabeled break or continue within iteration statement - ok
unlabeled break within switch statement - ok
unless in case if the startNodeSelf represents the firstToken then we need to choose its parent
unqualified names can refer to member that reside in different declaration of the enum so just doing name resolution won't work.
usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
use constructor scope if a method as well
use length of prefix as betterness criteria
use typeof if format flags specify it
use typeof in type query
use typesRoot and fallback to directory that contains tsconfig if typesRoot is not set
useCaseSensitiveFileNames
useCaseSensitivefileNames:
useOnlyExternalAliasing
used to ICE without return type annotation
used to get the type wrong here.
used to incorrectly think this was missing a type argument
user defined subtypes of array do not count, all of these are errors
users can define tests to run in mytest.config that will override cmd line args, otherwise use cmd line args (test.config), otherwise no options
uses defined below class in module
uses the type parameter type of the base class, ie string
using the globally visible name
using void returning function as constructor
valid because Giraffe satisfies the constraint.
valid because both Giraffe and Elephant satisfy the constraint.
valid but error with noImplicitAny
valid call to an invalid function
valid call to an invalid function, U is inferred as B, which has a foo
valid left operands the left operand is required to be of type Any, the String primitive type, or the Number primitive type
valid right operands the right operand is required to be of type Any, an object type, or a type parameter type
valid since Point is exported
valid since detail is any
valid with noImplicitAny
valid, T is inferred to be Date
valid, even though x is a Base, parameter covariance works even after contextual signature instantiation
valid, items is subtype of args
valid, no inferences for V so it defaults to Derived2
valid, parameter covariance works even after contextual signature instantiation
valid, target is more constrained than source, so it is safe in the traditional constraint-contravariant fashion
validate all exportable statements
value of 'static' is not the same for properties - not override, skip it
var deckaration with comment on type as well
var type for now (add syntax for type annotation)
variable local to this module body
variable with function type comment
variables in function declaration
variables in function expressions
variables in variable declaration list were already hoisted
verify no noImplictAny errors reported with cast expression
verify that internal state is still correct
verify the decoded span is same as the new span
verify the sequence numbers
verify there is no empty navigation item.
visit siblings in reverse execution order
void since there's a body
void sources are assignable to anything.
walk backwards skipping line breaks, stop the the beginning of current line.
walk down setting parents that differ from the parent we think it should be.
walk toward the start of the list starting from current node and check if the line is the same for all items.
walk up and search for the parent node that ends at the same position with precedingToken.
walked arguments as part of members
warns when classic properties are defined on the instance, but does not invoke them.
was Error: Overload signature is not compatible with function definition.
was error TS2011: Cannot convert 'string' to 'number'.
was error, ok after constraint made illegal, doesn't matter
was error, shouldn't be
was: error Type reference cannot refer to container 'M.C'.
was: error, cannot assign string to number
we are currently nested in another converted loop - return unwrapped result
we choose the first candidate so the result is dependent on the order of the arguments provided
we have already generated a variable for this node, write that value instead.
we have to dump all syntax trees and create new ones.
we only decorate parameters of the set accessor
we only decorate the parameters here if this is a method
we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.
we should always have at least one span.
we still need to emit exportStar helper
when running in the browser the 'full path' is the host name, shows up in error baselines
which could be used in an assignment check for constraint satisfaction
while (in do-while) is not part of the tree
whitespace above again
whitespace only JsxText
will be recursive reference when OwnerList is expanded
will have an owner property that is an infinitely expanding type reference
with object type literal
with types that are intersections of the respective members in the constituent types
word2md converts a Microsoft Word document to Markdown formatted text.
workaround for VS document highlighting issue - keep only items from the initial file
works - ambiguous call is resolved to be the first in the overload set so this returns a string
would blow up at runtime
write call to exporter function for every export specifier in exports list
write each of these declarations asynchronously
write name of exported declaration, i.e 'export var x...'
write remaining js lines
write the call to exporter for enum
write the changes to disk
written type with parenthesis
written with space before type argument
wrong number of type arguments
wrong unicode sequences
x has type D, new G(x) fails, so first overload is picked.
x has type any NOT number
x is an optional with type number
x is inferred to be a number
x is inferred to be string
x isn't in scope here
x should not be an optional property
x.id should be number, no charAt member
x.id should be string, so should be OK
x.name should be string, no toExponential member
x.name should be string, so should be OK
y fails due to a: string in I1, z fails due to I1 not being assignment compatible to I2
y should be OK now member a is gone, z fails due to I1 not being assignment compatible to I2
y should be OK with member a the correct type, z still fails due to I1 not being assignment compatible to I2
y visible because same module
