"BG" stands for background.
- This is done just by looking for those tokens and setting the "flag".
- We make sure to still print things for the removed lines, to keep line numbers consistent to ease debugging.
-- Pre-check
./ldb needs to be avaible to be executed.
./run_test_ext.sh
1 if not pass.
2048 is the max for non root users on Mac
386 registers
A PIC object.
A base image with build tools and a user account
A libtool-controlled library.
A libtool-controlled object.
A shell script to load some pre generated data file to a DB using ldb tool ./ldb needs to be avaible to be executed.
A shell script to verify DB generated by generate_random_db.sh cannot opened and read correct data.
A small script for comparing IR for unit tests from before and after a change to the JIT.
A standard non-PIC object
A standard object.
A word about this shell script:
Absolute path.
Accept any command-line options.
Accept the current argument as the source file.
Add PIC object to the list of files to remove.
Add React Native copyright
Add a -L argument.
Add in all the interfaces that we are compatible with.
Add libc to deplibs on all other systems if necessary.
Add non-PIC object to the list of files to remove.
Add our own program objects to the symbol list.
Add the "lib" prefix for modules if required
Add the arguments to base_compile.
Add the color to the diff.
Add the dll search path components to the executable PATH
Add the libdir to current_libdirs if it is the destination.
Add the search paths of all dependency libraries
Add the symbol object into the linking commands.
Aesthetically quote it.
Aesthetically quote the argument.
Again, we only want to link against shared libraries
Again, writing regexps to a file.
All rights reserved.
All subsequent reloadable object files will link in the last one created.
Allow error messages only from the first compilation.
Allow the use of GNU shtool's install command.
Also used by the default 'make install' in node to point npm at the newly installed node, rather than the first one in the PATH, which would be the default otherwise.
Always ask for I/O statistics to be measured.
Amend to last commit if user do the post-commit format check
An additional grant of patent rights can be found in the PATENTS file in the same directory.
An archive.
An image for each of the io.js versions we want to test with that version installed and the latest npm
An image for each of the node versions we want to test with that version installed and the latest npm
An image on top of the base containing clones of repos we want to use for testing
And here is the reason: when a library appears more than once as an explicit dependence of a library, or is implicitly linked in more than once by the compiler, it is considered special, and multiple occurrences thereof are not removed.
Anything else should be a program.
Append the command to create the export file.
Append the name of the PIC object to the libtool object file.
Append the name of the non-PIC object the libtool object file.
As a special exception to the GNU General Public License, if you distribute this file as part of a program that contains a configuration script generated by Autoconf, you may include it under the same distribution terms that you use for the rest of that program.
Assume this is the tagged configuration we want.
Assumes GNU versions of utilities in PATH.
Avoid inline document here, it may be left over
Backslashes separate directories on plain windows
Based on the Bash documentation example.
Be nice, post SIGTERM first.
Blanks in the command may have been stripped by the calling shell, but not from the CC environment variable when configure was run.
Break out early, otherwise skipped_export may be set to false by a later but shorter cmd.
Building a libtool convenience library.
Building outside of a git repo, use system time instead.
Bundle React Native app's code and image assets.
But we must not use pic_flag when linking with -static.
But we'll never go from static-only to shared-only.
But, then there is irix which has an extra 1 added just for fun
By default we'll run all the tests.
CHECK ME:  I think I busted this.
Calculate the filename of the output object if compiler does not support -o with -c
Calculate the version variables.
Can't find it, oh well...
Can't use summarize_result here.
Causes problems with __ctype
Change the cli shebang to point at the specified node Useful for when the program is moved around after install.
Change the help message to a mode-specific one.
Check argparse, a library that clang-format-diff.py requires.
Check clang-format-diff.py
Check if any of the arguments is a wrapper script.
Check if this script has already been added to pre-commit hook.
Check that each of the things are valid numbers.
Check the format of last commit
Check the format of uncommitted lines,
Check the variables that should have been set.
Check to see if the archive will have undefined symbols.
Check to see that each library is installed.
Check to see that the destination is a directory.
Check to see that this really is a libtool archive.
Check to see that this really is a libtool object.
Check whether tagname contains only valid characters
Checkout and build your new hhvm, then: ./test/run -l -m jit ./test/quick ./test/tools/compare-ir.sh
Clean up the generated files.
Clear the reloadable object creation command queue and initialize k to one.
Clear the version info if we defaulted, and they specified a release.
Collect dlpreopened libraries
Compiler inserts libc in the correct place for threads to work
Compilers locations
Copyright 2009 The Go Authors.
Copyright 2012 The Go Authors.
Copyright 2013 The Go Authors.
Create an invalid libtool object if no PIC, so that we don't accidentally link it into a program.
Create links to the real library.
Create the object directory.
Create the old-style object.
Darwin ld doesn't like 0 for these options...
Deduce the name of the destination old-style object file.
Deduce the name of the old-style object file.
Define NVM_DIR and source the nvm.sh setup script
Define a set of benchmarks.
Delay between posting the SIGTERM signal and destroying the process by SIGKILL.
Delete any leftover library objects.
Delete the generated files.
Delete the libtool libraries and symlinks.
Delete the old objects.
Delete the old output file.
Delete the old output files.
Delete the old symlinks, and create new ones.
Demonstrate that h2tp can handle file- and directory-name components that contain spaces.
Determine the prefix the user has applied to our future dir.
Determine the type of output
Diff against the old results
Directory that this library needs to be installed in:
Disable this feature.
Discard the --no-reexec flag, and continue.
Discover the nlist of each of the dlfiles.
Display what would be done.
Do a symbolic link so that the libtool archive can be found in LD_LIBRARY_PATH before the program is installed.
Do a test to see if this is a libtool program.
Do a test to see if this is really a libtool program.
Do each command in the archive commands.
Do each command in the finish commands.
Do each command in the old_postuninstall commands.
Do each command in the postinstall commands.
Do each command in the postuninstall commands.
Do each installation.
Do each of the archive commands.
Do in-place format adjustment.
Do not bother doing anything if just a dry run
Do not include libc due to us having libc/libc_r.
Do not include libc_r directly, use -pthread flag.
Do the single finish_eval.
Do the static libraries later.
Doing this in parallel is racy, but the absolute worst that can happen is we'll end up with some garbled text inside a .noserver file.
Don't allow the user to place us outside of our expected location b/c this prevents finding dependent libraries that are installed to the same prefix.
Don't allow undefined symbols.
Don't build PIC code
Don't check for shared/static.
Don't error if the file doesn't exist and rm -f was used.
Don't link with libc until the a.out ld.so is fixed.
Don't test for the "default" C tag, as we know, it's there, but not specially marked.
Double-quote args containing other shell metacharacters.
Dry-run case.
EBCDIC based system
Eliminate all temporary directories.
Encode it into a variable for safe keeping.
Error occurred in the first compile.
Evaluate the configuration.
Everything works.
Example workflow:
Execute a set of benchmarks to cover variety of scenarios.
Exit here if they wanted silent mode.
Exit if we aren't doing a library object file.
Exit on error.
Export our shlibpath_var if we have one.
Export the shlibpath_var.
Extract -R from dependency_libs
Extract subdirectory from the argument.
Extract the objects.
FG_MBWRITEPERSEC - write rate limit in MB/second for tests like overwrite where stats are reported for the write threads.
FIXME: remove this flag sometime in the future.
FIXME: should reinstall the best remaining shared library.
FIXME: these two pipelines are reading and writing to the same file.
Fast installation is not supported
Fetch right version of gcov
Figure out destination file name, if it wasn't already specified.
Figure out why this happens.
Files to dlopen/dlpreopen
Finalize command for both is simple: just hardcode it.
Find all gcno files to generate the coverage report
Find the directory that this script lives in.
Find the relevant object directory and library name.
First, .php files are included with their open tags stripped.
First, compute the expected output using regular HHVM execution
Follow Location: headers, and fail on errors
Follow soft links.
Follow symbolic links until we get to the real thisdir.
For more details on the changes see the blog post listed below.
For now, we need to specify -no-undefined on the libtool link line when we can be certain that all symbols are satisfied, otherwise we get a static library.
Gather all diagnostic identifiers.
Generate four random files.
Generate the html report.
Get the absolute pathname.
Get the compilation command and the source file.
Get the most recently committed files.
Get the name of the library object.
Get the real and link names of the library.
Getting valid data requires a number of iterations and having an ability to run the test separately from rest of the benchmarks helps.
Given conflicting choices, we go for a static library, that is the most portable, since we can't tell whether shared libraries were disabled because the user asked for that or because the platform doesn't support them.
Given that compact benchmark doesn't output regular statistics then we'll just use the time command to measure how long this step takes.
Global variables.
Global variables:
Go through the arguments, transforming them on the way.
Gone through all deplibs.
Hacky way of disabling fbmake's pre_command.
Handle -dlopen flags immediately.
Handle the remaining objects by creating one last reloadable object file.
Hardcode the library path.
Hardcode the library paths
Helper for running TestExt from an fbmake build.
Here we assume that one of hardcode_direct or hardcode_minus_L is not unsupported.
Highlight the insertion/deletion from the clang-format-diff.py's output
However, greadlink is fine, so Solaris can join the party, too.
I think this is a good way to load.
I would guess that would be a bug.
I'm not sure if I'm treating the release correctly.
If -module or -export-dynamic was specified, set the dlname.
If a disable-shared tag is given, we'll fallback to a static-only configuration.
If clang_format_diff.py command is not specfied, we assume we are able to access directly without any path.
If given, STRING is the basename for that directory.
If it is, it will not operate correctly.
If it won't happen then empty output from grep when searching for "Sum" will cause syntax errors.
If libtool objects are unsupported, then we need to preload.
If mktemp works, use that first and foremost
If no command line arguments then run for 24 threads.
If no make is found, then just execute the necessary commands.
If readlink isn't available, then this is just too tricky.
If the PIC object exists, use it instead.
If the file is missing, and there is a .exe on the end, strip it because it is most likely a libtool script we actually want to install
If the library has no export list, then create one now
If the library was installed with an old release of libtool, it will not redefine variables installed, or shouldnotlink
If the previous option needed an argument, then skip it.
If the previous option needs an argument, assign it.
If the user specified any rpath flags, then add them.
If the user specifies -o file.o, it is replaced with file.lo
If there are failures, their test filenames will be printed to stdout.
If there is no directory component, then add one.
If there is no dlname, no dlopen support or we're linking statically, we need to preload.
If there is no dlopen support or we're linking statically, we need to preload.
If there was a directory component, then change thisdir.
If there's no bash, then don't even try to clean
If there's no uncommitted changes, we assume user are doing post-commit format check, in which case we'll check the modified lines from latest commit.
If this fails, it's not such a big deal.
If this is too large then the non-writer threads can get starved.
If this variable is set in any of the actions, the command in it will be execed at the end.
If we cannot find lcov in this machine, we'll simply skip this step.
If we have no mode, but dlfiles were specified, then do execute mode.
If we have whole_archive_flag_spec, we want to use save_libobjs as it was before whole_archive_flag_spec was expanded, because we can't assume the linker understands whole_archive_flag_spec.
If we put the line we're generating into this file, then the linter will think the generator itself is generated.
If we're not in dry-run mode, bomb out on failure
If you compile php using --with-cdb the internal functions will be used and no  external library is used so that this script is not necessary.
If you find it suitable, feel free to include anywhere: the very same logic as in the original examples/scripts, a little more transparent implementation to my taste.
In level-based compaction, it means number of L0 files.
Infer the operation mode.
Install the binary that we compiled earlier.
Install the libtool object if requested.
Install the old object if enabled.
Install the pseudo-library for information purposes.
Install the shared library and build the symlinks.
Instead, add this to base_compile
Interval between checks if the process is still alive.
It backslashifies metacharacters that are still active within double-quoted strings.
It is a libtool convenience library, so add in its objects.
It is impossible to link a dll without this setting, and we shouldn't force the makefile maintainer to figure out which system we are compiling for in order to pass an extra flag for every libtool invocation.
It is still crash safe and the client can discover where to restart a load after a crash.
It must work everywhere, including on systems that lack a /bin/bash, map 'sh' to ksh, ksh97, bash, ash, or zsh, and potentially have either a posix shell or bourne shell living at /bin/sh.
It would break on at least Digital Unix and AIX.
It'll also stub "node-pre-gyp".
It'll download the relevant parts of "node-inspector" used by "nuclide-debugger-node", and its dependencies.
It's actually not that bad.
Just accumulate the unique libdirs.
Just add the directory containing the .lo file.
Just implementing what was already the behavior.
Just move the object if needed
Just move the object if needed, then go on to compile the next one
Just print a warning and add the library to dependency_libs so that the program can be linked against the static library.
Just use the default operation mode.
Let the type of C char be signed to make the bare syscall API consistent between platforms.
Let's try to salvage the situation: Compile a separate program for each library.
Lib Platform
Lib Version
Libraries locations
Libraries that this one depends upon.
Like Linux, but with the current version available in verstring for coding it into the library header
Link against this library
Link the convenience library
Link the dlpreopened libraries before other libraries
Link the executable and exit
Lock this critical section if it is needed We use this script file to make the link, it avoids creating a new file
Loop over the list of objects to be linked.
Loop through the commands generated above and execute them.
Lots of our logic relies on knowing the shape of the token table.
Make a backup of the uninstalled library when relinking
Make a new name for the extract_expsyms_cmds to use
Make executables depend on our current version.
Make it easier to run only the compaction test.
Make sure IFS has a sensible default
Make sure dlfiles contains only unique files that won't be dlpreopened
Make sure dlprefiles contains only unique files
Make sure echo works.
Make sure lib_search_path contains only unique directories.
Make sure that fillrandom uses the same compaction options as compact.
Make sure that we'll have unique names for all the files so that data won't be overwritten.
Make sure the rpath contains only unique directories.
Make sure the variables and directories we expect to exist actually do.
Make sure the xrpath contains only unique directories.
Make sure under any mode, we can read user input.
Make sure we don't pick an alternate name that also overlaps.
Make sure we have at least an empty file.
Make sure we only generate libraries of the form `libNAME.la'.
Many Bourne shells cannot handle close brackets correctly in scan sets, so we specify it separately.
Maybe even breaks it.
Maybe install the static library, too.
Maybe just do a dry run.
Mksyscall reads those comments to generate the stubs.
NKEYS         - number of key/value pairs to load BG_MBWRITEPERSEC - write rate limit in MB/second for tests in which there is one thread doing writes and stats are reported for read threads.
NLS nuisances.
NOTE: Changing this file will not affect anything until you rerun configure.
NSECONDS      - number of seconds for which to run each test in steps 2, 3 and 4.
Name of the PIC object.
Name of the non-PIC object.
Names of this library.
Need to hardcode shared library paths or/and link against static libraries
No PIC object so indicate it doesn't exist in the libtool object file.
No such image, so make it
Non-PIC object.
Not a directory, so check to see that there is only one file specified.
Not a shared library
Note that this function assumes that the benchmark executes long enough so that "Compaction Stats" is written to stdout at least once.
Note the libdir as a future libdir.
Now add the directory to shlibpath_var.
Now compile the dynamic symbol file.
Now create the libtool archive.
Now create the wrapper script.
Now hardcode the library paths
Now look for all potential identifiers in the source files.
Now prepare to actually exec the command.
Now set the variables for building old libraries.
Nullify the symbol file.
Objects from convenience libraries.
On Cygwin there's no "real" PIC flag so we must build both object types
On Rhapsody replace the C library is the System framework
On all known operating systems, these are identical.
On the branch part.
On the path part.
On the production build servers, set data and stat files/directories not in /tmp or else the tempdir cleaning scripts will make you very unhappy.
One way to analyze the results is to run "grep real" on the resulting log files.
Only actually do things if our run command is non-null.
Only an error if not doing a dry-run.
Only append if the libtool object file exists.
Only attempt this if the compiler in the base compile command doesn't match the default compiler.
Only build a PIC object if we are building libtool libraries.
Only build a position-dependent object if we build old libraries.
Only check for convenience libraries
Only create the output if not a dry run.
Only do commands if we really have different PIC objects.
Only execute mode is allowed to have -dlopen flags.
Only for tests that do range scans
Only set LANG and LC_ALL to C if already set.
Otherwise, use the dlname, so that lt_dlopen finds it.
Otherwise, we'll check format of the uncommitted code only.
POSIX demands no paths to be encoded in archives.
Parameter description:
Parse our command line options once, thoroughly.
Parse the name list into a source file.
Parse the raw gcov report to more human readable form.
Parse the version information argument.
Pass these as arguments to this script.
Path to react-native folder inside node_modules
Porting Go to a new architecture/operating system combination requires some manual effort, though there are tools that automate much of the process.
Possibly a libtool archive, so verify it.
Possibly a libtool object, so verify it.
Preload the old-style object.
Prepare the list of exported symbols
Prepend the subdirectory the object is found in.
Preserve any variables that may affect compiler behavior
Preserve exit status.
Print all diags that occur in the .td files but not in the source.
Print out the colored progress info so that it can be brainlessly distinguished by users.
Produces an ir-diffs.diff file that you can inspect for meaningful differences in JIT output.
Pull out the error names for later.
Pull out the signal names for later.
Quote the link command for shipping.
Quote the relink command for shipping.
RANGE_LIMIT   - the number of rows to read per range query for tests that do range queries.
REMOVE after next semver-major
REQUIRE: db_bench binary exists in the current directory
Read the .la file
Read the .lo file
Read the .lo file If there is no directory component, then add one.
Read the libtool library.
Readwhilewriting
Recognize several different file suffixes.
Relative path: add a thisdir entry.
Remember objdir for removal later, being careful to avoid duplicates
Remove our outputs, but don't remove object files since they may have been created when compiling PIC objects.
Remove this search path later
Remove version info from name if versioning should be avoided
Renaming some stuff in the cpp file
Replace all uninstalled libtool libraries with the installed ones
Replace the output file specification.
Restore saved environment variables
Restore the uninstalled library and exit
Restore the value of output.
Return a directory name, but don't create it in dry-run mode
Return value 0 means all regression tests pass.
Rhapsody C and math libraries are in the System framework
Rhapsody C library is in the System framework
Run C program to print error and syscall strings.
Run from react-native root
Run the actual program with our arguments.
Run the tests for all of the test images we've created, we should see node-gyp doing its download, configure and run thing _NOTE: bignum doesn't compile on 0.8 currently so it'll fail for that version only_
Running those commands is not automatic.
Sadly it is an enum without introspection, so instead make it macros so we can control its shape on re-requires of the .hpp file
Scour for shim files.
Search the libtool library
Sed substitution that helps us do robust quoting.
See if our shared archives depend on static archives.
See if we need to build an old-fashioned archive.
See the GNU General Public License for more details.
See the README.
See the names of the shared library.
See this helpful document on writing portable shell scripts: http://www.gnu.org/s/hello/manual/autoconf/Portable-Shell.html
See types_darwin.c and types_linux.c for examples.
Seekrandomwhilewriting
Set environment variables so that we can compile rocksdb using fbcode settings.
Set this to skip a set of tests which aren't critical for getting key metrics.
Set up a command to remove the reloadable object files after they are used.
Set up the nodenv node version manager if present
Set up the ranlib parameters.
Setting up the proxy for remote repo access
Should already be sitting in the npm folder.
Size constants
Skip --install_dir and --fbcode_dir.
Skip directories that are in the system default run-time search path.
Skip this library if it cannot be dlopened.
Some PHP constructs modify whole-process state or are not well-suited to be tested in a webserver.
Some compilers have problems with a `.al' extension so convenience libraries should have the same extension an archive normally would.
Some other compiler argument.
Some other compiler flag.
Speed up build times by skipping the creation of the offline package for debug builds on the simulator since the packager is supposed to be running anyways.
Start in website/ even if run from root directory
Stick the inst_prefix_dir data into the link command.
Strip any trailing slash from the destination.
Strip out hex symbols and other extraneous differences
Substitute the hardcoded libdirs into the rpath.
Suppress compiler output if we already did a PIC compilation.
Switch back when this issue with xctool has been resolved.
TODO: We use xcodebuild because xctool would stall when collecting info about the tests before running them.
TODO: test --dist-url by starting up a localhost server and serving up tarballs testing --dist-url, using simple-proxy.js to make localhost work as a distribution point for tarballs we can test whether it uses the proxy because after 2 connections the proxy will die and therefore should not be running at the end of the test, `nc` can tell us this
TODO: we also need to get the files of the latest commits.
Test 11: random read while writing
Test 12: range scan while writing
Test 13: reverse range scan while writing
Test 16: random read while merging
Test 17: range scan while merging
Test 18: reverse range scan while merging
Test 1: bulk load
Test 2a: sequential fill with large values to get peak ingest adjust NUM_KEYS given the use of larger values
Test 2b: sequential fill with the configured value size
Test 2c: same as 2a, but with WAL being enabled.
Test 2d: same as 2b, but with WAL being enabled.
Test 3: single-threaded overwrite
Test 4: random read
Test 5: random range scans
Test 6: random reverse range scans
Test again, we may have decided not to build it any more
The 'exit 0' below will be executed if any preceding command fails.
The Bash shell script executes a command with a time-out.
The PATH hackery in wrapper scripts is required on Windows and Darwin in order for the loader to find any dlls it needs.
The TAGs below are defined such that we never get into a situation in which we disable both kinds of libraries.
The auto-generated files have names beginning with z.
The command line is too long to execute in one step.
The command line is too long to link in one step, link piecewise.
The compiler in the base compile command matches the one in the tagged configuration.
The constant "fillseq" which we pass to db_bench is the benchmark name.
The current "srcfile" will either be retained or
The effects of -static are defined in a previous loop.
The environment variables are also optional.
The first argument is the command name.
The first file doesn't have a previous command to add.
The following is split over four lines so Phabricator doesn't think this file is generated
The generator is "mkerrors.sh".
The library was specified with -dlpreopen.
The linker will fail if global_symbol_pipe really was required.
The list of threads is optional and when not set is equivalent to "24".
The main benefit behind disabling WAL is to make loading faster.
The name of the static archive.
The name of this program:
The only shell it won't ever work on is cmd.exe.
The previous "srcfile" becomes the current argument.
The problem exists in FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.
The program doesn't exist.
The real first argument should be the name of the installation program.
The statement above tries to avoid entering an endless loop below, in case of cyclic links.
The syscall package provides access to the raw system call interface of the underlying operating system.
The tests in step 1 are only run for 1 thread.
The variables are:
Then .hhas files are included en-masse.
Then we can check whether they linked in statically or dynamically with ldd.
There are currently 15 tests in those steps and they are repeated for each entry in list-of-threads so this variable lets you control the total duration to finish the benchmark.
There are really only two kinds -- those that use the current revision as the major version and those that subtract age and use age as a minor version.
There are three entry points:
These are relics of 0.2 npm installs.
These modes are in order of execution frequency so that they run quickly.
These must come last.
This allows tests from steps 2, 3, 4 to be repeated faster.
This assumes single-version convenience libraries.
This code stresses the "libraries are programs" paradigm to its limits.
This doesn't have to be quite as cross-platform as install.sh.
This environment variable determines our operation mode.
This fallback is for the cmake build, which won't have an FBCODE_DIR environment variable, and runs this from the runtime subdir.
This hand-written Go file implements system calls that need special handling and lists "//sys" comments giving prototypes for ones that can be auto-generated.
This hand-written assembly file implements system call dispatch.
This is a terrible hack.
This is an annoying source of bugs.
This is not always right, but it is rare enough that we require users that really mean to play such unportable linking tricks to link the library using -Wl,-lname, so that libtool does not consider it for duplicate removal.
This is particularly important on AIX, because we don't support having both static and shared libraries enabled at the same time on that platform, so we default to a shared-only configuration.
This is the magic to use -rpath.
This is the part we're really interested in.
This is used for the "readwhile" tests.
This is valid on all known static and shared platforms.
This library was specified with -dlopen.
This library was specified with -dlpreopen.
This machine-generated file defines the system's error numbers, error strings, and signal numbers.
This may have to be revisited, in case too many convenience libraries get linked in and end up exceeding the spec.
This might be a little naive.
This prevents here-documents from being left over by shells.
This runs with a vector memtable and the WAL disabled to load faster.
This runs with a vector memtable.
This script generates Java structures that contain the offsets of fields in various ELF ABI structures.
This script is documentation more than anything else.
This script produces a list of all diagnostics that are defined but not used in sources.
This script should be run from the base of "nuclide-debugger-node".
This shell script fills the gap.
This should be run from the parent of the tools directory.
This should be used with the LevelDB fork listed here to use additional test options.
This source code is licensed under the BSD-style license found in the LICENSE file in the root directory of this source tree.
This uses the latest available iOS SDK, which is recommended.
This variable tells wrapper scripts just to set shlibpath_var rather than running their programs.
This variable tells wrapper scripts just to set variables rather than running their programs.
This will make the sha appear to change constantly, but without any insight into file state, it's the safest fallback
This wrapper script should never be moved out of the build directory.
Tiny little helper to create the empty php7 versions of your regression tests.
To select a specific SDK, run 'xcodebuild -showsdks' to see the available SDKs and replace iphoneos with one of them.
Transform .lo files to .o files.
Transform all the library objects into standard objects.
Transform arg to wrapped name.
Transform deplibs into only deplibs that can be linked in shared.
Transform the symbol file into the correct name.
Try looking first in the location we're being installed to.
Try sorting and uniquifying the output.
Try to find a suitable make If the MAKE environment var is set, use that.
Try to get the absolute directory name.
Tune values for level and universal compaction.
Typecheck, compile with the emitter and run the generated assembly
Unknown arguments in both finalize_command and compile_command need to be aesthetically quoted because they are evaled later.
Unless otherwise specified, we'll not generate html report by default
Unlock the critical section if it was locked
Update dependencies.sh file with the latest avaliable versions
Usage: First do 'make -C ../src test' to generate the .out files.
Use '-' rather than '.', since we only want one extension on DOS 8.3 filesystems.
Use a potentially-scary awk script to split the single hphp.y parser into two outputs.
Use a single thread to reduce the variability in the benchmark.
Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
Use standard objects if they are pic
Usually no arguments are needed, but mkerrors.sh will pass its arguments on to godefs.
VAL_SIZE      - the length of the value in the key/value pairs loaded.
Verify that the sample dump file is undumpable and then redumpable.
Warn if it was a shared library.
We also need to preload any dependent libraries so libltdl's deplib preloader doesn't bomb out in the load deplibs phase.
We cannot seem to hardcode it, guess we'll fake it.
We compile a program, linking it against the deplibs as a proxy for the library.
We don't need to create a wrapper script.
We don't want to rely on the grammar to have a fixed start and end token, so lets parse the file and make two macros for the min and max
We handle these cases below.
We have no uninstalled library dependencies, so finalize right now.
We keep going just in case the user didn't refer to lt_preloaded_symbols.
We might want to check whether the library exists or not.
We need an absolute path.
We need to accept at least all the BSD install flags.
We need to change the working directory because php5 xdebug only accepts filenames relative the working directory and so line breakpoint tests would fail if not run from the root test directory.
We need to display help for each of the modes.
We need to hardcode the library path
We need to know -static, to get the right output filenames.
We only need to search for static libraries
We prevent these files from being run in server mode by creating .noserver files if they contain one of the bad symbols.
We save the old values to restore during execute mode.
We should set the runpath_var.
We should set the shlibpath_var
We still want the files in our tree since they are checked in
We used to do the same as -all-static on platforms that didn't have a PIC flag, but the assumption that the effects would be equivalent was wrong.
We're trying link a shared library against a static one but the system doesn't support it.
Were list-of-threads specified as "1 2 4" then the tests in steps 2, 3 and 4 above would be repeated for 1, 2 and 4 threads.
Whenever we create different ones for PIC/non-PIC, this we'll have to duplicate the extraction.
Whether the deplib will be linked statically
Will build using it and check DBs generated by all previous tags can be opened by it.
Will suggest user to add this script to pre-commit hook if their pre-commit is empty.
Without this assignment, base_compile gets emptied.
Work around backward compatibility issue on IRIX 6.5.
Write go tool cgo -godefs input.
Write the output to both stdout and report file.
XXX For some reason, make is building all the docs every time.
Xcode project file for React Native apps is located in ios/ subfolder
You can use this script if you want to use an external cdb lib.
a race to see which make process will be the one to install marked
a race to see which make process will be the one to install marked-man
add this line back to normal code path when https://jira.mongodb.org/browse/SERVER-19123 is resolved
also remove any symlinks to this file.
always keep a non-empty value in "srcfile"
and its dependency_libs
arg 1 is the working directory to cd to arg 2 is the hhvm binary arg 3 is "-c" arg 4 is the ini file arg 5 is the test to run
arg Now actually substitute the argument into the commands.
arg is usually of the form 'gcc ...'
argument parsing loop
autoconf 2.59 or newer
bleh windows
build rocksdb
but shell scripts are "executable" too...
calculate the name of the file, without its directory
called by src/
cdb-0.75 lacks support for installing header files and creating a  library which programs can link against.
clear the logs
cmd/cgo doesn't support llvm-gcc-4.2, so we have to use clang.
com.facebook.soloader.MinElf uses these structures while parsing ELF files.
compiling the symbol table file with pic_flag works around a FreeBSD bug that causes programs to crash when -lm is linked before any other PIC object.
convert absolute version numbers to libtool ages this retains compatibility with .la files and attempts to make the code below a bit more comprehensible
could be an import, or static
define lt_preloaded_symbols some_other_symbol
define schedppq 1
definitely import
deplib doesn't seem to be a libtool library
do not "continue".
do not add paths which are already there
dummy test just to compact the data
dump the logs
echo "Installing without make.
endif ifdef __cplusplus
exit if any command fails
fast_install is set to needless
fbconfig passes a couple --foo arguments.
figure out the soname
fixup the dll searchpath if we need to.
for MKS sh The HP-UX ksh and POSIX shell print the target directory to stdout if CDPATH is set.
func_extract_an_archive dir oldlib
func_extract_archives gentop oldlib ...
func_infer_tag arg Infer tagged configuration to use if any are available and if one wasn't chosen via the "--tag" command line option.
func_win32_libid arg return the library type of file 'arg'
git add --all git commit -m "update website" git push cd ../relay/website
git checkout -- .
git clean -dfx git fetch git rebase
https://github.com/mdcallag/leveldb-1 http://smalldatum.blogspot.com/2015/04/comparing-leveldb-and-rocksdb-take-2.html
if the lib is a module then we can not link against it, someone is ignoring the new warnings I added
ifdef FREEBSD_WORKAROUND
ifdef __cplusplus
install all required packages for rocksdb
install all required packages for rocksdb that are available through yum
install mode needs the following variable:
libraries that don't have pic variant will not be included
libtool clean and uninstall mode
libtool compile mode
libtool execute mode
libtool finish mode
libtool install mode
libtool link mode
location of bzip headers and libraries
location of gflags headers and libraries
location of glibc
location of jemalloc
location of libgcc
location of libunwind
location of numa
location of snappy headers and libraries
location of zlib headers and libraries
look for old 0.x cruft, and get rid of it.
make sure that node exists
make sure the library variables are pointing to the new library
make sure we fail if the test failed
make the tar for node's deps
make the zip for windows users
measure fillseq with bunch of column families
measure memtable performance -- none of the data gets flushed to disk
measure overwrite performance
measure overwrite performance with bunch of column families
measure readrandom after load with filluniquerandom with 6GB block cache
measure readrandom with 100MB block cache
measure readrandom with 6GB block cache
measure readrandom with 6GB block cache and tailing iterator
measure readrandom with 8k data in memtable
measure readwhilewriting after load with filluniquerandom with 6GB block cache
move library search paths that coincide with paths to not yet installed libraries to the beginning of the library search list
need to echo "" after, because Posix sed doesn't treat EOF as an implied end of line.
non-PIC code in shared libraries is not supported
not really portable
not-installed libtool libraries
note that we can only use strict sh-compatible patterns here.
note: grep -r is not portable.
now actually clean, but only if there's anything TO clean
now prefix is where npm would be rooted by default go hunting.
now remove the package modules, and the .npm folder itself.
npm command completion script
only static version available
otherwise, try to find gmake, and then make.
paths that contain not-installed libtool libraries
place dlname in correct position for cygwin
platform is not provided, use latest gcc
prevent CircleCI from killing the process for inactivity
relink executable if necessary
remove .exe since cygwin /usr/bin/install will append another one anyway
remove all the sub directories
remove any links into the .npm dir, or links to version-named shims/symlinks.
replaced later.
report.txt provides a high level statistics
report.txt provides a high level statistics This should be run from the parent of the tools directory.
run tests and check output
running on devbox, just print out the values
script for creating a zip and tarball for inclusion in node
see symlink-check above in file_magic test
send data to ods
set java home so we can build rocksdb jars
set the temp dir
should download the headers file
size constants
space or tab
switch based on node version.
test EBCDIC or ASCII
test for cygwin because mv fails w/o .exe extensions
the above command should be used before it gets too long
the command line is too long to link in one step, link in parts
the deb would depend on libgflags2, but the static lib is the only thing installed by make install
the next one goes into the "base_compile" arg list
this is Mongo 3.0
try without the -e arg to sed.
use Intel SSE support for checksum calculations
use dlname if we got it.
used as fallback echo
used for prog,scan pass
v2.1 or older doesn't pass the debug build but OK with release build
version is not provided, use latest
we can't check for "0.0" in archive_cmds due to quoting problems, so we reset it completely
we do not want to link against static libs, but need to link against shared
we need to force mongo to use static library, not shared
whether we're linking any uninstalled libtool libraries
win32 will think the script is a binary if it has a .exe suffix, so we strip it off here.
write rate for readwhile...
write rate for tests other than readwhile, 0 means no limit
