"Expression UNLESS Expression"
"Last" is defined as the most recently added cursor.
"Surrounded" here means that the character directly before and after the cursor are both whitespace.
"oldOffset" values of null mean this is the first calculation of the waypoint's offset.
"onlyOnScroll" tells us to not even consider triggering waypoints during refresh, so we can eject early.
# Platform specific helpers
# Save the jibberish to a new file print "File encoded.
# This method applies a hit taken during a fight.
# This method takes one turn in a fight.
# remove it disposable.dispose() ```
# remove them all subscriptions.dispose() ```
# set multiple headers .headers(Authorization: 'bearer abcdef', Accept: 'application/json')
# this foul business...
## ...doesn't break things.
## Accessing TextEditor Instances
## Arguments: Registering Multiple Commands
## Arguments: Registering One Command
## Builds and returns an HTMLElement to represent the specified decoration.
## Call .loadOrCreate instead
## Context Menu CSON Format
## Defining settings for your package
## Essential: Add a listener for changes to a given key path.
## Essential: Calls your `callback` when the buffer's title has changed.
## Essential: Calls your `callback` when the gutter's visibility changes.
## Essential: Convert a position in buffer-coordinates to screen-coordinates.
## Essential: Create a marker on the default marker layer with the given range in buffer coordinates.
## Essential: Destroys the gutter.
## Essential: Determine whether lines in this editor are soft-wrapped.
## Essential: Fold the most recent cursor's row based on its indentation level.
## Essential: For each selection, copy the selected text.
## Essential: Get all pane items in the workspace.
## Essential: Get the editor's title for display in other parts of the UI such as the tabs.
## Essential: Get the indentation level of the given a buffer row.
## Essential: Get the position of the most recently added cursor in buffer coordinates.
## Essential: Get the selected text of the most recently added selection.
## Essential: Hide the gutter.
## Essential: Invoke `callback` when style sheet changes associated with updating the list of active themes have completed.
## Essential: Invoke the given callback when all packages have been activated.
## Essential: Invoke the given callback with all current and future text editors in the workspace.
## Essential: Open a new Atom window using the given options.
## Essential: Opens the given URI in Atom asynchronously.
## Essential: Retrieves the setting for the given key.
## Essential: Saves the editor's text buffer.
## Essential: Scan regular expression matches in the entire buffer, calling the given iterator function on each match.
## Essential: Scroll the editor to reveal the most recently added cursor if it is off-screen.
## Essential: Undo the last change.
## Essential: Visually and audibly trigger a beep.
## Extended: Calls your `callback` when the selection was moved.
## Extended: Get all loaded style elements.
## Extended: Get all panes in the workspace.
## Extended: Invoke `callback` for all current and future style elements.
## Extended: Open the dev tools for the current window.
## Get the Element for the editor.
## Getting and setting config settings.
## Helper method to pass data line by line.
## Multi-line block comment """
## Processes the destruction of the gutter.
## Public: Add a success notification.
## Public: Calls your `callback` when the cursor has been moved.
## Public: Clears the selection, moving the marker to the head.
## Public: Compare this cursor's buffer position to another cursor's buffer position.
## Public: Compare this selection's buffer range to another selection's buffer range.
## Public: Create a new pane to the left of this pane.
## Public: Creates a new GitRepository instance.
## Public: Determine whether the pane is active.
## Public: Determines if the selection contains anything.
## Public: Enable the package with the given name.
## Public: Get all the notifications.
## Public: Get the items in this pane.
## Public: Get the path to the apm command.
## Public: Invoke the given callback after a notification has been added.
## Public: Invoke the given callback when a specific file's status has changed.
## Public: Invoke the given callback when all packages have been loaded.
## Public: Invoke the given callback when the notification is dismissed.
## Public: Invoke the given callback when the pane hidden or shown.
## Public: Invoke the given callback when the pane resizes
## Public: Invoke the given callback when the project paths change.
## Public: Moves a cursor to a given screen position.
## Public: Moves the cursor up one screen row.
## Public: Moves the selection down one row.
## Public: Performs a search across all files in the workspace.
## Public: Prevents this cursor from causing scrolling.
## Public: Replaces text at the current selection.
## Public: Resolve the given package name to a path on disk.
## Public: Restore the contents of a path in the working directory and index to the version at `HEAD`.
## Public: Retrieves the number of lines added and removed to a path.
## Public: Returns buffer position of previous word boundary.
## Public: Returns the panel's item.
## Public: Returns true if the given path is modified.
## Public: Runs the given command by spawning a new child process.
## Public: Sets whether the cursor is visible.
## Public: Will call your callback when an error will be raised by the process.
## Require 'coffee-script/repl' to import the repl module
## Resolve and apply the stylesheet specified by the path.
## Should `return` implicitly   ### even with trailing comments.
## Subscribes to buffer events.
## This dummy line number element holds the gutter to the appropriate width, since the real line numbers are absolutely positioned for performance reasons.
## Top-level object literal...
## View Resolution Algorithm
## comment 1 ### comment 2 ###
## comment one ### comment two ###
## leading comment ###
### Access A `.` access into a property of a value, or the `::` shorthand for an access into the object's prototype.
### Arr An array literal.
### Assign The **Assign** is used to assign a local variable to value, or to set the property of an object -- including within object literals.
### Base The **Base** is the abstract base class for all nodes in the syntax tree.
### Block The block is the list of expressions that forms the body of an indented block of code -- the implementation of a function, a clause in an `if`, `switch`, or `try`, and so on...
### Call Node for a function invocation.
### Class The CoffeeScript class definition.
### Code A function definition.
### CodeFragment The various nodes defined below all compile to a collection of **CodeFragment** objects.
### Comment CoffeeScript passes through block comments as JavaScript block comments at the same position.
### Existence Checks a variable for existence -- not *null* and not *undefined*.
### Expansion Used to skip values inside an array destructuring (pattern matching) or parameter list.
### Extends Node to extend an object's prototype with an ancestor object.
### For CoffeeScript's replacement for the *for* loop is our array and object comprehensions, that compile into *for* loops here.
### Getting A Pane Element
### Getting An Editor Element
### Getting The Workspace Element
### Getting the workspace element
### If *If/else* statements.
### Literal `Literal` is a base class for static values that can be passed through directly into JavaScript without translation, such as: strings, numbers, `true`, `false`, `null`...
### Logging the URL of the origin remote
### Obj An object literal, nothing fancy.
### Object literals should be able to include keywords.
### Op Simple Arithmetic and logical operations.
### Other Supported Keys
### Param A parameter in a function definition.
### Parens An extra set of parentheses, specified explicitly in the source.
### Range A range literal.
### RegexWithInterpolations Regexes with interpolations are in fact just a variation of a `Call` (a `RegExp()` call to be precise) with a `StringWithInterpolations` inside.
### Requiring in packages
### Return A `return` is a *pureStatement* -- wrapping it in a closure wouldn't make sense.
### Slice An array slice literal.
### Splat A splat, either as a parameter to a function, an argument to a call, or as part of a destructuring assignment.
### StringWithInterpolations Strings with interpolations are in fact just a variation of `Parens` with string concatenation inside.
### Super Takes care of converting `super()` calls into calls against the prototype's function of the same name.
### Switch A JavaScript *switch* statement.
### Throw Simple node to throw an exception.
### Try A classic *try/catch/finally* block.
### Value A value, variable or literal or parenthesized, indexed or dotted into, or vanilla.
### While A while loop, the only sort of low-level loop exposed by CoffeeScript.
#### object / Grouping other types
#### title and description
#1273, empty strings.
#2306: Show unaliased name in error messages.
#3935: Implicit call when the first key of an implicit object has interpolation.
'bottom' logic is the same as 'right'
'instanceOf' check doesn't work here due to the design of ScopedHttpClient
'left' logic is the same as 'top'
'line-number' is a special case of 'gutter'.
('cheese', 'bread', 'mayo') at (1) print
(Has performance overhead)
(The same thing will happen to decoration3.)
(default: 'overlap') It can be any of the following strategies, in order of fragility: * __never__: The marker is never marked as invalid.
(or -1, if not present)
(possibly escaped) delimiter
(possibly escaped) newlines
* Activating a package registers the loaded resources and calls `activate()` on the package's main module.
* Deactivating a package unregisters the package's resources  and calls `deactivate()` on the package's main module.
* Don't depend on (or write to) configuration keys outside of your keypath.
* Generator Definition
* Line Continuation * Property Accesss * Operators * Array Literals * Function Invocations * String Literals Property Access
* Unloading a package removes it completely from the package manager.
* __block__: Positions the view associated with the given item before or after the row of the given `TextEditorMarker`.
* __inside__: The marker is invalidated by changes that extend into the inside of the marker.
* __overlap__: The marker is invalidated by changes that surround the start or end of the marker.
* __surround__: The marker is invalidated by changes that completely surround it.
* __touch__: The marker is invalidated by a change that touches the marked region in any way, including changes that end at the marker's start or start at the marker's end.
* `activeItem` The current active item.
* `args` The arguments to pass to the exported function.
* `args` The arguments to pass to the function exported by this task's script.
* `autoDecreaseIndent` if `true`, decreases indent level appropriately (for example, when a closing bracket is inserted).
* `autoIndentNewline` if `true`, indent newline appropriately.
* `autoIndent` if `true`, indents all inserted text appropriately.
* `block` Positions the view associated with the given item before or after the row of the given `TextEditorMarker`, depending on the `position` property.
* `bufferPosition` An object that represents a buffer position.
* `buttons` (optional) Either an array of strings or an object where keys are button names and the values are callbacks to invoke when clicked.
* `class` This CSS class will be applied to the decorated line number, line, highlight, or overlay.
* `code` Error code returned by the command.
* `deserializers` One or more deserializers to register.
* `displayName` The display name of the command.
* `editor` The editor to register.
* `editor` The editor to remove.
* `endBufferRow` Only include markers ending at this row in buffer coordinates.
* `event` A standard DOM event instance.
* `false` if the value was not able to be coerced to the type specified in the setting's schema.
* `height` The new height.
* `highlight` Creates a `.highlight` div with the nested class with up to 3 nested regions that fill the area spanned by the `DisplayMarker`.
* `id` The id of the marker layer to retrieve.
* `index` The index of the opened item on its pane.
* `index` The location of the item.
* `item` Item the panel contains
* `item` Item the returned pane contains.
* `item` Item to destroy
* `item` The active pane item.
* `item` The current active pane item.
* `item` The item to add.
* `item` The item to move.
* `item` The item to remove.
* `item` The item to save.
* `item` The opened item.
* `keyBindingTarget` An `HTMLElement` on which to look up the key binding.
* `line-number` Adds the given `class` to the line numbers overlapping the rows spanned by the `DisplayMarker`.
* `message` The message to send to the task.
* `metadata` (optional) The additional info to associate with the text.
* `null` if the given URI is not compatibile with this provider.
* `null` if the given directory does not have a Git repository.
* `object` The object for which you want to retrieve a view.
* `onDone` The callback to call when the stream has closed.
* `onLines` The callback to call with each line of data.
* `onlyEmpty` (optional) If `true`, the decoration will only be applied if the associated `DisplayMarker` is empty.
* `onlyHead` (optional) If `true`, the decoration will only be applied to the head of the `DisplayMarker`.
* `onlyNonEmpty` (optional) If `true`, the decoration will only be applied if the associated `DisplayMarker` is non-empty.
* `options` (optional) An options hash with an `includeNewline` key.
* `overlay` Positions the view associated with the given item at the head or tail of the given `DisplayMarker`, depending on the `position` property.
* `pane` The pane in which the item was opened.
* `position` (optional) Only applicable to decorations of type `overlay` and `block`, controls where the view is positioned relative to the `TextEditorMarker`.
* `screenPosition` An object that represents a screen position.
* `stream` The Stream to read from.
* `styleElement` An `HTMLStyleElement` instance.
* `target` An `HTMLElement` * `options` See http://getbootstrap.com/javascript/#tooltips-options for a full list of options.
* `target` The DOM node at which to start bubbling the command event.
* `type` (optional) If you want to create a separator, provide an item with `type: 'separator'` and no other keys.
* `type` __Caveat__: set to `'line-number'` if this is the line-number gutter, `'gutter'` otherwise.
* `value` The value of the setting.
* `value` the new value of the key
* `width` The new width.
* `y` The new y coordinate.
* destructured parameter with default value
* http://www.rpm.org/max-rpm/ch-rpm-file-format.html * https://github.com/mojombo/semver/issues/145
* simple literals `foo`
* single line arguments * inline function literal * inline object literal
**Important:** When you're done using your editor, be sure to call `dispose` on the returned disposable to avoid leaking editors.
**Only use this method in specs.
**Reduce** builds up a single result from a list of values.
**When in doubt, just default to buffer coordinates**, then experiment with soft wraps and folds to ensure your code interacts with them correctly.
**tokenize** is the Lexer's main method.
*note: this test could still use refactoring*
- Arguments emitted by the event
- `delimiter` is the delimiter of the token.
- backward: Direction string passed to backward waypoint triggers.
- callback: The function that is fired when the waypoint is triggered.
- context: A reference to the context this waypoint belongs to.
- contextCounter: A counter that is incremented with each instantiation of the Context class, used in its unique ID.
- contextDimension: Width or height of the context.
- contextKey: The DOM element for each context keeps a reference to the context's unique ID in the jQuery .data() object.
- contextScroll: The scroll value of the context.
- contexts: A hash of all contexts.
- continuous: Multiple waypoints may be triggered by a single scroll check.
- didResize: A flag used in throttling the resize event.
- didScroll: A flag used in throttling the scroll event.
- element: The raw HTMLNode of the context element.
- element: The raw HTMLNode of the waypoint element.
- enabled: Boolean indicating whether this waypoint is enabled or not.
- forward: Direction string passed to forward waypoint triggers.
- id: A unique identifier for the context.
- id: A unique identifier for the waypoint.
- offset: The scroll offset at which the waypoint should trigger.
- offsetProp: Key of the .offset() object for this axis.
- oldScroll: A hash containing...
- oldScroll: The scroll value of the context.
- options: A hash containing the various waypoint options.
- resizeEvent: The namespaced resize event used by contexts.
- scrollEvent: The namespaced scroll event used by contexts.
- triggerOnce: If true, the waypoint will destroy itself after first trigger.
- vertical: A hash of all vertical waypoints.
- waypointCounter: A counter that is incremented with each instantiation of the Waypoint class, used in its unique ID.
- waypointKey: The DOM element for each waypoint keeps a reference to an array of the unique IDs of all waypoints attached to that element.
- waypoints: A hash containing two hashes with all waypoints in the context.
- x: The context's last known horizontal scroll value.
- y: The context's last known vertical scroll value.
----- * Soaked Property Access * Soaked Method Invocation * Soaked Function Invocation Soaked Property Access
----- * Variable Safety * Variable Shadowing * Auto-closure (`do`) * Global Scope Leaks
------- * Class Definition * Class Instantiation * Inheritance and Super
------- pull the helpers from `CoffeeScript.helpers` into local variables
-------- * Single-Line Comments * Block Comments Note: awkward spacing seen in some tests is likely intentional.
----------- helper to assert that a string should fail compilation
------------ * Conditionals * Loops * For * While * Until * Loop * Switch * Throw TODO: make sure postfix forms and expression coercion are properly tested shared identity function
------------- * String Interpolation * Regular Expression Interpolation String Interpolation TODO: refactor string interpolation tests
------------- TODO: refactor option parser tests Ensure that the OptionParser handles arguments correctly.
-------------- * Array Comprehensions * Range Comprehensions * Object Comprehensions * Implicit Destructuring Assignment * Comprehensions with Nonstandard Step TODO: refactor comprehension tests
--------------- Ensure that errors of different kinds (lexer, parser and compiler) are shown in a consistent way.
---------------- TODO: add method invocation tests: true.toString() is "true"
------------------- * Function Invocation * Splats in Function Invocations * Implicit Returns * Explicit Returns shared identity function
0 because we're at the start of a tile.
1 to 5 (a): a string print.
2 of the characters are 20px wide now instead of 10px wide
542: Objects leading expression statement should be parenthesized.
764: Numbers should be indexable
::contentFrameWidth itself is smaller than scrollWidth
::explicitHeight itself is smaller than scrollWidth
:addToLastWindow - Boolean of whether this should be opened in last focused window.
:devMode - A Boolean which controls whether any newly opened windows should be in dev mode or not.
:devMode - Boolean to control the opened window's dev mode.
:path - An optional String which controls the default path to which the file dialog opens.
:profileStartup - Boolean to control creating a profile of the startup time.
:resourcePath - The path to include specs from.
:safeMode - A Boolean which controls whether any newly opened windows should be in safe mode or not.
:safeMode - Boolean to control the opened window's safe mode.
:specPath - The directory to load specs from.
:windowDimensions - Object with height and width keys.
@config.observe runs the callback once, then on subsequent changes.
A **Block** is the only node that can serve as the root.
A **Throw** is already a return, of sorts...
A *foldable* row is a row that *starts* a row range that can be folded.
A Block node does not return its entire body, rather it ensures that the final expression is returned.
A CodeFragments is a block of generated code, and the location in the source file where the code came from.
A `.coffee.md` compatible version of `basename`, that returns the file sans-extension.
A catch clause names its error and runs a block of code.
A common approach is to register a *constructor* as the deserializer for its instances by adding a `.deserialize()` class method.
A config setting with the type `object` allows grouping a set of config settings.
A decoration is basically a visual representation of a marker.
A deserializer can be any object with a `.name` property and a `.deserialize()` method.
A different package instance has the same failure output (simulates reload)
A line where every space in non-breaking
A method to easily add functions to the OOP wrapper.
A mini editor will have no gutters.
A more complicated case.
A new window will be created if there is no currently focused window.
A new window will be created with that package's `urlMain` as the bootstrap script.
A paragraph is a block of text bounded by and empty line or a block of text that is not the same type (comments next to source code).
A paragraph is defined as a block of text surrounded by empty lines or comments.
A reference has base part (`this` value) and name part.
A reference to a property on *this*.
A reference to the *this* current object.
A regular array pattern-match.
A regular object pattern-match.
A request from the associated render process to open a new render process.
A return statement from a function body.
A simple **OptionParser** class to parse option flags from the command-line.
A single parameter in a function definition can be ordinary, or a splat that hoovers up the remaining arguments.
A splat that occurs outside of a parameter list.
AST's `compile` does not add source code information to syntax errors.
According to the spec for a DirectorySearcher, invoking `cancel()` should resolve the thenable rather than reject it.
Activate CoffeeScript in the browser by having it compile and evaluate all script tags with a content-type of `text/coffeescript`.
Activate a single package by name
Activate all the packages that should be activated.
Active item doesn't implement ::getPath().
Active item has no path.
Active item has path.
Acts as an expression by pushing down requested returns to the last line of each clause.
Adapt help inherited from the node REPL
Add 'exports' to module search path.
Add .* to avoid matching hunspell_dictionaries.
Add a command to show the history stack
Add a property (or *properties* ) `Access` to the list.
Add a similarly-shaped selection to the next eligible line above each selection.
Add a token to the results.
Add all accessor Array functions to the wrapper.
Add all mutator Array functions to the wrapper.
Add all ofthe Underscore functions to the wrapper object.
Add an expression at the beginning of this expression list.
Add application-specific exports to module search path.
Add assignment to `_` variable to force the input to be an expression.
Add atom and apm to the PATH
Add dummy command so it appears in menu.
Add it to the global hash.
Add item (or move item) to the end of the itemStack
Add location data to all tokens generated by the rewriter.
Add our new waypoint to its context.
Add support for obselete APIs of vm module so we can make some third-party modules work under node v0.11.x.
Add the waypoint's id to the element's waypoint id list.
Add to the rest of the sum.
Add your own custom functions to the Underscore object, ensuring that they're correctly added to the OOP wrapper as well.
Additional indent in front of these is ignored.
Additionally, you can get the setting at the specific cursor position.
Adds the destroyed item's uri to the list of items to reopen.
Adjust line numbers for import fallbacks
Adjust the indentation of the pasted lines while preserving their indentation relative to each other.
Adjust the search area.
Advance through the list.
After `callback` executes, handlers will be called once if the value for their key-path has changed.
After adding the targeted gutter, the decoration will appear in the state for that gutter, since it should be visible.
After the source stream has closed all remaining data is sent in a final call (optional).
After the source stream has closed all remaining data is sent in a final call.
All **ECMA5** native implementations we hope to use are declared here.
All marker APIs not tied to an explicit layer interact with this default layer.
All of our immediate values.
All options that can be passed to `SourceMap#generate` may also be passed here.
All runtime functions we need are defined on "yy"
All the different types of expressions in our language.
All types support an `enum` key, which lets you specify all the values the setting can take.
All words should be lowercased.
Allow CoffeeScript to emit Node.js events.
Allow Listener callback execution
Allow document.title to be assigned in specs without screwing up spec window title
Allow to recognize a bare `super` call without parentheses and arguments.
Allowed to destructure exceptions: #2580
Allows you to change the decoration's class.
Along with an optional banner for the usage help.
Alphanumerics are separated from the other **Literal** matchers because they can also serve as keys in object literals.
Also determine the direction it's being crossed and sort/reverse all crossed waypoints accordingly.
Also known as **inject**, or **foldl**.
Also preserve the indentation of the following line.
Also test other string types.
Although adequately working, block comment-placement is not yet perfect.
Although this method claims to return a `Promise`, the `ResultsPaneView.onSearch()` method in the find-and-replace package expects the object returned by this method to have a `done()` method.
Always open a editor window if this is the first instance of Atom.
An `INDENT` closes an implicit call unless
An adapter is a specific interface to a chat source for robots.
An array of all accepted values for a variable inside the loop.
An array or range comprehension has variables for the current element and (optional) reference to the current index. Or, *key, value*, in the case of object comprehensions.
An element can have multiple waypoints with multiple offsets.
An event should only be emitted when the visibility changes.
An example demonstrates the basic functionality:
An example hack to log to the console when each text editor is saved.
An exit event is emitted when the user exits the REPL
An identifier should be provided in the options parameter to uniquely identify the listener (options.id).
An implementation of Directory that does not implement existsSync().
An indented block of expressions.
An individual **When** clause, with action.
An instance of this class is always available as the `atom.clipboard` global.
An instance of this class is always available as the `atom.config` global.
An instance of this class is always available as the `atom.contextMenu` global.
An instance of this class is always available as the `atom.deserializers` global.
An instance of this class is always available as the `atom.grammars` global.
An instance of this class is always available as the `atom.menu` global.
An instance of this class is always available as the `atom.notifications` global.
An instance of this class is always available as the `atom.packages` global.
An instance of this class is always available as the `atom.project` global.
An instance of this class is always available as the `atom.themes` global.
An instance of this class is always available as the `atom` global.
An instance of this class is available via the `atom.workspace` global.
An offset of 50 would mean the waypoint triggers when the top of the element is 50 pixels from the top of the window.
An opening parentheses or bracket following these tokens will be recorded as the start of a function invocation or indexing operation.
An optional existence check on a function.
An optional, trailing comma.
And when it's `new`d, `this` is always the newly created object.
And, of course, trigger the waypoints.
Another variable, which will stay in the var line.
Any channel subscriptions which existed prior to disconnecting will automatically resubscribe.
Any folds in the text that is moved will need to be re-created.
Any group of operations that are logically grouped from the perspective of undoing and redoing should be performed in a transaction.
Any list of statements and expressions, separated by line breaks or semicolons.
Any objects that are already present in the pane's current items will not be added again.
Any spacing around the slash is allowed when it cannot be a regex.
App.cable.disconnect()
Appends some data to the end of the list.
Arithmetic and logical operators, working on one or more operands.
Array Functions --------------- Get the first element of an array.
Array comprehensions.
Array comprehensions:
Array slice literals.
Array, object, and range comprehensions, at the most generic level.
As is normally the case with DOM events, `stopPropagation` and `stopImmediatePropagation` can be used to terminate the bubbling process and prevent invocation of additional listeners.
As the event bubbles upward through the DOM, all registered event listeners with matching selectors are invoked in order of specificity.
As the filename and code of a dynamically loaded file will be different from the original file compiled with CoffeeScript.run, add that information to error so it can be pretty-printed later.
As with .aggregate, the array is sorted by calculated offset (trigger order).
Assign paths for node_modules loading
Assigning a grammar will cause the editor to re-tokenize based on the new grammar.
Assignment of a variable, property, or index to a value.
Assignment of properties within an object literal can be separated by comma, as in JavaScript, or simply by newline.
Assignment when it happens within an object literal.
At every position, run through this list of attempted matches, short-circuiting if any of them succeed.
At least the built-in find-and-replace package relies on this behavior.
At one time we tried to clean up the results by detecting and removing redundant parentheses, but no longer -- you can put in as many as you please.
At some point in one's life, one must call upon an enforcer.
At the beginning of each test, decoration1 and decoration2 are in visible range, but not decoration3.
Atom commands are expressed as custom DOM events that can be invoked on the currently focused element via a key binding or manually via the command palette.
Atom will evaluate this file each time a new window is opened.
Attach the appropriate listeners to compile scripts incoming over **stdin**, and write them back to **stdout**.
Attempts to minimize changes to the DOM.
Avoid adding URLs as recent documents to work-around this Spotlight crash: https://github.com/atom/atom/issues/10071
Avoid leaking user keymap subscription
Avoid screwing up the `stack` property of other errors (i.e. possible bugs).
Avoid throttling of test window by playing silence See related discussion in https://github.com/atom/atom/pull/9485
Backslash at the beginning of a literal string.
Backslashes at beginning of lines.
Backslashes at end of strings.
Base schema enforcers.
Based on the contents of sample.js, this should affect all but the top part of decoration1.
Basic equality test (watch out for coercions).
Be careful not to interfere with ranges-in-progress.
Because editors support folds and soft-wrapping, the lines on screen don't always match the lines in the buffer.
Because observers are invoked synchronously, it's important not to perform any expensive operations via this method.
Because our grammar is LALR(1), it can't handle some single-line expressions that lack ending delimiters.
Before the paste, the indentation is non-standard.
Beyond a typical Javascript parameter, these parameters can also attach themselves to the context of the function, as well as be a splat, gathering up a group of parameters into an array.
Bind all of an object's methods to that object.
Binding with arguments is also known as **curry**.
Block Listener callback execution
Block and statements, which make up a line in a body.
Blocks serve as the building blocks of many other rules, making them somewhat circular.
Bound Function Definition
Break out of middleware error handling so assertion errors are more visible
Break out of the middle of an iteration.
Brief implementation of recursive pattern matching, when assigning array or object literals to a value.
Build and return the list of option rules.
Build the itemStack after deserializing
Bundled packages are always considered compatible
But at the same time, if the next buffer row is wrapped, one line in the buffer can represent many screen rows.
But only if they need to be cached to avoid double evaluation.
But we need to wait to propagate it until after we've set the branch and cleared the `statusesByPath` cache.
By default the settings view humanizes your config key, so `someSetting` becomes `Some Setting`.
By default, Underscore uses **ERB**-style template delimiters, change the following template settings to use alternative delimiters.
By default, files are written out in `cwd` as `.js` files with the same name, but the output directory can be customized with `--output`.
CTRL+click brings up the context menu on OSX, so don't handle those either
Calculate a minimum indent level for a range of lines excluding empty lines.
Calculate the number of items in the list.
Call `stopPropagation` or `stopImmediatePropagation` to terminate bubbling early.
Call inline listeners first in reverse registration order, and selector-based listeners by specificity and reverse registration order.
Call the original receive method that we want to test
Call this method when establishing a real application window.
Called by Model superclass when destroyed
Called by model superclass.
Called by the Serializable mixin during serialization.
Called by the selection
Called by the view layer to indicate that the pane has gained focus.
Called by the view layer to indicate that the pane has lost focus.
Called upon task completion.
Called when the subscription has been terminated by the server
Called when the subscription is ready for use on the server
Called when there's incoming data on the websocket for this channel
Called with the following argument: * `event` The click event that deployed the context menu.
Calling this in production code will block the UI thread and everyone will be mad at you.**
Calling this method without an options parameter will open a prompt to pick a file/folder to open in the new window.
Calling this programmatically will call all callbacks added via `onDidDismiss`.
Calls and passes any registered error handlers for unhandled exceptions or user emitted error events.
Calls the given function with each selection, then merges selections
Calls the given function with each selection, then merges selections in the reversed orientation
Calls your `callback` immediately for any existing decorations.
Calls your `callback` when some changes in the model occurred and the current state has been updated.
Can be used to decorate a large number of markers without having to create and manage many individual decorations.
Cancels other ongoing searches
Cannot understand why this behavior is needed, but adding a test case to protect it
Case where the refresh causes a backward trigger.
Catch Should Not Require Param: #2900
Catch errors in synchronous middleware
Catch leads to broken scoping: #1595
Catch the errors that happened before task-bootstrap.
Caveats: Deeply nested structures don't merge well.
Chaining - all open calls are closed by property access starting a new line * chaining after * indented argument * function block * indented object
Change the dimensions and item, remove the class.
Changed from #647, trailing backslash.
Changes that end at the marker's start or start at the marker's end do not invalidate the marker.
Check dates' integer values.
Check for a Debian build
Check for a Fedora build
Check for a sourceMap position
Check for an archive build on a debian build machine.
Check for different array lengths before comparing contents.
Check for out-of-bounds values.
Check if the desktop shortcut has been previously deleted and and keep it deleted if it was
Check if the path is a working directory in a repo that isn't the root.
Check if the release is a 7-character SHA prefix Public: Get the time taken to completely load the current window.
Check object identity.
Check that buffer's file path is accessible
Check that variables were passed correctly
Check the difference against the context's current scroll value and trigger any crossed waypoints accordingly.
Check the rest of the array to see if anything is smaller.
Check to ensure that JavaScript reserved words aren't being used as identifiers.
Check to see if we're running on a color-enabled TTY.
Checks whether a valid `.git` directory is contained within the given directory or one of its ancestors.
Class definitions have optional bodies of prototype property assignments, and optional references to the superclass.
Clear any batched state updates.
Clear the contents in case the domNode is being reused.
Clear the module cache.
Clears the build failure after a successful build
Close all implicit expressions inside of explicitly closed expressions.
Close implicit calls when reached end of argument list
Close implicit object if comma is the last character and what comes after doesn't look like it belongs.
Close implicit objects such as: return a: 1, b: 2 unless true
Close implicit objects when at end of line, line didn't end with a comma and the implicit object didn't start the line or the next line doesn't look like the continuation of an object.
Close the active pane item, or the active pane if it is empty, or the current window if there is only the empty root pane.
Close up all remaining open blocks at the end of the file.
CodeFragments can be assembled together into working code just by catting together all the CodeFragments' `code` snippets, in order.
CoffeeScript has two different symbols for functions.
CoffeeScript-only keywords.
Collect referenced variable names just like in `CoffeeScript.compile`.
Collection Functions -------------------- The cornerstone, an **each** implementation.
Combines a menu template with the appropriate keystroke.
Command names must follow the `namespace:action` pattern, where `namespace` will typically be the name of your package, and `action` describes the behavior of your command.
Commas after key with interpolation.
Commas in explicit object.
Commas in implicit object.
Comment in the middle
Comments in explicit object.
Comments in implicit object.
Common logic for determining whether to wrap this node in a closure before compiling it, or to compile directly.
Compare regular expressions.
Compilation creates a new scope unless explicitly asked to share with the outer scope.
Compilation is more or less as you would expect -- the *finally* clause is optional, the *catch* is not.
Compile CoffeeScript code to JavaScript, using the Coffee/Jison compiler.
Compile a path, which could be a script or a directory.
Compile a single source script, containing the given code, according to the requested options.
Compile a unary **Op**.
Compile a vanilla function call.
Compile all expressions within the **Block** body.
Compile an assignment, delegating to `compilePatternMatch` or `compileSplice` if appropriate.
Compile and evaluate a string of CoffeeScript (in a Node.js-like environment).
Compile and execute a string of CoffeeScript (on the server), correctly setting `__filename`, `__dirname`, and relative `require()`.
Compile the `If` as a conditional operator.
Compile the `If` as a regular *if-else* statement.
Compile the assignment from an array splice literal, using JavaScript's `Array#splice` method.
Compile the expressions body for the contents of a function, with declarations of all inner variables pushed up to the top.
Compiles the range's source variables -- where it starts and where it ends.
Compound assignment tokens.
Comprehensions can either be normal, with a block of expressions to execute, or postfix, with a single expression.
Compute the buffer range spanned by all these selections, expanding it so that it includes any folded region that intersects them.
Conditional assignment:
Conditionals and ternaries.
Configures required javascript environment flags.
Consecutive newlines get merged together.
Constant functions for nodes that don't need customization.
Constants --------- Keywords that CoffeeScript shares in common with JavaScript.
Constants --------- List of the token pairs that must be balanced.
Construct a node that returns the current node's result.
Constructs a string or regex by escaping certain characters.
Constructs the string used for indents.
Context: Represents a single scrolling element in which waypoints live.
Continue to next listener when there is an error
Convenience for cleaner setTimeouts.
Convenience version of a common use case of **map**: fetching a property.
Convert 'NEOSTRING' into 'STRING'.
Convert an array of CodeFragments into a string.
Convert anything iterable into a real, live array.
Convert jison location data to a string.
Convert multiple lines to a single line.
Convert the list into an array.
Converts into a returnable expression on-demand.
Copy custom plist files
Copy the code from each fragment into the final JavaScript.
Correctly set up a prototype chain for inheritance, including a reference to the superclass for `super()` calls, and copies of any static properties.
Could assert on their use.
Could be `undefined`.
Count the number of occurrences of a string in a string.
Cover the space occupied by a dummy lineNumber
Create a (shallow-cloned) duplicate of an object.
Create a 0-length "+" token.
Create a desktop and start menu shortcut by using the command line API provided by Squirrel's Update.exe
Create a dummy history file
Create a function bound to the current value of "this".
Create a generated token: one that exists due to a use of implicit syntax.
Create a new node object to wrap the data.
Create a new stacking context, so that tiles z-index does not interfere with other visual elements.
Create a safe reference to the Underscore object for use below.
Create a temporary file to require().
Create quick reference variables for speed access to core prototypes.
Created during initialization, available as `atom.config`
Creates a new fold between two row numbers.
Creates an `md5` hash of some text.
Creates server to listen for additional atom application launches.
Creates the 'atom' custom protocol handler.
Ctrl+MouseWheel adjusts font size.
Currently, match means 'starts with', but this could be extended to match initials, nicknames, etc.
Cursor Extended Extended: Move every cursor to the top of the buffer.
Custom gutter 'content' is keyed on gutter name, so we cannot set 'styles' as a subfield directly under it.
Deactivate all packages
Deactivate the package with the given name
Decimal Integer Literals
Decrease the editor font size by 1px.
Default implementations of the common node properties and methods.
Default list of menu items.
Default provider for the `atom.directory-searcher` service.
Defaults as an alias for send
Defaults to `'alert'`.
Defaults to `'check'`.
Defaults to `'closest'`.
Defaults to `'flame'`.
Defaults to `'info'`.
Defaults to `true` if this is the most recently added cursor, `false` otherwise.
Defaults to `true` if this is the most recently added selection, `false` otherwise.
Defaults to the user's config file.
Defer to the event loop at least after every listener so the stack doesn't get too big
Defers a function, scheduling it to run after the current call stack has cleared.
Define a Cake task with a short name, an optional sentence description, and the function to run as the action itself.
Define a schema under a `config` key in your package main.
Define an option that the Cakefile accepts.
Define the onPathsSearched callback.
Delays a function for the given number of milliseconds, and then calls it with the arguments supplied.
Delegate to JavaScript 1.6's **every**, if it is present.
Delete a key from an object, returning the value.
Delete lines spanned by selection and insert them on the following correct buffer row
Delete lines spanned by selection and insert them on the preceding buffer row
Deprecated 1.0 API preview flag
Deprecated switches are not shown.
Deprecated: Get all the decorations within a screen row range on the default layer.
Deprecated: Start an open-ended transaction.
Descriptions will be displayed below the title in the settings view.
Destroy (close) the active pane item.
Destroy (close) the active pane.
Destructuring Assignment
Determine if a filename represents a CoffeeScript file.
Determine if a filename represents a Literate CoffeeScript file.
Determine if at least one element in the object matches a truth test.
Determine if it's valid.
Determine the accelerator for a given command.
Determine whether all of the elements match a truth test.
Determine whether the user should be prompted to save before closing this editor.
Determines if the message matches the given regex.
Determines whether this object supports search for a `Directory`.
Disable, enable, and destroy all just delegate to the instance methods of the waypoints attached to the subject elements.
Disabled menu items typically appear grayed out.
Disabled waypoints are still returned in functions that aggregate waypoints, but do not fire their callbacks.
Disallow conditional assignment of undefined variables.
Discover if an item is in an array.
Display the list of Cake tasks in a format similar to `rake -T`
Disregard Jison's message, it contains redundant line numer information.
Disregard the token, we take its value directly from the lexer in case the error is caused by a generated token which might refer to its origin.
Do not include empty, whitespace, or semicolon-only fragments.
Do not lose the alignment spaces
Does add an entry for a directory within an existing directory
Doesn't add an entry for a file-path within an existing root directory
Doesn't fail with out-of-bounds indices
Doesn't re-add an existing root directory
Don't accept implicit calls of this type, when on the same line as the control strucutures below as that may misinterpret constructs like:
Don't end an implicit call on next indent if any of these are in an argument
Don't move blocks after a text change, because we already splice on buffer change.
Don't move the last line of a multi-line selection if the selection ends at column 0
Don't set icon on Windows so the exe's ico will be used as window and taskbar's icon.
Don't try to run specs.
Due to the issue described here: https://github.com/atom/atom/issues/6454, decoration2 will be bumped up to the row that was folded and still made visible, instead of being entirely collapsed.
Duplicate the most recent cursor's current line.
E.g. `awesome-package:turn-it-up-to-eleven`.
Each array in fragmentsList will be concatonated together, with `joinStr` added in between each, to produce a final flat array of fragments.
Each axis recalculation needs to know some things: - contextOffset: The distance between the edge of the document and the context element.
Each item in the array is a file/directory pattern, e.g., `src` to search in the "src" directory or `*.js` to search all JavaScript files.
Each pane may also contain one *pending* item.
Each searcher that is matched will be associated with an Array of Directory objects in the Map.
Each subclass implements the `compileNode` method, which performs the code generation for that node.
Each tokenizing method is responsible for returning the number of characters it has consumed.
Empty Try/Catch/Finally
Encapsulate the cable connection held by the consumer.
End implicit calls when chaining method calls like e.g.:
Enforcers are run from most specific to least.
Ensure a refresh on page load.
Ensure application is executable on Linux
Ensure atom exports is already in the require cache so the load time of the first package isn't skewed by being the first to require atom
Ensure that all functions bound to the instance are proxied in the constructor.
Ensure that constructors invoked with splats cache the function.
Ensure that functions with the same name don't clash with helper functions.
Ensure the function did not recurse
Error reading the file, don't deserialize an editor for it
Escape middleware error handling for clearer test failures
Escape to disambiguate.
Especially useful on the arguments object.
Essential: A flexible way to open a dialog akin to an alert dialog.
Essential: Add a cursor at the given position in buffer coordinates.
Essential: Add a cursor at the position in screen coordinates.
Essential: Add a decoration to every marker in the given marker layer.
Essential: Add a listener for changes to a given key path.
Essential: Add a provider that will be used to construct views in the workspace's view layer based on model objects in its model layer.
Essential: Add a selection for the given range in buffer coordinates.
Essential: Add a selection for the given range in screen coordinates.
Essential: Add a tooltip to the given element.
Essential: Adds a panel item as a modal dialog.
Essential: Adds a panel item to the bottom of the editor window.
Essential: Adds a panel item to the footer.
Essential: Adds a panel item to the header.
Essential: Adds a panel item to the left of the editor window.
Essential: Adds a panel item to the right of the editor window.
Essential: Adds a panel item to the top of the editor window above the tabs.
Essential: Associates tooltips with HTML elements or selectors.
Essential: Atom global for dealing with packages, themes, menus, and the window.
Essential: Calls your `callback` when a selection's screen range changes.
Essential: Calls your `callback` when the buffer's path, and therefore title, has changed.
Essential: Calls your `callback` when the gutter is destroyed.
Essential: Close the current window.
Essential: Convert a position in screen-coordinates to buffer-coordinates.
Essential: Convert a range in buffer-coordinates to screen-coordinates.
Essential: Convert a range in screen-coordinates to buffer-coordinates.
Essential: Create a marker layer to group related markers.
Essential: Create a marker on the default marker layer with the given buffer position and no tail.
Essential: Create a marker on the default marker layer with the given range in screen coordinates.
Essential: Create a marker on the default marker layer with the given screen position and no tail.
Essential: Destroy this marker.
Essential: Destroys the decoration.
Essential: Determine whether the gutter is visible.
Essential: Determine whether this decoration is destroyed.
Essential: Enable or disable soft tabs for this editor.
Essential: Enable or disable soft wrapping for this editor.
Essential: Expand selections to the beginning of their containing word.
Essential: Expand selections to the end of their containing word.
Essential: Fold the given row in buffer coordinates based on its indentation level.
Essential: For each cursor, select the containing line.
Essential: For each selection, cut the selected text.
Essential: For each selection, if the selection is empty, cut all characters of the containing buffer line following the cursor.
Essential: For each selection, if the selection is empty, cut all characters of the containing screen line following the cursor.
Essential: For each selection, if the selection is empty, delete the character following the cursor.
Essential: For each selection, if the selection is empty, delete the character preceding the cursor.
Essential: For each selection, replace the selected text with a newline.
Essential: For each selection, replace the selected text with the contents of the clipboard.
Essential: For each selection, replace the selected text with the given text.
Essential: Get all text editors in the workspace.
Essential: Get the gutter with the given name.
Essential: Get the on-screen length of tab characters.
Essential: Get the position of all the cursor positions in buffer coordinates.
Essential: Get the position of all the cursor positions in screen coordinates.
Essential: Get the position of current window.
Essential: Get the position of the most recently added cursor in screen coordinates.
Essential: Get the size of current window.
Essential: Get the syntactic scopeDescriptor for the given position in buffer coordinates.
Essential: Get the view associated with an object in the workspace.
Essential: Get this decoration's properties.
Essential: Get this editor's gutters.
Essential: Get unique title for display in other parts of the UI, such as the window title.
Essential: Gets the column at which column will soft wrap
Essential: Invoke `callback` when the buffer's contents change.
Essential: Invoke the given callback after the buffer is saved to disk.
Essential: Invoke the given callback synchronously when the content of the buffer changes.
Essential: Invoke the given callback when the active pane item changes.
Essential: Invoke the given callback when the active pane item stops changing.
Essential: Invoke the given callback when the editor is destroyed.
Essential: Invoke the given callback whenever an item is opened.
Essential: Invoke the given callback with all current and future panes items in the workspace.
Essential: Invoke the given callback with the current active pane item and with all future active pane items in the workspace.
Essential: Move every cursor down one row in screen coordinates.
Essential: Move every cursor left one column.
Essential: Move every cursor right one column.
Essential: Move every cursor to the beginning of its line in buffer coordinates.
Essential: Move every cursor to the beginning of its line in screen coordinates.
Essential: Move every cursor to the beginning of its surrounding word.
Essential: Move every cursor to the end of its line in buffer coordinates.
Essential: Move every cursor to the end of its line in screen coordinates.
Essential: Move every cursor to the end of its surrounding word.
Essential: Move every cursor to the first non-whitespace character of its line.
Essential: Move every cursor up one row in screen coordinates.
Essential: Move the cursor of each selection one character downward while preserving the selection's tail position.
Essential: Move the cursor of each selection one character leftward while preserving the selection's tail position.
Essential: Move the cursor of each selection one character rightward while preserving the selection's tail position.
Essential: Move the cursor of each selection one character upward while preserving the selection's tail position.
Essential: Move the cursor of each selection to the beginning of its line while preserving the selection's tail position.
Essential: Move the cursor of each selection to the end of its line while preserving the selection's tail position.
Essential: Move the cursor of each selection to the first non-whitespace character of its line while preserving the selection's tail position.
Essential: Move the cursor to the given position in buffer coordinates.
Essential: Move the cursor to the given position in screen coordinates.
Essential: Override the decoration properties for a specific marker.
Essential: Redo the last change.
Essential: Represents a decoration that applies to every marker on a given layer.
Essential: Represents the state of the user interface for the entire window.
Essential: Restore the setting at `keyPath` to its default value.
Essential: Retrieves the greyed out placeholder of a mini editor.
Essential: Saves the editor's text buffer as the given path.
Essential: Scan regular expression matches in a given range in reverse order, calling the given iterator function on each match.
Essential: Scan regular expression matches in a given range, calling the given iterator function on each match.
Essential: Scrolls the editor to the bottom
Essential: Scrolls the editor to the given buffer position.
Essential: Scrolls the editor to the given screen position.
Essential: Scrolls the editor to the top
Essential: Select all text in the buffer.
Essential: Select from the current cursor position to the given position in buffer coordinates.
Essential: Select from the current cursor position to the given position in screen coordinates.
Essential: Select from the top of the buffer to the end of the last selection in the buffer.
Essential: Select the word surrounding each cursor.
Essential: Selects from the top of the first selection in the buffer to the end of the buffer.
Essential: Set the greyed out placeholder of a mini editor.
Essential: Set the indentation level for the given buffer row.
Essential: Set the on-screen length of tab characters.
Essential: Set the position of current window.
Essential: Set the selected range in buffer coordinates.
Essential: Set the selected range in screen coordinates.
Essential: Set the selected ranges in buffer coordinates.
Essential: Set the selected ranges in screen coordinates.
Essential: Set the size of current window.
Essential: Set this decoration's properties.
Essential: Sets the value for a configuration setting.
Essential: Show the gutter.
Essential: Toggle soft tabs for this editor
Essential: Toggle soft wrapping for this editor
Essential: Unfold all folds containing the given row in buffer coordinates.
Essential: Unfold the most recent cursor's row by one level.
Essential: Update the marker with new Properties.
Essential: Used to access all of Atom's configuration details.
Essential: `ViewRegistry` handles the association between model and view types in Atom.
Establish the object that gets thrown to break out of a loop iteration.
Event listeners are invoked in the context of the current DOM node, meaning `this` always points at `event.currentTarget`.
Everything that can be assigned to.
Execute a single piece of middleware and update the completion callback (each piece of middleware can wrap the 'done' callback with additional logic).
Execute each piece of middleware, collecting the latest 'done' callback at each step.
Executed when the middleware stack is finished
Executes all of the tasks you pass, in order.
Existence of the path is not required
Existential Assignment
Existential Operator (Binary)
Existential Operator (Unary)
Existing pending items in a pane are replaced with new pending items when they are opened.
Expected to return a truthy value if the callback should be executed.
Experimental: Get a notification when async tokenization is completed.
Experimental: Scroll the editor such that the given screen row is at the top of the visible area.
Experimental: This global registry tracks registered `TextEditors`.
Export Underscore to global scope.
Export the Underscore object for **CommonJS**.
Expose helpers for testing.
Extend a given object with all of the properties in a source object.
Extend a source object with the properties of another object (shallow copy).
Extend semver.Range to memoize matched versions for speed
Extended: A container for presenting content in the center of the workspace.
Extended: A container representing a panel on the edges of the editor window.
Extended: A singleton instance of this class available via `atom.styles`, which you can use to globally query and observe the set of active style sheets.
Extended: A wrapper which provides standard error/output line buffering for Node's ChildProcess.
Extended: Abort an open transaction, undoing any operations performed so far within the transaction.
Extended: Batch multiple operations as a single undo/redo step.
Extended: Calls your `callback` after text has been inserted.
Extended: Calls your `callback` before text has been inserted.
Extended: Calls your `callback` when soft wrap was enabled or disabled.
Extended: Calls your `callback` when the buffer's encoding has changed.
Extended: Calls your `callback` when the grammar that interprets and colorizes the text has been changed.
Extended: Calls your `callback` when the placeholder text is changed.
Extended: Calls your `callback` when the selection was destroyed
Extended: Clip the start and end of the given range to valid positions in the buffer.
Extended: Clip the start and end of the given range to valid positions on screen.
Extended: Continuously reflows lines and line numbers.
Extended: Convert the selected text to lower case.
Extended: Convert the selected text to upper case.
Extended: Converts a buffer position to a pixel position.
Extended: Converts a screen position to a pixel position.
Extended: Create a new text editor.
Extended: Delete all lines intersecting selections.
Extended: Determine if a given range in buffer coordinates intersects a selection.
Extended: Determine if the buffer uses hard or soft tabs.
Extended: Determine if the given row is entirely a comment
Extended: Determine whether the given row in buffer coordinates is foldable.
Extended: Determine whether the given row in buffer coordinates is folded.
Extended: Determine whether the given row in screen coordinates is foldable.
Extended: Determine whether the given row in screen coordinates is folded.
Extended: Determine whether the most recently added cursor's row is folded.
Extended: Dismisses the notification, removing it from the UI.
Extended: Execute code in dev tools.
Extended: Expand selections to the beginning of the next paragraph.
Extended: Expand selections to the beginning of the next word.
Extended: Focus the current window.
Extended: Fold all foldable lines at the given indent level.
Extended: Fold all foldable lines.
Extended: Fold the given buffer row if it isn't currently folded, and unfold it otherwise.
Extended: For each cursor, insert a newline at beginning the following line.
Extended: For each cursor, insert a newline at the end of the preceding line.
Extended: For each selection, fold the rows it intersects.
Extended: For each selection, if the selection is empty, delete all characters of the containing line that precede the cursor.
Extended: For each selection, if the selection is empty, delete all characters of the containing subword following the cursor.
Extended: For each selection, if the selection is empty, delete all characters of the containing word following the cursor.
Extended: For each selection, if the selection is empty, delete all characters of the containing word that precede the cursor.
Extended: For each selection, move its cursor to the next subword boundary while maintaining the selection's tail position.
Extended: For each selection, move its cursor to the next word boundary while maintaining the selection's tail position.
Extended: For each selection, move its cursor to the preceding subword boundary while maintaining the selection's tail position.
Extended: For each selection, transpose the selected text.
Extended: Get all decorations of type 'highlight'.
Extended: Get all decorations of type 'line'.
Extended: Get all decorations of type 'line-number'.
Extended: Get all decorations of type 'overlay'.
Extended: Get all decorations.
Extended: Get all of the values for the given key-path, along with their associated scope selector.
Extended: Get the current window
Extended: Get the indentation level of the given line of text.
Extended: Get the maximum scroll top that can be applied to this element.
Extended: Get the number of markers in the default marker layer.
Extended: Get the range in buffer coordinates of all tokens surrounding the cursor that match the given scope selector.
Extended: Get the text representing a single level of indent.
Extended: Group all changes since the given checkpoint into a single transaction for purposes of undo/redo.
Extended: Handles loading and activating available themes.
Extended: Hide the current window.
Extended: If a previous rebuild failed, get the contents of stderr.
Extended: Indent rows intersecting selections based on the grammar's suggested indent level.
Extended: Indent rows intersecting selections by one level.
Extended: Invoke `callback` when a style element is added.
Extended: Invoke `callback` when a style element is removed.
Extended: Invoke `callback` when an existing style element is updated.
Extended: Invoke the given callback before a pane is destroyed in the workspace.
Extended: Invoke the given callback when a pane is added to the workspace.
Extended: Invoke the given callback when a pane is destroyed in the workspace.
Extended: Invoke the given callback when a pane item is about to be destroyed, before the user is prompted to save it.
Extended: Invoke the given callback when a pane item is added to the workspace.
Extended: Invoke the given callback when a pane item is destroyed.
Extended: Invoke the given callback when a text editor is added to the workspace.
Extended: Invoke the given callback when the active pane changes.
Extended: Invoke the given callback when there is an unhandled error, but before the devtools pop open
Extended: Invoke the given callback whenever there is an unhandled error.
Extended: Invoke the given callback with all current and future panes in the workspace.
Extended: Invoke the given callback with the current active pane and when the active pane changes.
Extended: Loads and activates a package's main module and resources such as stylesheets, keymaps, grammar, editor properties, and menus.
Extended: Make the next pane active.
Extended: Make the previous pane active.
Extended: Manages the deserializers used for serialized state
Extended: Move current window to the center of the screen.
Extended: Move every cursor to the beginning of the next paragraph.
Extended: Move every cursor to the beginning of the next word.
Extended: Move every cursor to the beginning of the previous paragraph.
Extended: Move every cursor to the bottom of the buffer.
Extended: Move every cursor to the next subword boundary.
Extended: Move every cursor to the next word boundary.
Extended: Move every cursor to the previous subword boundary.
Extended: Move every cursor to the previous word boundary.
Extended: Mutate the text of all the selections in a single transaction.
Extended: Outdent rows intersecting selections by one level.
Extended: Package manager for coordinating the lifecycle of Atom packages.
Extended: Prompt the user to select one or more folders.
Extended: Provides a registry for commands that you'd like to appear in the context menu.
Extended: Provides a registry for menu items that you'd like to appear in the application menu.
Extended: Rebuild native modules in this package's dependencies for the current version of Atom.
Extended: Reload the current window.
Extended: Represents a project that's opened in Atom.
Extended: Represents the clipboard used for copying and pasting in Atom.
Extended: Represents the underlying git operations performed by Atom.
Extended: Retrieve the schema for a specific key path.
Extended: Retrieves the number of the row that is visible and currently at the bottom of the editor.
Extended: Retrieves the number of the row that is visible and currently at the top of the editor.
Extended: Returns the word surrounding the most recently added cursor.
Extended: Revert the buffer to the state it was in when the given checkpoint was created.
Extended: Run a node script in a separate process.
Extended: Select a grammar for the given file path and file contents.
Extended: Select the range of the given marker if it is valid.
Extended: Set the character set encoding to use in this editor's text buffer.
Extended: Set the full screen state of the current window.
Extended: Show the current window.
Extended: Syntax class holding the grammars used for tokenizing.
Extended: The `Cursor` class represents the little blinking line identifying where text can be inserted.
Extended: Toggle line comments for rows intersecting selections.
Extended: Toggle the full screen state of the current window.
Extended: Toggle the visibility of the dev tools for the current window.
Extended: Unfold all existing folds.
Extended: call the given `callback` when the editor is attached to the DOM.
Extended: call the given `callback` when the editor is detached from the DOM.
Extended: get the width of a character of text displayed in this element.
External dependencies.
Extracts the result from a wrapped and chained object.
Fields added to the context object are exposed as variables in the REPL
Figure out the appropriate name for the constructor function of this class.
File dialog defaults to project directory of currently active editor
Find a row range for a 'paragraph' around specified bufferRow.
Find a searcher for every Directory in the project.
Find selections spanning a contiguous set of lines
Find the right location.
Find the row range for a fold at a given bufferRow.
Find the smallest indentation.
Fine five course dining.
First row, extending from selection start to the right side of screen
First, hide all scrollbars in case they are visible so they take on new styles when they are shown again.
First, insert new gutters into the DOM.
Flags passed after `--` will be passed verbatim to your script as arguments in `process.argv`
Flattened chains force inner *else* bodies into statement form.
Flattens the given menu and submenu items into an single Array.
Flattens the given menu template into an single Array.
Flip the alternate bit.
Focus bottom pane and reopen the file on the right
Focus bottom pane and reopen the file on the top
Focus can be stolen from the hidden input when clicking on the gutter and transferred to the already-focused host element.
Focus right pane and reopen the file on the left
Focus right pane and reopen the file on the right
Fold all comment and code blocks at a given indentLevel
Folds all the foldable lines in the buffer.
Following these rules is what makes `2 + 3 * 4` parse as:
For a group of config settings the humanized key or the title and the description are used for the group headline.
For a repository with submodules this would have the following outcome:
For a schema with type `integer`, all the enforcers for the `integer` type will be run first, in order of specification.
For all `this`-references and bound functions in the class definition, `this` is the Class being constructed.
For all details and documentation: http://documentcloud.github.com/underscore/ Baseline setup -------------- Establish the root object, `window` in the browser, or `global` on the server.
For each axis, check to see if any waypoints have been crossed.
For each axis, run through the waypoints.
For each item in the list.
For each selection, if the selection is empty, converts the containing word to upper case.
For ease of use in the line number gutter component, set the shared 'styles' as a field under the 'content'.
For every rule in the grammar, we pass the pattern-defining string, the action to run, and extra options, optionally.
For example we might an integer setting that only allows integers greater than `0`:
For example, `User: Insert Date`.
For example, `user:insert-date`.
For example, a long line that soft wraps twice renders as three lines on screen, but only represents one line in the buffer.
For example, if the same file is open in two different panes, Atom creates a separate editor for each pane.
For example, if you wanted to find the string surrounding the cursor, you could call `editor.bufferRangeForScopeAtCursor(".string.quoted")`.
For example, if you're writing a command that jumps the cursor up or down by 10 lines, you'll want to use screen coordinates because the user probably wants to skip lines *on screen*.
For example, on window focus, the status of all the paths in the repo is checked.
For example, perhaps you wish to preview a rendered version of the file `/foo/bar/baz.quux` that is already open in a text editor view.
For example, you might want change the `editor.tabLength` only for ruby files.
For example, you might want to know `editor.tabLength` for ruby files.
For more details on how you'd configure an actual channel subscription, see ActionCable.Subscription.
For most users there will only be one Context, the window, but users can use other scrollable elements as a context using the "context" option when creating waypoints.
For this node and all descendents, set the location data to `locationData` if the location data is not already set.
Forcibly fail the middleware and stop executing deeper
From it, all other loops can be manufactured.
Function Functions ------------------ Create a function bound to a given object (assigning `this`, and arguments, optionally).
Function that allows for btoa in both nodejs and the browser.
Function that is invoked once all of the fields on fakeSearch are set.
Function wrapper to add source file information to SyntaxErrors thrown by the lexer/parser/compiler.
Functions required by parser
Furthermore don't allow this in literal arrays, as that creates grammatical ambiguities.
Generally these can be passed straight through and printed to JavaScript.
Generate a newline token.
Generate a unique integer id (unique within the entire client session).
Generate an integer Array containing an arithmetic progression.
Generate the AST of the tokens.
Generate the condition.
Generate the indentation tokens, based on another token on the same line.
Generates the source map for a coffee file and stores it in the local cache variable.
Get an array of all the native modules that this package depends on.
Get file info and at most maxSize of command history
Get packages for a certain package type
Get the corresponding output JavaScript path for a source file.
Get the deserializer for the state.
Get the dimensions for opening a new window by cascading as appropriate to the platform.
Get the dimensions of this window.
Get the incompatible native modules that this package depends on.
Get the last element of an array.
Get the platform-specific window offset for new windows.
Get the scope descriptor at the cursor.
Get the user's PATH environment variable registry value.
Gets the row number of the last line.
GitRepository itself will handle these cases by manually calling through to the async repo.
Given a buffer row, creates a fold at it.
Given a buffer row, this decreases the indentation.
Given a buffer row, this indents it.
Given a buffer row, this returns a suggested indentation level.
Go back to the (implicit) start of the object
Goal: make sure that the middleware stack is unwound correctly
Grab the reference to the superclass's implementation of the current method.
Gratuitous comment for testing.
Handle bound functions early.
Handle broken symlinks that grunt.file.recurse fails to handle
Handle escaped backslashes correctly.
Handle squirrel events denoted by --squirrel-* command line arguments.
Handles objects implementing **forEach**, arrays, and raw objects.
Handles requests with 'atom' protocol.
Handles splat parameters in the parameter list by peeking at the JavaScript `arguments` object.
Handles the inner loop, filtering, stepping, and result saving for array, object, and range comprehensions.
Handy for getting a list of `children` from the nodes.
Health conscious meal.
Helper Functions ---------------- Helper for ensuring that utility functions are assigned at the top level.
Helper function to continue chaining intermediate results.
Helper function to escape **RegExp** contents, because JS doesn't have one.
Helper function, used for keeping track of the number of tokens consumed and spliced, when returning for getting a new token.
Helpers ------- Regex matchers for option flags.
Helpers ------- Returns the line and column number from an offset into the current chunk.
Helpful snippet for debugging:
Here is a command that inserts the current date in an editor:
Here they are grouped by order of precedence.
Hooks one constructor into another's prototype chain.
However, if the context is the window this needs to be 0 because this value only comes into play when used in adjustment calculations for non-window context waypoints.
However, if you're writing a package that jumps between method definitions, you'll want to work in buffer coordinates.
However, only a single keypress will have fired.
However, pressing and holding long enough to open the accented character menu causes additional keydown events to fire that aren't followed by their own keypress and textInput events.
However, there is one case where we can optimize away a starting empty string.
Hunspell dictionaries are only not needed on OS X.
I'm fighting the editor
I.e., a 'line-number' is a 'gutter', but a 'gutter' is not a 'line-number'.
Ideally we'd test the y coordinate too, but if the window's already as tall as it can be, then OS X won't move it down outside the screen.
If "contextSelector" is not supplied, it returns all waypoints.
If "contextSelector" is supplied it only returns waypoints for that context.
If 'down', the item will be opened in the bottommost pane of the current active pane's column.
If 'left', the item will be opened in leftmost pane of the current active pane's row.
If 'right', the item will be opened in the rightmost pane of the current active pane's row.
If 'up', the item will be opened in topmost pane of the current active pane's column.
If `'closest'`, returns the first valid position closest to an invalid position.
If `'forward'`, returns the first valid position following an invalid position.
If `cancel()` is invoked before the `DirectorySearch` is determined, it will resolve the `DirectorySearch`.
If `decorationItem` is undefined, the decorationNode's child item will be cleared.
If `false`, only the active pane will be searched for an existing item for the same URI.
If `generatedSourceMap` is provided, this will write a `.js.map` file into the same directory as the `.js` file.
If `keyPath` is not specified, your callback will be called on changes to any key.
If `last` is not provided, this will simply return `first`.
If `null`, an "Untitled" buffer is created.
If `options.sourceMap` is specified, then `options.filename` must also be specified.
If `true`, the workspace will attempt to activate an existing item for the given URI on any pane.
If a `thingVolume` is set to a string `'10'`, it will be coerced into an integer.
If a constructor is given, the `createView` function will only be used for model objects inheriting from that constructor.
If a directory is passed, recursively compile all '.coffee', '.litcoffee', and '.coffee.md' extension source files in it and all subdirectories.
If a function is passed, that function should return a number.
If a is not an object by this point, we can't handle it.
If a region has one screen row and more than one buffer row, it represents folded lines
If a transaction with a positive `groupingInterval` is committed while the previous transaction is still 'groupable', the two transactions are merged with respect to undo and redo.
If all middleware is compliant, 'done' should be called with no arguments when the entire round trip is complete.
If all of the source files are done being read, concatenate and compile them together.
If any of them have changed, this will be fired.
If either part consists of multiple words, these must be separated by hyphens.
If evaluating the script directly sets `__filename`, `__dirname` and `module.filename` to be correct relative to the script's path.
If execution should continue (next middleware, Listener callback), the middleware should call the 'next' function with 'done' as an argument.
If execution should continue (next middleware, final callback), the middleware should call the 'next' function with 'done' as an optional argument.
If execution should continue to the next middleware or matching phase, it should call the 'next' function with 'done' as an argument.
If execution should continue, the middleware should call next(done).
If execution should stop, the middleware should call done().
If given a function, `this` will be set to the `target` element.
If height or width are omitted only the position will be changed.
If it is unsaved, its title is "untitled".
If it isn't handled globally, delegate to the currently focused window.
If it returns `undefined`, then the registry will continue to search for other view providers.
If it's a constructor, then things get real tricky.
If it's a statement, ask the statement to do so.
If it's an alternate number...
If it's an array comprehension, you can also choose to step through in fixed-size increments.
If it's not a valid number, abort.
If no "contextSelector" is supplied, it defaults to the window.
If no action is specified, we simply pass the value of the previous nonterminal.
If no associated view is returned by the sequence an error is thrown.
If no registered Listener matched the message
If no tasks are passed, print the help screen.
If not specified, the length of `value` will be used.
If not, the middleware should call the 'done' function with no arguments.
If omitted, the item is #   added after the current active item.
If omitted, the item is added after the current active item.
If only one pane exists in the column, a new pane will be created.
If only one pane exists in the row, a new pane will be created.
If passed a function, it executes the function with merging suppressed, then merges intersecting selections afterward.
If preceded by an `IMPLICIT_FUNC`, indicates a function invocation.
If selected line range is followed by a fold, one line below on screen could be multiple lines in the buffer.
If selected line range is preceded by a fold, one line above on screen could be multiple lines in the buffer.
If so, a Directory that corresponds to the `.git` folder will be returned.
If so, a Response built from the given Message is passed through all registered middleware and potentially the Listener callback.
If soft tabs are enabled, the text is composed of N spaces, where N is the tab length.
If subclassed, this is intended to be overridden.
If the URI is already open, the existing item for that URI will be activated.
If the `filePath` already has a `buffer`, that value is used instead.
If the active pane item currently has a URI according to the item's `.getURI` method, calls `.save` on the item.
If the array has already been sorted, you have the option of using a faster algorithm.
If the browser doesn't supply us with **indexOf** (I'm looking at you, MSIE), we need this function.
If the buffer is manipulated the changes are reflected in both editors, but each maintains its own cursor position, folded lines, etc.
If the buffer row is soft-wrapped, the range may span multiple screen rows.
If the clipboard contains the same number of selections as the current editor, each selection will be replaced with the content of the corresponding clipboard selection text.
If the code generation wishes to use the result of a complex expression in multiple places, ensure that the expression is only ever evaluated once, by assigning it to a temporary variable.
If the current grammar doesn't support comments, does nothing.
If the cursor is already at the end of the line, deletes the following newline.
If the cursor is already at the end of the line, it removes the following newline.
If the cursor is already on the first character of the line, move it to the beginning of the line.
If the editor's buffer is saved, its title is the file name.
If the given checkpoint is no longer present in the undo history, no changes will be made to the buffer and this method will return `false`.
If the given checkpoint is no longer present in the undo history, no grouping will be performed and this method will return `false`.
If the given row is foldable, the fold will begin there.
If the gutter existed previously, we first try to move the cursor to the point at which it occurs in the previous gutters.
If the history file was truncated we should pop off a potential partial line
If the installed version of Node supports `require.extensions`, register CoffeeScript as an extension.
If the item is active, the next item will be activated.
If the item is the last item, the pane will be destroyed if the `core.destroyEmptyPanes` config setting is `true`.
If the language doesn't have comment, nothing happens.
If the optional *short-flag* is unspecified, leave it out by padding with `null`.
If the parameter is not a node, it will just be passed through unaffected.
If the screen row is the first line of a folded range of buffer rows, the range may span multiple buffer rows.
If the selection is empty, adds an empty selection to the next following non-empty line as close to the current selection's column as possible.
If the selection is empty, adds an empty selection to the next preceding non-empty line as close to the current selection's column as possible.
If the selection is empty, indents the current line if the cursor precedes non-whitespace characters, and otherwise inserts a tab.
If the selection is empty, joins the current line with the next line.
If the selection is empty, the characters preceding and following the cursor are swapped.
If the selection is non-empty, adds a selection to the next line that is long enough for a non-empty selection starting at the same column as the current selection to be added to it.
If the selection isn't empty, only deletes the contents of the selection.
If the variable has not been seen yet within the current scope, declare it.
If there are multiple cursors, they will be consolidated to a single cursor.
If there are multiple cursors, they will be merged into a single cursor.
If there are multiple cursors, your callback will be called for each cursor.
If there are multiple selections, they are reduced to a single selection with the given range.
If there are multiple selections, they are replaced by new selections with the given ranges.
If there selection spans more than one line, all the lines are joined together.
If these values aren't explicitly styled, we assume the editor is unconstrained and use the scrollHeight / scrollWidth as its height and width in calculations.
If they are empty, the context removes itself from the global contexts hash.
If they are sent across, it will stop processing accelerators for the rest of the menu items.
If this Block consists of just a single node, unwrap it by pulling it back out.
If this is the case, select backward to replace the original character.
If this is the last pane, all the items will be destroyed but the pane itself will not be destroyed.
If this option is not supplied, the first of all matching key bindings for the given command will be rendered.
If we can detect that the current line is continued onto the next line, then the newline is suppressed:
If we happen to be the top-level **Block**, wrap everything in a safety closure, unless requested not to.
If we need to return the result, and it's an expression, simply return it.
If we're lexing literate CoffeeScript, strip external Markdown by removing all lines that aren't indented by at least four spaces or a tab.
If we're not in a browser environment, we're finished with the public API.
If we're on Node, patch `child_process.fork` so that Coffee scripts are able to fork both CoffeeScript files, and JavaScript files, directly.
If we've got a base64 encoder, a JSON serializer, and tools for escaping unicode characters, we're good to go.
If we've reached this point, the gutter previously existed, but its position has moved.
If x or y are omitted the window will be centered.
If you call a function with a splat, it's converted into a JavaScript `.apply()` call to allow an array of arguments to be passed.
If you pass a DOM element, the command will be associated with just that element.
If you pass a selector, the command will be globally associated with all matching elements.
If you pass a selector, the commands will be globally associated with all matching elements.
If you run the `cake build:parser` command, Jison constructs a parse table from our rules and saves it into `lib/parser.js`.
If you specify this option and a key binding exists that matches the command, it will be appended to the title or rendered alone if no title is specified.
If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it.
If you wish to open a view of a different type for a file that is already open, consider changing the protocol of the URI.
If you would like a waypoint to only trigger if it is the last waypoint in a scroll check, set this to false.
If you're adding your own kind of pane item, a good strategy for all but the simplest items is to separate the model and the view.
If you're manipulating the state of an editor, use this class.
Ignore *.cc and *.h files from native modules
Ignore ENOENT errors in case the file was deleted between the exists check and the call to unlink sync.
Ignore eol of line differences on windows so that files checked in as LF don't report every line modified when the text contains CRLF endings.
Ignore escaped backslashes.
Ignore escaped newlines
Immediately calls your callback for each existing cursor.
Immediately calls your callback for each existing gutter.
Immediately calls your callback for each existing selection.
Immediately calls your callback with the current grammar.
Implicit call taking an implicit indented object as first argument.
Implicit objects as part of chained calls.
Implicit objects nesting.
Implicit objects start here
Implicit objects with wacky indentation:
Import the helpers we need.
Import the helpers we plan to use.
In CoffeeScript, an object literal is simply a list of assignments.
In `'/path/to/task-file.coffee'`:
In a sense, a destructured parameter represents multiple JS parameters.
In addition, several reserved properties can be used to filter markers based on their current range: * `startBufferRow` Only include markers starting at this row in buffer coordinates.
In addition, there are several special properties that will be compared with the range of the markers rather than their properties.
In chains, there's no need to wrap bare obj literals in parens, as the chained expression is wrapped.
In each hash they value is a Waypoint instance and the key is that waypoint's unique ID.
In practice there are usually multiple tooltips.
In practice, this often comes from the comma-delimited list of patterns in the bottom text input of the ProjectFindView dialog.
In some cases, this is confusing for users, and a more descriptive title is useful.
In the default configuration, tabs are also displayed for each item.
In the default configuration, the text in the tab for pending items is shown in italics.
In the event of a specificity tie, the most recently registered listener is invoked first.
In this example, the setting must be either 'foo' or 'bar', which are presented using the provided descriptions in the settings pane:
In this example, the setting must be one of the 4 integers:
In your package code:
In your package's menu `.cson` file you need to specify it under a `context-menu` key:
Include a done() method until find-and-replace can be updated.
Include source maps where possible.
Inclusive and exclusive range dots.
Incompatible packages cannot be activated.
Increase the editor font size by 1px.
Increment this when the serialization format changes
Indent all lines intersecting selections.
Indent the current line(s).
Indents all the rows between two buffer row numbers.
Indexing into an object or array using bracket notation.
Indicates that no other Listener should be called on this object
Infinity Non-Integer Literals Decimal number literals.
Inheritance and calling super.
Initialize a **Class** with its name, an optional superclass, and a list of prototype property assignments.
Initialize the **Parser** with our list of terminal **tokens**, our **grammar** rules, and the name of the root.
Initialize with a list of valid options, in the form:
Insert a zero-width non-breaking whitespace, so that LinesYardstick can take the fold-marker::after pseudo-element into account during measurements when such marker is the last character on the line.
Insert the gutter into the gutters array, sorted in ascending order by 'priority'.
Inserts or removes hard tabs or spaces based on the soft tabs and tab length settings of this editor in order to bring it to the given indentation level.
Install the Open with Atom explorer context menu items via the registry.
Instantiate a Lexer for our use here.
Instead of generating the JavaScript string directly, we build up the equivalent syntax tree and compile that, in pieces.
Instead of showing the compiler's stacktrace, show our custom error message (this is useful when the error bubbles up in Node.js applications that compile CoffeeScript for example).
Instead, you're responsible for interpreting the options object.
Integration tests require a fast machine and, for now, we cannot afford to run them on Travis.
Interact with this object to open files, be notified of current and future editors, and manipulate panes.
Interactions With Functions
Internal class, not intended for direct user manipulation.
Internal plugin-wide variables: - allWaypoints: A hash containing two hashes, one for vertical waypoints and one for horizontal waypoints.
Internal: Aggregates waypoints on a given axis of a context, and applies a "push" callback for each element in the subject jQuery object.
Internal: Invokes "method" on all waypoints.
Internal: Returns an array of all HTMLNodes for each waypoint that passes the "test" function.
Investigating an exception that occurs here due to ::domNode being null.
Investigating an exception that's occurring here due to the line being undefined.
Invoke a method with arguments on every item in a collection.
Invoke another task in the current Cakefile.
Invoke the given callback with all the current and future registered `TextEditors`.
Invokes interceptor with the obj, and then returns obj.
Is the given value NaN -- this one is interesting.
Issue #1150: String interpolation regression
Issue #2321: Regex/division conflict in interpolation
Issue #923: Tricky interpolation.
It allows you to add CSS classes to line numbers in the gutter, lines, and add selection-line regions around marked ranges of text.
It also includes the newline character.
It also shortens the SHA-1 of a detached `HEAD` to 7 characters.
It can be a model with an associated view or a view.
It does add new remote paths if their directories exist.
It does add new remote paths to be added if they are not contained by previous remote paths.
It does not add new remote paths if their directories do not exist and they are contained by existing remote paths.
It includes the folds that were intersecting with the selection.
It is emit asynchronously 300ms after the last buffer change.
It is run after packages are loaded/activated and after the previous editor state has been restored.
It is the default method that is delegated to when .waypoint is called with one of the above signatures.
It might be on the current word, or the previous word.
It provides a number of callbacks and a method for calling remote procedure calls on the corresponding Channel instance on the server side.
It receives the same arguments that were passed to the task.
It seems like a workaround for a browser bug, but not totally sure.
It should be rewritten to be truly async.
It will be called with `this` referencing the matching DOM node.
It will be removed from all lines later.
It will just unset in this case
It would be better not to generate them in the first place, but for now, clean up obvious double-parentheses.
It's a special time in a waypoint's life.
It's defined by an indented block of **Block** preceded by a function arrow, with an optional parameter list.
It's necessary to build the event handlers in this process, otherwise closures are dragged across processes and failed to be garbage collected appropriately.
It's the entry point into the Atom application and maintains the global state of the application.
Items can be views or models with associated views.
Iterates the name or names of a `Param`.
JavaScript templating a-la **ERB**, pilfered from John Resig's *Secrets of the JavaScript Ninja*, page 83.
Joining a line means that multiple lines are converted to a single line with the contents of each of the original non-empty lines separated by a space.
Just pass through un-schema'd values
Just simple, comma-separated, required arguments (no fancy syntax).
Just spawn something that won't actually modify the host
Keep a reference to the original directory name, when running Cake tasks from subdirectories.
Keep reference to the left expression, unless this an existential assignment
Keep the identity function around for default iterators.
Keep track of the list of defined tasks, the accepted options, and so on.
Keep track of the name of the base object we've been assigned to, for correct internal references.
Keeps track of the level of indentation, because a single outdent token can close multiple indents, so we need to know how far in we happen to be.
Keys are real paths that end in `.git`.
Kick off all of the searches and unify them into one Promise.
Kill all child processes of the spawned cmd.exe process on Windows.
Kill all processes associated with opened windows.
Kill process associated with the given opened window.
Kill the process with the given pid.
Last line of output is the JSON details about the releases
Last row, extending from left side of screen to selection end
Leading newlines would introduce an ambiguity in the grammar, so we dispatch them here.
Leading space intentional to check for index.coffee.md
Leaves the first line unchanged.
Let's just hook this guy up to our methods hash and add some trivial error reporting for bogus calls.
Levels indicate a node's position in the AST.
Lexing regular expressions is difficult to distinguish from division, so we borrow some basic heuristics from JavaScript and Ruby.
Like iferr, but also catches errors thrown from `succ` and passes to `fail`
Lines will be separated by a single space.
Listen for `did-change-statuses` so we know if something changed.
Listen for selection changes and store the currently selected text in the selection clipboard.
Listen for window load, both in decent browsers and in IE.
Listener callback was called (and failed)
Listener must have matched
Listeners can flag this message as 'done' to prevent further execution.
Listeners receive every message from the chat source and decide if they want to act on it.
Load a remote script from the current domain via XHR.
Load and run a CoffeeScript file for Node, stripping any `BOM`s.
Load the adapter Hubot is going to use.
Load the mock adapter into the cache
Look for signs of implicit calls and objects in the token stream and add them.
Look up a generated column - should get back the original source position.
Look up a point further along on the same line - should get back the same source position.
Look up a tag by token index.
Lower priority items are forced closer to the edges of the window.
Maintain a map of directories to the number of search results.
Maintaining the existing error interface (Response object)
Make all the AST nodes visible to the parser.
Make an Ajax request to fetch the weather...
Make incorrect indentation safe.
Make sure that a constructor is defined for the class, and properly configured.
Make sure the Promise that is returned to the client is cancelable.
Make sure token look-behind doesn't go out of range.
Make sure we have the most up-to-date scroll values for our context.
Make sure we've found the correct value.
Make vvar into a simple variable if it isn't already.
Makes the next item in the itemStack active.
Makes the previous item in the itemStack active.
Many flags cause us to divert before compiling anything.
Mark given local variables in the root scope as parameters so they don't end up being declared on this block.
Mark if the value is a for loop
Markers can be associated with custom properties that will be compared with basic equality.
Markers can be associated with custom properties, which are compared with basic equality.
Match it with its paired close.
Match tags in token stream starting at `i` with `pattern`, skipping 'HERECOMMENT's.
Match the async.reduce interface
Match the contents of a delimited token and expand variables and expressions inside it using Ruby-like notation for substitution of arbitrary expressions.
Matcher matched, so we return true
Matcher still matched, so we return true
Matches JavaScript interpolated directly into the source via backticks.
Matches and consumes comments.
Matches and consumes non-meaningful whitespace.
Matches newlines, indents, and outdents, and determines which is which.
Matches numbers, including decimals, hex, and exponential notation.
Matches regular expression literals, as well as multiline extended ones.
Matches strings, including multi-line strings, as well as heredocs, with or without interpolation.
May be used in combination with other options, such as `--print`.
May be wrapped by executed middleware.
Measure explicitly-styled height and width and relay them to the model.
Memoize an expensive function by storing its results.
Merge cursors that have the same screen position
Merge objects, flatten arrays, count characters, that sort of thing.
Merge objects, returning a fresh copy with attributes from both sides.
Merge the array `tokens` of the fake token types 'TOKENS' and 'NEOSTRING' (as returned by `matchWithInterpolations`) into the token stream.
Merge the properties from a top-level object as prototypal properties on the class.
Merge two jison-style location data objects together.
Merges an item in a submenu aware way such that new items are always appended to the bottom of existing menus where possible.
Merges intersecting selections.
Messages know about the content and user that made the original message, and how to reply back to them.
Mid-switch comment with whitespace and multi line
Middle rows, extending from left side to right side of screen
Middleware may wrap the 'done' function in order to execute logic after the final callback has been executed.
Middleware stack was unwound correctly
Mimic Python's chained comparisons when multiple comparison operators are used sequentially.
Mini editors have no gutter decorations.
Mixin the top-level Cake functions for Cakefiles to use directly.
Most recent at the end.
Move any active selections one column to the left.
Move any active selections one column to the right.
Move lines intersecting the most recent selection or muiltiple selections down by one row in screen coordinates.
Move lines intersecting the most recent selection or multiple selections up by one row in screen coordinates.
Moves the active item to the end of the itemStack once the ctrl key is lifted
Moves the cursor to the beginning of the containing word while preserving the selection's tail position.
Moves the cursor to the beginning of the next paragraph while preserving the selection's tail position.
Moves the cursor to the beginning of the next word while preserving the selection's tail position.
Moves the cursor to the end of the containing word while preserving the selection's tail position.
Multiline strings with inner quotes.
Multiple nested function declarations mixed with implicit calls should not cause a syntax error.
Must be specified if `scopeDescriptor` is specified.
NB: This prevents Win10 from showing dupe items in the taskbar
Need to use a real Message so that the CatchAllMessage constructor works
Nested blocks caused by paren unwrapping
Nested property access and calls.
Newlines work as well.
Newly loaded images often shift layout.
No more events are emitted once this method is called.
No, we didn't try to execute the listener callback
Node 0.11 changed API, a command such as '.help' is now stored as 'help'
Node 0.11.12 changed API, prompt is now _prompt.
Node's REPL sends the input ending with a newline and then wrapped in parens.
Nodes will override these with custom logic, if needed.
Normalize arguments by expanding merged flags into multiple flags.
Norrell'): 'Susanna Clarke'.
Note that Node's asynchrony may cause tasks to execute in a different order than you'd expect.
Note that cancelling all of the members of allSearches will cause all of the searches to resolve, which causes searchPromise to resolve, which is ultimately what causes cancellablePromise to resolve.
Note that hoisting resolve and reject in this way is generally frowned upon.
Note that if soft tabs are enabled and the tab length is 2, a row with 4 leading spaces would have an indentation level of 2.
Note that middleware can intercept the message and prevent the callback from ever being executed.
Note that the opener will be called if and only if the URI is not already open in the current pane.
Note that the value is a string, just like the key.
Note that this array may be empty, indicating that all files should be searched.
Note that this is overridden for smarter behavior for many statement nodes (e.g. If, For)...
Note that this will only be available when the project is backed by a Git repository.
Nothing else worked, deep compare the contents.
Notice no colon when no message.
Notify the browser project of the window's current project path
Now measure the new scrollbar dimensions
Now restore the display value for all scrollbars, since they were previously hidden
Now that we're done with the check, the new scroll values become the old scroll values for the next check.
Now the forward case.
Numbers, arrays, objects, and anything else will not be coerced.
OSX can't handle displaying accelerators for multiple keystrokes.
Object Functions ---------------- Retrieve the names of an object's properties.
Object starting with dynamic key.
Observers are called asynchronously 100ms after the last active pane item change.
On OS X, fades the application window's proxy icon when the current file has been modified.
Once established, the ActionCable.ConnectionMonitor will ensure that its properly maintained through heartbeats and checking for stale updates.
Once we moved selections to a different layer it broke.
Once your request is assembled, you can call `get()`/`post()`/etc to send the request.
One cannot simply .bind here since it could be used as a component with Etch, in which case it'd be `new`d.
One is falsy and the other truthy.
Only applicable to the `gutter`, `line`, and `line-number` types.
Only applicable to the `gutter`, `overlay` and `block` types.
Only applicable to the `line` and `line-number` types.
Only handle mouse down events for left mouse button on all platforms and middle mouse button on Linux since it pastes the selection clipboard
Only needed if the repository contains submodules.
Only one GitRepository should be created for each .git folder.
Only schedule update check periodically if running in release version and and there is no existing scheduled update check.
Only scroll in one direction at a time
Only send to the first non-spec window created
Only to be used in specs
Only to be used when deserializing
Only waypoints within the "selector" context on the "axis" axis are tested.
Open Atom's license in the active pane.
Opening another directory creates a second window.
Opening another directory resuses the same window and add the folder to project paths.
Opening another file reuses the same window and add parent dir to project paths.
Opening another file reuses the same window and does not change the project paths.
Opening one of those directories again reuses the same window and does not change the project paths.
Opening with no file paths always creates a new window, even if existing windows have no project paths.
Opens a native dialog to prompt the user for a path.
Opens a native dialog where the user selects a path on disk, then calls `.saveAs` on the item with the selected path.
Operates on all selections.
Optimize out empty interpolations (an empty pair of parentheses).
Optimize out empty strings.
Optionally remove the compiled JS version as well.
Options after the first non-option argument are treated as arguments.
Ordinary function invocation, or a chained series of calls.
Otherwise a conditional operator is safe.
Otherwise convert the selected text to upper case.
Otherwise cut the selected text.
Otherwise delete the selected text.
Otherwise it joins all lines that intersect the selection.
Otherwise it will span a single buffer row.
Otherwise it will span a single screen row.
Otherwise return undefined.
Otherwise returns a range spanning only the given buffer row.
Otherwise, `text` is used as the contents of the new buffer.
Otherwise, it will begin at the first foldable row preceding the given row.
Otherwise, it will will be called for any object.
Otherwise, returns `null`.
Otherwise, returns an array of all users for which fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).
Otherwise, the DOM node in question needs to be attached to the document so the event bubbles up to the root node to be processed.
Otherwise, the selected characters are reversed.
Override Jison's default error handling function.
Package specs being run, show a more descriptive label
Packages can be enabled/disabled via the `core.disabledPackages` config settings and also by calling `enablePackage()/disablePackage()`.
Packages can be loaded, activated, and deactivated, and unloaded: * Loading a package reads and parses the package's metadata and resources such as keymaps, menus, stylesheets, etc.
Pairs up a closing token, ensuring that all listed pairs of tokens are correctly balanced throughout the course of the token stream.
Panes can contain multiple items, one of which is *active* at a given time.
Parameter List Features
Parentheses are a good way to force any statement to become an expression.
Parenthetical expressions.
Parse a string of CoffeeScript code or an array of lexed tokens, and return the AST.
Parse the list of arguments, populating an `options` object with all of the specified options, and return it.
Pass `null` to clear the override.
Pass a level to precompile.
Pass a list of referenced variables, so that generated variables won't get the same name.
Pass the gutter only the state that it needs.
Passes each child to a function, breaking when the function returns `false`.
Passing `n` will return the first N values in the array.
Passing `undefined` will revert the setting to the default value.
Passing an `index` will return the rest of the values in the array from that index onward.
Patch Node's module loader to be able to handle multi-dot extensions.
Patch `ok` to store a count of passed tests...
Peek at the beginning of a given string to see if it matches a sequence.
Peek at the end of a given string to see if it matches a sequence.
Peek at the last tag in the token stream.
Peek at the last value in the token stream.
Peeks at their properties to assign inner names.
Per the documentation in docs/scripting.md Any new fields that are exposed to middleware should be explicitly tested for.
Perform a channel action with the optional data passed as an attribute
Perform a deep comparison to check if two objects are equal.
Performs a text search for files in the specified `Directory`, subject to the specified parameters.
Performs some conversion from CoffeeScript operations into their JavaScript equivalents.
Placeholder text will be displayed when the editor has no content.
Please maintain this structure when adding specs for new state fields.
Please register a view provider.")
Plugin-wide settings: - resizeThrottle: For performance reasons, the refresh performed during resizes is throttled.
Pointer to the first item in the list.
Policeman ('Constable') print
Ported from https://developer.mozilla.org/en-US/docs/DOM/window.btoa
Precedence ---------- Operators at the top of this list have higher precedence than the ones lower down.
Preload the Hubot mock adapter but substitute in the latest version of Adapter
Preprocess the code to remove leading and trailing whitespace, carriage returns, etc.
Preserve length of id for location data
Preserve this deprecation until 2.0.
Prevent any actual change to Windows registry
Prevent any commands from actually running and affecting the host
Prevent any spawned command from actually running and affecting the host
Prevent focusout event on hidden input if editor is already focused
Prevent form submits from changing the current window's URL
Prevent the actual home directory from being manipulated
Print an error and exit when attempting to use an invalid task/option.
Print the `--help` usage message and exit.
Print the `--version` message and exit.
Prints errors when one is passed, or does nothing otherwise ex: thing.save printerr
Private: Call with a method for the given strings using response middleware.
Private: Check if the `decorationProperties.type` matches `type`
Private: Computes whether or not this editor should use softTabs based on the `editor.tabType` setting.
Private: Extend obj with objects passed as additional args.
Private: For each selection, only copy highlighted text.
Private: Increase the indentation level of the given text by given number of levels.
Private: Passes the given message to any interested Listeners.
Private: load help info from a loaded script.
Private: load history from .hubot_history.
Produce a duplicate-free version of the array.
Produce an array that contains every item shared between all the passed-in arrays.
Produces the expected runtime of Quicksort, for every integer from 1 to N.
Prompt the user for a path and save the active pane item to it.
Provide JavaScript 1.6's **lastIndexOf**, delegating to the native function, if possible.
Proxy node's line listener
Public: A helper method to easily launch and run a task once.
Public: A helper reply function which delegates to the adapter's reply function.
Public: A helper send function to message a room that the robot is in.
Public: A helper send function which delegates to the adapter's send function.
Public: A notification to the user containing a message and type.
Public: A wrapper around the EventEmitter API to make usage semantically better.
Public: Activate the first item that matches the given URI.
Public: Activate the item at the given index.
Public: Add a fatal error notification.
Public: Add a path to the project's list of root paths
Public: Add a warning notification.
Public: Add an error notification.
Public: Add an informational notification.
Public: Add context menu items scoped by CSS selectors.
Public: Add one or more command listeners associated with a selector.
Public: Add the given item to the pane.
Public: Add the given items to the pane.
Public: Adds a Listener that attempts to match incoming messages based on a Regex.
Public: Adds a Listener that triggers when anyone changes the topic.
Public: Adds a Listener that triggers when anyone enters the room.
Public: Adds a Listener that triggers when anyone leaves the room.
Public: Adds a custom Listener with the provided matcher, options, and callback
Public: Adds an error handler when an uncaught exception or user emitted error event occurs.
Public: Adds the given items to the application menu.
Public: Associates listener functions with commands in a context-sensitive way using CSS selectors.
Public: Asynchronously reopens the last-closed item's URI if it hasn't already been reopened.
Public: Build a regular expression that matches messages addressed directly to the robot
Public: Call a function when an event is emitted by the child process
Public: Calls your `callback` when the cursor is destroyed
Public: Calls your `callback` when the cursor's visibility has changed
Public: Check if this decoration is of type `type`
Public: Checks out a branch in your repository.
Public: Close the pane and destroy all its items.
Public: Combines the given selection into this selection and then destroys the given selection.
Public: Copies the current selection to the clipboard.
Public: Copies the selection to the clipboard and then deletes it.
Public: Create a Directory that corresponds to the specified URI.
Public: Create a dev tools profile for a function.
Public: Create a new pane to the right of this pane.
Public: Creates a fold containing the current selection.
Public: Creates a new pane above the receiver.
Public: Creates a new pane below the receiver.
Public: Creates a scoped http client with chainable methods for modifying the request.
Public: Creates a task.
Public: Cuts the selection until the end of the buffer line.
Public: Cuts the selection until the end of the screen line.
Public: Deselects the current selection.
Public: Deserialize the state and params.
Public: Destroy all items except for the active item.
Public: Destroy all items.
Public: Destroy and remove this panel from the UI.
Public: Destroy the active item and activate the next item.
Public: Destroy the given item.
Public: Determines if the ending position of a marker is greater than the starting position.
Public: Determines if the listener likes the content of the message.
Public: Determines whether the given path (real or symbolic) is inside the project's directory.
Public: Disable the package with the given name.
Public: Dispatch a received message to the robot.
Public: Emits the 'close' event so that 'brain' scripts can handle closing.
Public: Emits the 'save' event so that 'brain' scripts can handle persisting.
Public: Enable or disable the automatic saving
Public: Execute all middleware in order and call 'next' with the latest 'done' callback if last middleware calls through.
Public: Executes the given command on the given window.
Public: Executes the given command.
Public: Expands the newest selection to include the entire line on which the cursor currently rests.
Public: Expands the newest selection to include the entire word on which the cursors rests.
Public: Find all registered commands matching a query.
Public: Forcefully stop the running task.
Public: Get a User object given a name.
Public: Get a User object given a unique identifier.
Public: Get all users whose names match fuzzyName.
Public: Get an Array of User objects stored in the brain.
Public: Get the RegExp used by the cursor to determine what a "subword" is.
Public: Get the RegExp used by the cursor to determine what a "word" is.
Public: Get the active pane item in this pane.
Public: Get the cached ahead/behind commit counts for the current branch's upstream branch.
Public: Get the cached status for the given path.
Public: Get the enabled theme names from the config.
Public: Get the grammar override for the given file path.
Public: Get the index of the active item.
Public: Get the load settings for the current window.
Public: Get the path to the project directory that contains the given path, and the relative path from that project directory to the given path.
Public: Get the paths being used to look for packages.
Public: Get the repository for a given directory asynchronously.
Public: Get the status of a directory in the repository's working directory.
Public: Get the status of a single path in the repository.
Public: Get the version of the Atom application.
Public: Gets all the local and remote references.
Public: Gracefully shutdown the robot process
Public: Help Commands for Running Scripts.
Public: Hide this panel
Public: Identifies if a selection intersects with a given buffer range.
Public: Identifies if a selection intersects with another selection.
Public: Identifies if the cursor is surrounded by whitespace.
Public: If fuzzyName is an exact match for a user, returns an array with just that user.
Public: If the given buffer row is part of a folded row range, returns that row range.
Public: If the selection is empty, removes all text from the cursor to the end of the line.
Public: If the selection spans multiple rows, indent all of them.
Public: Invoke the given callback after dispatching a command event.
Public: Invoke the given callback before an item is removed from the pane.
Public: Invoke the given callback before dispatching a command event.
Public: Invoke the given callback before items are destroyed.
Public: Invoke the given callback before the pane is destroyed.
Public: Invoke the given callback when a multiple files' statuses have changed.
Public: Invoke the given callback when a package is activated.
Public: Invoke the given callback when a package is deactivated.
Public: Invoke the given callback when a package is loaded.
Public: Invoke the given callback when a package is unloaded.
Public: Invoke the given callback when all packages have been activated.
Public: Invoke the given callback when an item is added to the pane.
Public: Invoke the given callback when an item is moved within the pane.
Public: Invoke the given callback when an item is removed from the pane.
Public: Invoke the given callback when the notification is displayed.
Public: Invoke the given callback when the pane is activated.
Public: Invoke the given callback when the pane is destroyed.
Public: Invoke the given callback when this GitRepository's destroy() method is invoked.
Public: Invoke the given callback with all current and future items.
Public: Joins the current line with the one below it.
Public: Kick off the event loop for the adapter
Public: Load scripts from packages specified in the `external-scripts.json` file.
Public: Load scripts specified in the `hubot-scripts.json` file.
Public: Loads a file in path.
Public: Loads every script in the given path.
Public: Make the given item *active*, causing it to be displayed by the pane's view.
Public: Makes a path relative to the repository's working directory.
Public: Makes the next item active.
Public: Makes the previous item active.
Public: Makes this pane the *active* pane, causing it to gain focus.
Public: Merge keys loaded from a DB against the in memory representation.
Public: Modifies the screen range for the selection.
Public: Modifies the selection to encompass the current word.
Public: Move the active tab to the left
Public: Move the active tab to the right.
Public: Move the given item to the given index on another pane.
Public: Move the given item to the given index.
Public: Moves a cursor to a given buffer position.
Public: Moves the cursor down one screen row.
Public: Moves the cursor left one screen column.
Public: Moves the cursor right one screen column.
Public: Moves the cursor to the beginning of the buffer line, skipping all whitespace.
Public: Moves the cursor to the beginning of the buffer line.
Public: Moves the cursor to the beginning of the first character in the line.
Public: Moves the cursor to the beginning of the line.
Public: Moves the cursor to the beginning of the next paragraph
Public: Moves the cursor to the beginning of the next word.
Public: Moves the cursor to the beginning of the previous paragraph
Public: Moves the cursor to the beginning of the word.
Public: Moves the cursor to the bottom of the buffer.
Public: Moves the cursor to the end of the buffer line.
Public: Moves the cursor to the end of the line.
Public: Moves the cursor to the end of the word.
Public: Moves the cursor to the next subword boundary.
Public: Moves the cursor to the next word boundary.
Public: Moves the cursor to the previous subword boundary.
Public: Moves the cursor to the previous word boundary.
Public: Moves the cursor to the top of the buffer.
Public: Moves the selection up one row.
Public: Open the given path in the focused window when the event is triggered.
Public: Opens a single path, in an existing window if possible.
Public: Opens multiple paths, in existing windows if possible.
Public: Passes the given message to any interested Listeners after running receive middleware.
Public: Performs a replace across all the specified files in the project.
Public: Picks a random item from the given items.
Public: Play a sound in the chat source
Public: Posts a message back to the chat source
Public: Posts a message in an unlogged room
Public: Posts a message mentioning the current user.
Public: Posts a topic changing message
Public: Posts an emote back to the chat source
Public: Prompt the user for a location and save the active item with the path they select.
Public: Raw method for building a reply and sending it back to the chat source.
Public: Raw method for invoking the bot to run.
Public: Raw method for playing a sound in the chat source.
Public: Raw method for sending data back to the chat source.
Public: Raw method for sending emote data back to the chat source.
Public: Raw method for setting a topic on the chat source.
Public: Raw method for shutting the bot down.
Public: Read the text from the clipboard and return both the text and the associated metadata.
Public: Read the text from the clipboard.
Public: Refreshes the currently visible menu.
Public: Register an opener for a uri.
Public: Register the given class(es) as deserializers.
Public: Registers new middleware
Public: Registers new middleware for execution after matching but before Listener callbacks
Public: Registers new middleware for execution as a response to any message is being sent.
Public: Registers new middleware for execution before matching
Public: Remove all grammar overrides.
Public: Remove the grammar override for the given file path.
Public: Removes from the beginning of the line which the selection begins on all the way through to the end of the selection.
Public: Removes from the start of the selection to the beginning of the current word if the selection is empty otherwise it deletes the selection.
Public: Removes one level of indent from the currently selected rows.
Public: Removes only the selected text.
Public: Removes the first character before the selection if the selection is empty otherwise it deletes the selection.
Public: Removes the line at the beginning of the selection if the selection is empty unless the selection spans multiple lines in which case all lines are removed.
Public: Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected.
Public: Removes the selection or the next character after the start of the selection if the selection is empty.
Public: Removes the selection or, if nothing is selected, then all characters from the start of the selection back to the previous word boundary.
Public: Removes the selection or, if nothing is selected, then all characters from the start of the selection up to the next word boundary.
Public: Reset the interval between save function calls.
Public: Responses are sent to matching listeners.
Public: Retrieves a shortened version of the HEAD reference value.
Public: Retrieves the buffer position of where the current word ends.
Public: Retrieves the buffer position of where the current word starts.
Public: Retrieves the buffer position of where the next word starts.
Public: Retrieves the cursor's current buffer row.
Public: Retrieves the line diffs comparing the `HEAD` version of the given path and the given text.
Public: Retrieves the range for the current paragraph.
Public: Retrieves the scope descriptor for the cursor's current position.
Public: Return the first item that matches the given URI or undefined if none exists.
Public: Return the item at the given index.
Public: Returns a copy of all the regions in the map
Public: Returns an array of strings describing the map's regions.
Public: Returns an end-row-exclusive range of buffer rows corresponding to the given screen row.
Public: Returns an end-row-exclusive range of screen rows corresponding to the given buffer row.
Public: Returns buffer position of the next word boundary.
Public: Returns the buffer Range for the current line.
Public: Returns the buffer Range occupied by the word located under the cursor.
Public: Returns the characters preceding the cursor in the current word.
Public: Returns the current buffer position as an Array.
Public: Returns the cursor's current buffer column.
Public: Returns the cursor's current buffer row of text excluding its line ending.
Public: Returns the cursor's current screen column.
Public: Returns the cursor's current screen row.
Public: Returns the git configuration value specified by the key.
Public: Returns the indentation level of the current line.
Public: Returns the number of commits behind the current branch is from the its upstream remote branch.
Public: Returns the origin url of the repository.
Public: Returns the starting and ending buffer rows the selection is highlighting.
Public: Returns the text in the selection.
Public: Returns the upstream branch for the current HEAD, or null if there is no upstream branch for the current HEAD.
Public: Returns the visibility of the cursor.
Public: Returns true if at the root, false if in a subfolder of the repository.
Public: Returns true if being run from within Windows
Public: Returns true if the given branch exists.
Public: Returns true if the given path is new.
Public: Returns true if the given status indicates a new path.
Public: Returns true if the given status indicates modification.
Public: Returns true if this cursor has no non-whitespace characters before its current position.
Public: Returns whether the cursor is at the start of a line.
Public: Returns whether the cursor is currently between a word and non-word character.
Public: Returns whether the cursor is on the line return character.
Public: Returns whether the selection is a single line or not.
Public: Returns whether this cursor is between a word's start and end.
Public: Runs the given Node script by spawning a new child process.
Public: Save all items.
Public: Save the active item.
Public: Save the given item.
Public: Selects all the text from the current cursor position to the beginning of the line.
Public: Selects all the text from the current cursor position to the beginning of the next paragraph.
Public: Selects all the text from the current cursor position to the beginning of the next word.
Public: Selects all the text from the current cursor position to the beginning of the previous paragraph.
Public: Selects all the text from the current cursor position to the beginning of the word.
Public: Selects all the text from the current cursor position to the bottom of the buffer.
Public: Selects all the text from the current cursor position to the end of the buffer line.
Public: Selects all the text from the current cursor position to the end of the screen line.
Public: Selects all the text from the current cursor position to the end of the word.
Public: Selects all the text from the current cursor position to the first character of the line.
Public: Selects all the text from the current cursor position to the top of the buffer.
Public: Selects all the text in the buffer.
Public: Selects all the text one position above the cursor.
Public: Selects all the text one position below the cursor.
Public: Selects an entire line in the buffer.
Public: Selects text to the next subword boundary.
Public: Selects text to the next word boundary.
Public: Selects text to the previous subword boundary.
Public: Selects text to the previous word boundary.
Public: Selects the text from the current cursor position to a given buffer position.
Public: Selects the text from the current cursor position to a given screen position.
Public: Selects the text one position left of the cursor.
Public: Selects the text one position right of the cursor.
Public: Send message to the task.
Public: Set the grammar override for the given file path.
Public: Set the paths of the project's directories.
Public: Sets the indentation level of all selected rows to values suggested by the relevant grammars.
Public: Show this panel
Public: Simulate the dispatch of a command on a DOM node.
Public: Some files can not exist on Windows filesystems, so we have to selectively generate our fixtures.
Public: Starts the task.
Public: Tell the message to stop dispatching to listeners
Public: Terminate the process.
Public: The entry point into the Atom application.
Public: The version of Hubot from npm
Public: Updates the entire menu with the given keybindings.
Public: Used to make all window related menu items are active.
Public: Wraps the selected lines in comments if they aren't currently part of a comment.
Public: Write the given text to the clipboard.
Public: remove a path from the project's list of root paths.
Pull out the last non-comment node of a node list.
Pull the Robot in scope for simpler callbacks
Pure statements which cannot be expressions.
Push a fake 'NEOSTRING' token, which will get turned into a real string later.
Push a fake 'TOKENS' token, which will get turned into real tokens later.
Push all the tokens in the fake 'TOKENS' token.
Put any paths here that shouldn't end up in the built Atom.app so that it doesn't becomes larger than it needs to be.
Quote all arguments and escapes inner quotes
RPM versions can't have dashes in them.
Ranges can be used to extract portions (slices) of arrays, to specify a range for comprehensions, or as a value, to be expanded into the corresponding array of integers at runtime.
Re-throw AssertionErrors for clearer test failures
Reactionary does not have an explicit react dependency
Read last `size` bytes from the file
Recalculate the new offset.
Recalculate the pivot.
Record an outdent token or multiple tokens, if we happen to be moving back inwards past several recorded indents.
Rectangular Regions: If a region has the same number of buffer rows and screen rows, it is referred to as "rectangular", and represents one or more non-soft-wrapped, non-folded lines.
Recursive comparison of contents.
Recursively mkdir, like `mkdir -p`.
Redefine fake invocation, so to cause an error
Redefine fake invocation, so to remember passed arguments
Reduce multiple selections to the least recently added selection.
Reduce one or more selections to a single empty selection based on the most recently added cursor.
Refreshes the current git status in an outside process and asynchronously updates the relevant properties.
Regex-matching-regexes.
Register .coffee extension
Register a BrowserWindow with this application menu.
Register a `TextEditor`.
Registers basic application commands, non-idempotent.
Registry keys used for context menu
Regression: exception in earlier handler shouldn't put observer into a bad state.
Regular Expression Interpolation TODO: improve heregex interpolation tests
Related to joyent/node#2318
Relational tokens that are negatable with `not` prefix.
Reload the grammar based on the file name.
Reload: cmd-r / ctrl-r
Reload: cmd-w / ctrl-w
Remove a `TextEditor`.
Remove a file from our source list, and source code cache.
Remove and return the last expression of this expression list.
Remove any gutters that were not present in the new gutters state.
Remove atom and apm from the PATH
Remove empty string and the plus.
Remove first line of stack when it is the same as the error message
Remove it from the DOM and re-insert it.
Remove leading 'TERMINATOR' (if any).
Remove leading whitespace from the line below
Remove the desktop and start menu shortcuts by using the command line API provided by Squirrel's Update.exe
Remove the given item from the itemStack.
Remove the given selection.
Remove the initial dot from dotfiles.
Remove the item from the given location in the list.
Remove the item, add a class.
Remove the unwanted desktop shortcut that was recreated
Remove trailing whitespace from the current line
Removes the active pane item and calls the `.destroy` method on it if one is defined.
Removes the comment if they are currently wrapped in a comment.
Removes the item's uri from the list of potential items to reopen.
Repeat a string `n` times.
Replace version field of package.json.
Replaces VERSION with the current version.
Represents a message that no matchers matched.
Represents a participating user in the chat.
Represents a single unit of text as selected by a grammar.
Represents an incoming message from the chat.
Represents an incoming topic change notification.
Represents an incoming user entrance notification.
Represents an incoming user exit notification.
Represents somewhat persistent storage for the robot.
Require AST nodes to do some AST manipulation.
Required when running this test from CLI
Reread the index to update any values that have changed since the last time the index was read.
Restart Atom using the version pointed to by the atom.cmd shim
Restore folds that existed before the lines were moved
Restore the window to its previous dimensions and show it.
Restore to the window's original editor font size.
Restores the full screen and maximized state after the window has resized to prevent resize glitches.
Results are streamed back to the caller by invoking methods on the specified `options`, such as `didMatch` and `didError`.
Retrieve the values of an object's properties.
Retrieves the current buffer's URI.
Retrieves the data at the given position in the list.
Return a completely flattened version of an array.
Return a flattened version of an array.
Return a sorted list of the function names available in Underscore.
Return a version of the array that does not contain the specified value(s).
Return all the elements for which a truth test fails.
Return all the elements that pass a truth test.
Return null if we've reached the end.
Return the first value which passes a truth test.
Return the help text for this **OptionParser**, listing and describing all of the valid options, for `--help` and such.
Return the index of an element in a sorted list.
Return the maximum item or (item-based computation).
Return the minimum element (or element-based computation).
Return the number of elements in an object.
Return the position of the first occurrence of an item in an array, or -1 if the item is not included in the array.
Return the results of applying the iterator to each element.
Returns `null` when the item has no panel.
Returns `null` when the keyPath has no schema specified, but is accessible from the root schema.
Returns `true` if the first non-comment line with leading whitespace starts with a space character.
Returns `yes` if current line of tokens contain an element of tags on same expression level.
Returns a *thenable* `DirectorySearch` that includes a `cancel()` method.
Returns a Boolean that's true if the method was successful.
Returns a DOM element.
Returns a Match object or null.
Returns a ScopedClient instance.
Returns a String containing the keystroke in a format that can be interpreted by atom shell to provide nice icons where available.
Returns a String of the version number.
Returns a User instance for the user with the specified name.
Returns a User instance of the specified user.
Returns a `boolean` indicating whether this object can search this `Directory`.
Returns a boolean indicating whether the specified directory represents a Git repository.
Returns a boolean of whether the matcher matched.
Returns a checkpoint value.
Returns a complete menu configuration object for atom-shell's menu API.
Returns a function that is the composition of a list of functions, each consuming the return value of the function that follows.
Returns a function which adds location data to the first parameter passed in, and returns the parameter.
Returns a new Brain with no external storage.
Returns a promise that resolves when the repository has been refreshed.
Returns a random item.
Returns a reference to the Underscore object.
Returns an Array of User instances matching the fuzzy name.
Returns an Array of User objects.
Returns an Array of help commands for running scripts.
Returns an Array of menu item Objects.
Returns an Array of native menu items.
Returns an array of theme names in the order that they should be activated.
Returns an empty array if there are no attached waypoints.
Returns an empty object when no decorations are found
Returns an item or `null` if no item exists at the given index.
Returns an object compatible with `::add()` or `null`.
Returns before executing callback
Returns everything but the first entry of the array.
Returns how deeply the given line is indented based on the soft tabs and tab length settings of this editor.
Returns how deeply the given row is indented based on the soft tabs and tab length settings of this editor.
Returns nothing Returns before executing any middleware
Returns null if no range.
Returns the .gitdir path in the agnostic Git symlink .git file given, or null if the path is not a valid gitfile.
Returns the added item.
Returns the editor width in characters.
Returns the first function passed as an argument to the second, allowing you to adjust arguments, run code before and after, and conditionally execute the original function.
Returns the index of the match or -1 if no match.
Returns the instance for chaining.
Returns the message text
Returns the new token.
Returns the number of rows per page
Returns the original object with updated changes.
Returns the range for the given buffer row.
Returns the value from Atom's default settings, the user's configuration file in the type specified by the configuration schema.
Returns the value returned by the given function.
Returns true if the dimensions are useable, false if they should be ignored.
Returns whether the path is inside the project's root directory.
Reverse so the first (top) theme is loaded after the others.
Rewrite a chain of **Ifs** to add a default case as the final *else*.
Rewrite the token stream, looking one token ahead and behind.
Rewriter will generate explicit indentation here.
Robots receive messages from a chat source (Campfire, irc, etc), and dispatch them to matching listeners.
Routes messages from the child to the appropriate event.
Rubinius' File.open implementation.
Run `coffee` by parsing passed options and determining what action to take.
Run a function `n` times.
Run a refresh on resize, but throttle it for performance reasons.
Run passed callback as Spawner.spawn() would do
Run scroll checks on scroll, but throttle it for performance reasons.
Running `cake` with no arguments will print out a list of all the tasks in the current directory's Cakefile.
Running code does not provide access to this scope.
Same as "token", exception this just returns the token without adding it to the results.
Same behavior in interpolated strings.
Sanity check that the error was actually thrown
Save bytes in the minified (but not gzipped) version:
Save the active pane item.
Save the jibberish to a new file
Save the latest command in the file
Save the previous value of the `_` variable.
Scan by attempting to match tokens one at a time, using a regular expression anchored at the start of the remaining code, or a custom recursive token-matching method (for interpolations).
Schema defaults never match a specific source.
Scroll top only gets smaller when needed as dimensions change, never bigger
Scrolling horizontally
Search for a kleene star match at the beginning of the text.
Search for the regexp anywhere in the text.
Search for the regexp at the beginning of the text.
Searches local files for lines matching a specified regex. Implements `.then()` so that it can be used with `Promise.all()`.
See http://stackoverflow.com/questions/22349139/utf-8-output-from-powershell to address https://github.com/atom/atom/issues/5063
See https://atom.io/docs/api/latest/Config for more information about config schemas.
See https://github.com/atom/atom/issues/4811 for more.
See https://github.com/atom/electron/issues/2033
See https://github.com/atom/electron/issues/4317
See: http://en.wikipedia.org/wiki/Luhn_algorithm
See: http://www-archive.mozilla.org/js/language/js20-2002-04/rationale/syntax.html#regular-expressions
Selection Extended Extended: For each selection, move its cursor to the preceding word boundary while maintaining the selection's tail position.
Selections Private Add a similarly-shaped selection to the next eligible line below each selection.
Semicolons can optionally be used instead of newlines.
Separate lines by default by a single space in literal strings.
Server::Connections::BEAT_INTERVAL * 2 (missed two pings)
Set NODE_PATH env variable since tasks may need it.
Set baseline environment
Set encoding and execute the command, capture the output, and return it via .NET's console in order to have consistent UTF-8 encoding.
Set spec directory on spec for setting up the project in spec-helper
Set the dimensions of the window.
Set the explicitHeight to make 10 lines visible.
Set the history on the interpreter
Set the limits every time a display is added or removed, otherwise the configuration gets reset to the default, which allows zooming the webframe.
Set the minimum to this position.
Set the number of characters that can be displayed horizontally in the editor.
Set the scrollTop to 0 to show the very top of the file.
Set up a grid of 9 panes, in the following arrangement, where the numbers correspond to the variable names below.
Sets scroll row from model's logical position
Sets scrollHeight, scrollTop, and backgroundColor on the given domNode.
Sets the decorationItem on the decorationNode.
Sets the marker's tail to the same position as the marker's head.
Setting to `null` will fallback to using the `editor.tabLength` config setting
Settings view calls this method currently.
Setup an empty router object
Setup the Express server's defaults.
Setup the OOP Wrapper --------------------- If Underscore is called as a function, it returns a wrapped object that can be used OO-style.
Shift off the final blank newline
Short circuit at the bottom of the middleware stack
Short circuit null grammar which can just use the placeholder tokens
Short-circuit `traverseChildren` method to prevent it from crossing scope boundaries unless `crossScope` is `true`.
Shortcuts to speed up the lookup time for native functions.
Shorthand objects with property references.
Should have removed Q sooner.
Should the binding for the given selector be included in the menu commands.
Show only the first line on multi-line errors.
Show the open dialog as child window on Windows and Linux, and as independent dialog on OS X.
Show window synchronously so a focusout doesn't fire on input elements that are focused in the very first spec run.
Similarly, if rows 5-10 are folded, then row 6 on screen corresponds to row 11 in the buffer.
Simple function for inverting Literate CoffeeScript code by putting the documentation in comments, producing a string of CoffeeScript code that can be compiled "normally".
Simulate an atom-text-editor element attached to a atom-workspace element attached to a body element that has the same classes as the current body element.
Since this gutter does not exist, the decoration should not appear in the customDecorations state.
Since we parse bottom-up, all parsing must end here.
Single line function arguments
Single line implicit objects
Single-expression **Ifs** are compiled into conditional operators if possible, because ternaries are already proper expressions, and don't need conversion.
Single-line flavors of block expressions that have unclosed endings.
Single-quote fix from Rick Strahl.
Skip over the item to remove.
So acceptable signatures are: - .waypoint(f) - .waypoint(options) - .waypoint(f, options) This "init" method should never need to be called explicity by the user.
So just set a flag, and we'll emit the event after refresh is done.
So we add them to a CompositeDisposable
So we deal with all of these types here.
So we need to keep a cache of the statuses found from this call.
Soaked Function Invocation
Soaked Method Invocation
Soaked chained invocations unfold into if/else ternary structures.
Some boolean checks for the benefit of other nodes.
Some of the generated code can be shared in common, and some cannot.
Some potential ambiguity in the grammar has been avoided by pushing some extra smarts into the Lexer.
Sort the object's values by a criterion produced by an iterator.
Spawn a command and invoke the callback when it completes with an error and the output from standard out.
Spawn can throw an error
Spawn powershell.exe and callback when it completes
Spawn reg.exe and callback when it completes
Spawn setx.exe and callback when it completes
Spawn the Update.exe with the given arguments and invoke the callback when the command completes.
Spec window's web view should always have focus
Special case: removing the first item.
Specifically, you may use the following in configuration setting descriptions:
Splats in Array Literals
Split multi-line selections into one selection per line.
Start chaining a wrapped Underscore object.
Start the REPL with your configuration
Start the animation loop when the mouse moves prior to a mouseup event
Start the crash reporter before anything else.
Start up a new Node.js instance with the arguments in `--nodejs` passed to the `node` binary, preserving the other options.
Start with the longest possible extension and work our way shortwards.
State persistence will fail if other Atom instances are running
Statements converted into expressions via closure-wrapping share a scope object with their parent closure, to preserve the expected lexical scope.
Still needed when deserializing a tokenized buffer
Stop dragging when cursor enters dev tools because we can't detect mouseup
Stop searching at LINEBREAKS or explicit start of containing balanced expression.
Store and load command history from a file
Store the damn thing.
Store the old offset.
Straightforward start of explicit expression
String representation of a TextMessage
String-keyed objects shouldn't suppress newlines.
String-matching-regexes.
Stub out event emitting
Subscribes to editor view event.
Subsequent middleware should see the modified message
Support `CoffeeScript.nodes(tokens)`.
Supports the (optional) `minimum` and `maximum` keys.
Swap if a smaller item has been found.
Switch statements ("else" serves as a default).
Synchronously open the given URI in the active pane.
TODO Remove once the tabs package no longer uses .on subscriptions
TODO Use AtomPackage class once it runs outside of an Atom context
TODO: Currently, this method is designed to be async, but it relies on a synchronous API.
TODO: Fix node-pathwatcher/src/directory.coffee so the following methods can return cached values rather than always returning new objects: getParent(), getFile(), getSubdirectory().
TODO: Make this part of the public API.
TODO: Remove once color picker package stops touching private data
TODO: Remove this forward-compatible fallback once 1.8 reaches stable.
TODO: Restore concurrency on Windows
TODO: Return null on version mismatch when 1.8.0 has been out for a while
TODO: Stop normalizing the path in pathwatcher's Directory.
TODO: This seemed to have only been passing due to an accident in the text buffer implementation.
TODO: This should really be parallel on every platform, however: - On Windows, our fixtures step on each others toes.
TODO: We could rename this event to `did-complete-downloading-update`
TODO: We should deprecate the update events here, and use `atom.autoUpdater` instead
TODO: Yes, this is strange that `onUpdateAvailable` is listening for `did-begin-downloading-update`.
TODO: improve this test
TODO: remove this fallback after everyone transitions to the latest version.
TODO: remove this when every user has migrated to the IndexedDb state store.
TODO: scopes is deprecated.
Tack an expression on to the end of this expression list.
Tag postfix conditionals as such, so that we can parse them with a different precedence.
Tag the previous token as being "spaced", because there are some cases where it makes a difference.
Tag this invocation as creating a new instance.
Testing for recursion with a new CatchAllMessage that wraps the original message
Text editors are divided into a model and a view layer, so when you interact with methods like `atom.workspace.getActiveTextEditor()` you're only going to get the model object.
TextListeners receive every message from the chat source and decide if they want to act on it.
The "AppearanceChannel" name is automatically mapped between the client-side subscription creation and the server-side Ruby class name.
The "f" function and the "options" object are both optional, but at least one must be supplied.
The "offset" waypoint option (which we call "adjustment" here) can be a number, percentage string, keyword string (bottom-in-view), or a function.
The "this" keyword within this function will be set to the raw HTMLNode of the waypoint element.
The 'all' is only available on OS X.
The **ArgList** is both the list of objects passed into a function call, as well as the contents of an array literal (i.e. comma-separated expressions).
The **Code** node is the function literal.
The **If** only compiles into a statement if either of its bodies needs to be a statement.
The **Rewriter** adds the implicit blocks, so it doesn't need to.
The **Root** is the top-level node in the syntax tree.
The CoffeeScript REPL uses this to run the input.
The CoffeeScript range literal.
The Consumer instance is also the gateway to establishing subscriptions to desired channels through the #createSubscription method.
The GutterContainerComponent expects the gutters to be sorted in the order they should appear.
The GutterContainerComponent manages the GutterComponents of a particular TextEditorComponent.
The IME composition events work like this:
The Lexer Class --------------- The Lexer class reads a stream of CoffeeScript and divvies it up into tagged tokens.
The Syntax class also contains properties for things such as the language-specific comment regexes.
The `,` combinator is not currently supported.
The `.sheet` property will be null because this element isn't attached to the DOM.
The `guard` check allows it to work with **map**.
The `iterator` function will be called as `iterator(name, node)` where `name` is the name of the parameter and `node` is the AST node corresponding to that name.
The `type` keyword can be a string with any one of the following.
The `type` of `gutter` and `overlay` are not supported on layer decorations.
The actual precedence rules are defined at the bottom of the page.
The application's singleton class.
The appropriate `this` value for a `super` call.
The array of waypoint elements is returned sorted by calculated offset, the order in which they would be triggered on the page.
The basic unit of CoffeeScript is the **Expression** -- everything that can be an expression is one.
The behavior of the types are as follows: * `line` Adds the given `class` to the lines overlapping the rows spanned by the `DisplayMarker`.
The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes.
The callback will be invoked when pane's flexScale property changes.
The character code of the nasty Microsoft madness otherwise known as the BOM.
The clipboard `text` still contains the concatenation of the clipboard with the current selection.
The compile-time options to pass to the CoffeeScript compiler.
The condition portion of a while loop.
The contents of this gutter may be specified by Decorations.
The current CoffeeScript version number.
The current indentation level.
The decorations should return to the original state.
The default of 0 means that the waypoint is triggered when the top of the waypoint element hits the top of the window/context-element.
The defaults are 'vertical' and window respectively.
The difference from the ordinary **Assign** is that these allow numbers and strings as keys.
The easiest way to get hold of `TextEditor` objects is by registering a callback with `::observeTextEditors` on the `atom.workspace` global.
The empty function should not cause a syntax error.
The error will not be thrown if this function is called.
The essence of displaying a tooltip
The first non-option is considered to be the start of the file (and file option) list, and all subsequent arguments are left unparsed.
The fold will extend from the nearest preceding line with a lower indentation level up to the nearest following row with a lower indentation level.
The following are the supported decorations types:
The following classes can't be used from a Task handler and should therefore only be exported when not running as a child node process
The following example shows how this can be setup:
The following if-related rules are broken up along these lines in order to avoid ambiguity.
The full complement of *if* expressions, including postfix one-liner *if* and *unless*.
The function is called with (context, next, done).
The function is called with (robot, context, next, done).
The general group of accessors into an object, by property, by prototype or by array index or slice.
The global command registry facilitates a style of event handling known as *event delegation* that was popularized by jQuery.
The grammar can't disambiguate them, so we insert the implicit indentation.
The group will be visualy separated and has its own group headline.
The help banner that is printed in conjunction with `-h`/`--help`.
The host element never gets a 'focus' event however, which leaves us in a limbo state where the text editor element is focused but the hidden input isn't focused.
The host of the URL being opened is assumed to be the package name responsible for opening the URL.
The implementation of binary search that is tested.
The indentation detector ignores blank lines without trailing whitespace
The indentation of the non-standard line is unchanged.
The inverse mappings of `BALANCED_PAIRS` we're trying to fix up, so we can look things up from either end.
The invocation below adds a global 'Help' context menu item and a 'History' submenu on the editor supporting undo/redo.
The keyCode X must be the same in the keydown events that bracket the keypress, meaning we're *holding* the _same_ key we intially pressed.
The last token before the indent is part of the list below
The lexer has tagged the opening parenthesis of a method call.
The lexer has tagged the opening parenthesis of an indexing operation call.
The list is now sorted.
The list of all the valid option flags that `coffee` knows how to handle.
The list of arguments to a function call.
The list of keywords that are reserved by JavaScript, but not used, or are used by CoffeeScript internally.
The list of parameters that a function accepts can be of any length.
The map of conversions from CoffeeScript to JavaScript symbols.
The map of invertible operators.
The model handles application logic and is the primary point of API interaction.
The most basic form of *if* is a condition and an action.
The newline and the tab need to be in two different operations to surface the bug
The non-word characters are defined by the `editor.nonWordCharacters` config value.
The object is returned either way.
The object will have an `willAttemptReconnect` property which says whether the client has the intention of attempting to reconnect.
The only dependency is on the **Jison.Parser**.
The order is not guaranteed, so we can only verify the total number of paths searched is correct after the second call.
The order of these passes matters -- indentation must be corrected before implicit parentheses can be wrapped around blocks of code.
The order of these strings should be kept intact.
The over-indentation at the current level.
The overall minimum indentation level
The parens are forced
The parsed options hash, containing all of the command-line options passed, will be made available as the first argument to the action.
The primary purpose of this method is to "tap into" a method chain, in order to perform operations on intermediate results within the chain.
The projectPath may be a URI, in which case it should not be normalized.
The public interface is Gutter::decorateMarker or TextEditor::decorateMarker.
The ranges are sorted by when the selections were added.
The real Lexer produces a generic stream of tokens.
The real command will be registered on package activation
The redo stack will be empty following this operation, so changes since the checkpoint will be lost.
The remainder of 7 / 5
The rest of text-editor-component-spec will be moved to this file when React is eliminated.
The return value will be that of `nextAction` or `undefined` if it was not provided
The right-associative version of **reduce**, also known as **foldr**.
The same node may be used in more than one overlay.
The schema will tell you what type the keyPath expects, and other metadata about the config option.
The searchAllPanes flag expands the search from the current pane to all panes.
The second argument has a `loc` property, which should have the location data for this token.
The second parameter is a hash that'll get JSON encoded and made available on the server in the data parameter.
The settings view orders your settings alphabetically.
The settings view will use the `title` and `description` keys to display your config setting in a readable way.
The slash is removed here once its job is done.
The source of a comprehension is an array or object with an optional guard clause.
The stack for pairing up tokens.
The stack of all current indentation levels.
The string representation of the linked list.
The stripped, cleaned original source code.
The sub options must be listed under a `properties` key.
The superset of both JavaScript keywords and reserved words, none of which may be used as identifiers or properties.
The tokens that signal the start/end of a balanced pair.
The type keyword allows for type coercion and validation.
The types of the values can be specified by a subschema in the `items` key.
The types of things that can be treated as values -- assigned to, invoked as functions, indexed into, named as a class, etc.
The under-outdentation at the current level.
The value can be unwrapped as its inner node, if there are no attached properties.
The value of 'NEOSTRING's are converted using `fn` and turned into strings using `options` first.
The value of each entry is a Context instance and the key is that context's unique ID.
The variants of *try/catch/finally* exception handling blocks.
The view associated with the object is resolved using the following sequence
The view corresponding to the active item is displayed in the interface.
The view just handles presentation.
The visibility of the decoration should not be affected.
The waypoint will look for the closest ancestor element that matches this selector or node.
The while loop can either be normal, with a block of expressions to execute, or postfix, with a single expression.
The window will be centered if either the x or y coordinate is not set in the dimensions parameter.
Then the `*` enforcers will be run, in order of specification.
Then we have to take care not to accidentally evaluate anything twice when building the soak chain.
Then your opener can check the protocol for quux-preview and only handle those URIs that match.
There are also reserved property names that have marker-specific meaning.
There are some symbols that we tag specially here.
There is no do..while.
Therefore, we assume the accented character menu has been deployed if, before observing any keyup event, we observe events in the following sequence:
Therefore, we must check directory and its parent directories to find the nearest .git folder.
These *should* be mocked in the spec helper, but changing that now would break packages :-(
These `describe` and `it` blocks mirror the structure of the ::state object.
These already have sane location data.
These are examples of syntax differences between CoffeeScript and Ruby, they won't run.
These are only require in dev mode when the grammar isn't precompiled
These are read by jison in the `parser.lexer` function defined in coffee-script.coffee.
These can be used as globals or scoped, thus defaults.
These settings are used in scoped fashion only.
These will coerce raw input into the specified type, and will throw an error when the value cannot be coerced.
They also act as an expression, able to return the result of each filtered iteration.
This *should* be callsArgAsync to match the 'on' API, but that makes the tests more complicated and seems irrelevant.
This `path` argument will determine which underlying repository is used.
This accounts for folds.
This adds a utility function to the var line.
This allows all subsequent paths to the relative to the root of the repo
This allows the marker's position to be restored more accurately for certain undo/redo operations, but uses more time and memory.
This allows you to have `-wl` be the same as `--watch --lint`.
This always refocuses the hidden input if a blur event occurs in the shadow DOM that is transferring focus back to the host element.
This array is kept in the jQuery .data() object, and this is the key for that entry.
This callback builds the element array to push to the jQuery stack.
This can be a pane item, a pane, or the workspace itself.
This can be useful for testing when you want to simulate the invocation of a command on a detached DOM node.
This can greatly complicate a grammar and bloat the resulting parse table.
This cancels the accented character behavior if we type a key normally with the menu open.
This cannot be overridden.
This changes the decoration class.
This changes the decoration item.
This changes the type of the decoration.
This changes which gutter this decoration applies to.
This class handles submodules automatically by taking a `path` argument to many of the methods.
This class represents a gutter other than the 'line-numbers' gutter.
This class shouldn't be instantiated directly but instead by accessing the `atom.project` global and calling `getRepositories()`.
This compares the working directory contents of the path to the `HEAD` version.
This could be optimized, but there are unlikely to be many gutters.
This could certainly be changed into a single pass through the stream, with a big ol' efficient switch, but it's much nicer to work with like this.
This covers only concerns related to the wrapper element for now
This creates a new entry in the jQuery object stack just like jQuery's next function.
This creates a new entry in the jQuery object stack just like jQuery's prev function.
This delay prevents the styling from going haywire when stylesheets are reloaded in dev mode.
This destroys any tasks and subscriptions and releases the underlying libgit2 repository handle.
This doesn't actually make a request though.
This enables support for pattern matching.
This happens on page load.
This information is cached in local storage on a per package/version basis to minimize the impact on startup time.
This is a bit particular.
This is a dummy item to prevent panes from being empty on deserialization
This is a good choice for markers representing selections in an editor.
This is a good place to handle changes to the buffer without compromising typing performance.
This is a horrible thing that should not be required.
This is a nested block.
This is a simpler API than many option parsers that allow you to attach callback actions for every flag.
This is a small "hack" for iOS, needed because scrolls in mobile Safari that start or end with the URL bar showing will cause window height changes without firing a resize event.
This is an internal class not intended for direct user manipulation.
This is an invalid/meaningless option here, but it shouldn't matter.
This is done by adding .cmd shims to the root bin folder in the Atom install directory that point to the newly installed versions inside the versioned app directories.
This is essentially the same as running:
This is here for the sake of lang package tests
This is how the server component would look:
This is just for example purposes and not the way the menu is actually configured in Atom by default.
This is loaded by atom.coffee.
This is necessary if using Powershell 2 on Windows 7 to get the events to raise http://stackoverflow.com/questions/9155289/calling-powershell-from-nodejs
This is only applicable on Linux.
This is read in coffeescript_strict_tests.coffee.
This is required since killing the cmd.exe does not terminate child processes.
This is the key for that data entry.
This is the most fragile strategy.
This is the only node that creates a new Scope.
This is used for trailing commas and calls, like:
This is what `coffee --nodes` prints out.
This just lets other modules piggyback on the .waypoint namespace.
This mapping may not be 1:1 due to folds and soft-wraps.
This marker will maintain its logical location as the buffer is changed, so if you mark a particular word, the marker will remain over that word even if the word's location in the buffer changes.
This matches most native apps.
This method allows to iterate them all.
This method allows us to have strings within interpolations within strings, ad infinitum.
This method applies a hit taken during a fight.
This method breaks apart all multi-line selections to create multiple single-line selections that cumulatively cover the same original area.
This method does not actually check if the path exists, it just checks their locations relative to each other.
This method does nothing if the active item does not implement a `.saveAs` method.
This method does nothing if the active item does not implement a `.save` method.
This method ensures the prologue is correctly positioned above the `constructor`.
This method finds markers based on the given properties.
This method is actually called on a clone of the original item template to prevent state from leaking across context menu deployments.
This method is idempotent.
This method is used by display buffer to keep the map updated when the underlying buffer changes.
This method may merge selections that end up intersecting.
This method may merge selections that end up intesecting.
This method merges multiple selections into a single selection.
This method merges selections on successive lines.
This method returns false if the character before or after the cursor is whitespace.
This method takes one turn in a fight.
This method traverses the existing list and places the value at the end in a new node.
This method will be removed in 2.0 because it does synchronous I/O.
This mirrors the "cascade" semantics of CSS.
This mismatch between the electron autoUpdater events is unfortunate but in the interest of not changing the one existing event handled by applicationDelegate
This module contains the main entry functions for tokenizing, parsing, and compiling source CoffeeScript into JavaScript.
This object maintains an array of regions, which contain `bufferRows` and `screenRows` fields.
This object provides a thin wrapper around it, compatible with the Jison API.
This occurred occasionally on CI which is why this check is here.
This only works if there isn't already a tail position.
This picks the best match by checking the file path and contents against each grammar.
This prevents highlights at the tiles boundaries to be hidden by the subsequent tile.
This provider's search should be cancelled when the first provider fails
This recurses through all dependencies and requires all modules that contain a `.node` file.
This removes the leading segments of `refs/heads`, `refs/tags`, or `refs/remotes`.
This returns a function which takes an object as a parameter, and if that object is an AST node, updates that object's locationData.
This setting in ruby files might be different than the global tabLength setting
This should paper over the problem but we want to figure out what is happening:
This should remove the decoration from the gutter.
This spec documents what seems to be a bug in Chromium, because we'd expect that Range(0, 0).getBoundingClientRect().width to always be zero.
This steals the node back if it has been displayed in another overlay.
This supports both CSS and Less stylsheets.
This time include things like loading and activating packages, creating DOM elements for the editor, and reading the config.
This timeout is 3 minutes.
This update will add enough lines to push decoration2 out of view.
This update will make all three decorations visible.
This update will move decoration1 out of view.
This update will scroll decoration1 out of view, and decoration3 into view.
This uses ipcRenderer.send instead of clipboard.writeText because clipboard.writeText is a sync ipcRenderer call on Linux and that will slow down selections.
This value is stored in Atom's internal configuration file.
This value is the rate-limit in milliseconds between resize refreshes.
This value is the rate-limit in milliseconds between scroll checks.
This will get the setting specifically for the editor's language.
This will only occur when the user is not composing in IME mode.
This will reset make them conform.
This workaround should be removed once we update to Chromium 51, where the problem was fixed.
This wrapper holds altered versions of all the underscore functions.
Throw a SyntaxError associated with this node's location.
Throw an exception object.
Throw error with deprecation warning when depending upon implicit `require.extensions` registration
Throwing the error will indicate that the value should not be set.
Throws a SyntaxError from a given location.
Throws an error if this gutter is not within this gutterContainer.
Throws an error if this task has already been terminated or if sending a message to the child process fails.
Tip: Making one of the tests temporarily fail lets you easily inspect the compiled JavaScript.
To add a context menu, pass a selector matching the elements to which you want the menu to apply as the top level key, followed by a menu descriptor.
To avoid any memory leaks this should be called when the editor is destroyed.
To be consistent with the existing behavior, instead of cancel() rejecting the promise, it should resolve it with the special value 'cancelled'.
To compile a node to JavaScript, call `compile` on it, which wraps `compileNode` in some generic extra smarts, to know when the generated code needs to be wrapped up in a closure.
To convert the syntax tree into a string of JavaScript code, call `compile()` on the root.
To create the Jison parser, we list the pattern to match on the left-hand side, and the action to take (usually the creation of syntax tree nodes) on the right.
To decide whether a directory has a valid .git folder, we use the heuristic adopted by the valid_repository_path() function defined in node_modules/git-utils/deps/libgit2/src/repository.c.
To disconnect from the server, call
To do that look up, we need to have this instance in the global hash.
To keep the grammar clean and tidy, trailing newlines within expressions are removed and the indentation tokens of empty blocks are added.
To make sure that they do when the operand is an identifier, test that they are consistent with another unary operator as well as another complex expression.
To modify the outgoing message, set context.string to a new message.
Toggle Dev Tools: cmd-alt-i / ctrl-alt-i
Token Manipulators ------------------ A source of ambiguity in our grammar used to be parameter lists in function definitions versus argument lists in function calls.
Token matching regexes.
Tokenize a string of CoffeeScript code, and return the array of tokens.
Tokenize the clean input.
Tokenizers ---------- Matches identifying literals: variables, keywords, method names, etc.
Tokens are in the form:
Tokens that always mark the end of an implicit call for single-liners.
Tokens that close open calls when they follow a newline.
Tokens that end a line.
Tokens that indicate the close of a clause of an expression.
Tokens that, if followed by an `IMPLICIT_CALL`, indicate a function invocation.
Tokens that, when immediately preceding a `WHEN`, indicate that the `WHEN` occurs at the start of a line.
Tokens which a regular expression will never immediately follow (except spaced CALLABLEs in some cases), but which a division operator can.
Tokens which could legitimately be invoked or indexed.
Top-level objects shared by all the functions.
Touch support feature test
Track current balancing depth (both implicit and explicit) on stack.
Translates the command into OS X action and sends it to application's first responder.
Trapezoidal Regions: If a region has one buffer row and more than one screen row, it represents a soft-wrapped line.
Trigger events emitted on the async repo as well
Trim out all falsy values from an array.
Try executing all registered Listeners in order of registration and return after message is done being processed
Try/Catch/Finally Interaction With Other Constructs
Try/Catch/Finally as an Expression
Try/Catch/Finally/Throw.
U+00A0 NO-BREAK SPACE
U+1680 OGHAM SPACE MARK
U+2004 THREE-PER-EM SPACE
U+2005 FOUR-PER-EM SPACE
U+2006 SIX-PER-EM SPACE
U+2008 PUNCTUATION SPACE
U+202F NARROW NO-BREAK SPACE
U+205F MEDIUM MATHEMATICAL SPACE
U+3000 IDEOGRAPHIC SPACE 3560: Non-breaking space (U+00A0) (before `'c'`)
Unable to understand why this behavior is needed, but adding a test case to protect it
Unary + and - do not generate `_ref`s when the operand is a number, for readability.
Unclosed control statement inside implicit parens (like class declaration or if-conditionals)
Unexpected end of file
Unexpected key in implicit object (an implicit object itself is _not_ unexpected here)
Unfold a node's child if soak, then tuck the node under created `If`
Unfolds all the foldable lines in the buffer.
Unfortunately, Jison seems to send an outdated `loc` (from the previous token), so we take the location information directly from the lexer.
Uninstall the Open with Atom explorer context menu items via the registry.
Unlike "contextScroll", this is the same no matter the type of context, and is used when determining whether a newly added waypoint should immediately fire on its first offset calculation.
Unlike JavaScript's `Array#slice`, the second parameter specifies the index of the end of the slice, just as the first parameter is the index of the beginning.
Unlike Python array comprehensions, they can be multi-line, and you can pass the current index of the loop as a second parameter.
Unlike Ruby blocks, you can map and filter in a single pass.
Unnecessary parentheses will be removed later.
Update a compiler SyntaxError with source code information if it didn't have it already.
Update cache for packages in core.themes config
Update the desktop and start menu shortcuts by using the command line API provided by Squirrel's Update.exe
Update the sourcemap with data from each fragment
Updates the application's title and proxy icon based on whichever file is open.
Updates the decoration state for the gutter with the given gutterName.
Updates the existing HTMLNode with the new decoration info.
Use JavaScript 1.6's **filter**, if it exists.
Use JavaScript 1.6's **some**, if it exists.
Use JavaScript 1.6's version of **map**, if possible.
Use a built-in syntax and UI theme any time the configured themes are not available.
Use a comparator function to figure out at what index an object should be inserted so as to maintain order.
Use a helper to prevent an icon from appearing on the Dock
Use backslashes at the end of a line to specify whitespace between lines.
Use buffer ranges because only the first line is on screen
Use clever algorithm to have O(log(n)) string concatenation operations.
Use first project directory.
Use globals when the following instance variables aren't set.
Use in your package's menu `.cson` file requires that you place your menu structure under a `menu` key.
Use new document so that custom elements don't actually get created
Use parentheses to disambiguate.
Use project path for item path.
Use standard JavaScript `eval` to eval code.
Use the same exit code as the UNIX timeout util.
Use the workspace element if body has focus
Use underscore's definition of equality for toEqual assertions
Used by comprehensions.
Used by the display buffer to map screen rows to buffer rows and vice-versa.
Used every time `Base#compile` is called, to allow properties in the options hash to propagate down the tree without polluting other branches.
Used to manage the global application menu.
Used to recognize FORIN and FOROF tokens.
Useful for ensuring that all callbacks defined on an object belong to it.
Useful for knowing if parens are necessary or superfluous.
Useful for temporary DOM ids.
Useful in cases where you need more flexibility or more speed than a comprehension can provide.
Useful when a node is looking for a particular method in an options hash.
User types 's', chromium pops up the completion helper 1.
Uses JavaScript 1.8's version of **reduce**, if possible.
Uses JavaScript 1.8's version of **reduceRight**, if available.
Uses the value of the `core.apmPath` config setting if it exists.
Using `isEqual` for possibility of placing enums on array and object schemas
Using this variable just helps with minification.
Usually this is due to the command not being available or not on the PATH.
Usually, every keydown event that could cause input is followed by a corresponding keypress.
Utility Functions ----------------- Run Underscore.js in noConflict mode, returning the `_` variable to its previous owner.
Utility function that converts an arbitrary number of elements, mixed with splats, to a proper array.
Valid arguments are Blocks or Splats.
Validates escapes in strings and regexes.
Value must be an Array.
Values are the corresponding GitRepository objects.
Values can be `'head'` (the default) or `'tail'` for overlay decorations, and `'before'` (the default) or `'after'` for block decorations.
Values must be a string.
Values will be coerced into a Boolean.
Values will be coerced into a number, including real numbers.
Values will be coerced into integer.
Variables and properties that can be assigned to.
Verify that the result is cached.
View providers inform the workspace how your model objects should be presented in the DOM.
Wait for project's service consumers to be asynchronously added
Walk backwards, tagging parameters specially in order to make things easier for the parser.
Walk the body of the class, looking for prototype properties to be converted and tagging static assignments.
Watch a directory of files for new additions.
Watch a source CoffeeScript file using `fs.watch`, recompiling it every time the file is updated.
Waypoint.getWaypointsByElement(HTMLNode) Returns an array of all Waypoint instances attached to the "element" HTMLNode.
Waypoint: Represents a single callback function tied to an element.
We add support for loading remote Coffee scripts via **XHR**, and `text/coffeescript` script tags, source maps via data-URLs, and so on.
We cache them separately for compiling complex expressions.
We call this association a View Provider.
We can then pass it directly as a "Jison lexer".
We clear instead of reassigning to preserve the reference.
We compile a value to JavaScript by compiling and joining each property.
We could potentially add a special "schema" source.
We could provide a Fedora version if some libraries are not compatible
We couldn't reproduce the problem with a simple string, so we're attaching the full one that comes from a bug report.
We currently have no mechanism to know if there is an update, so begin of downloading is a good proxy.
We disambiguate these from trailing whens to avoid an ambiguity in the grammar.
We display text editors on screen by teaching the workspace what view constructor it should use to represent them:
We do this by processing all of our rules, recording all terminals (every symbol which does not appear as the name of a rule above) as "tokens".
We don't send the callback function to middleware, so it's not here.
We ensure that the tokens stream always starts with a string token, though, to make sure that the result really is a string.
We have seen a `CONTROL` argument on the line.
We have the mis-nested outdent case included here for calls that close on the same line, just before their outdent.
We have to be careful when trying to slice through the end of the array, `9e9` is used because not all implementations respect `undefined` or `1/0`.
We have to inject an inner constructor in order to be able to pass the varargs.
We need this to be separate from the **ArgList** for use in **Switch** blocks, where having the newlines wouldn't make sense.
We need to bump it back down once we fix backgrounding of the renderer process on CI.
We need to get clever to detect when the accented character menu is opened on OS X.
We need to keep a reference to this Context instance on the DOM node so we can look it up later based on the node.
We need to revisit our representation of folds and then reenable it.
We recommend the latter.
We recommend the model option.
We should make onDidThrowError match the interface by only yielding an exception object to the handler and deprecating the old behavior.
We throw an error when these are encountered, to avoid having a JavaScript error at runtime.
We treat all other single characters as a token.
We use sendMessage to send an event called 'update-available' in 'update-downloaded' once the update download is complete.
We use some hashes with common values for each axis so that we can just iterate over it rather than write the whole thing twice for each axis.
We use this recursively, and using nextTick recursively is deprecated in node 0.10.
We want the first/top theme to override later themes in the stack.
We'll never get to this if testMiddlewareA has not modified the message.
We'll watch `core.themes` for changes
We're done with mockery
We've finally calculated all the crazy little adjustments that can come from using non-window contexts and the "offset" option.
Welcome to the hairiest method in all of CoffeeScript.
When a consumer is created, it automatically connects with the server.
When a file is updated, reloaded, etc, and the status changes, this will be fired.
When a match is found, a token is produced, we consume the match, and start again.
When a pending item is added to a pane, it will replace the currently pending item, if any, instead of simply being added.
When compiled normally, the range returns the contents of the *for loop* needed to iterate over the values in the range.
When compiling a conditional assignment, take care to ensure that the operands are only evaluated once, even though we have to reference them more than once.
When everything is finished (down the middleware stack and back up), pass control back to the robot
When for the purposes of walking the contents of a function body, the Code has no *children* -- they're within the inner scope.
When handling errors, this is assumed to have a `response` property.
When it isn't the comma go on to play a role in a call or array further up the stack, so give it a chance.
When nextTag is OUTDENT the comma is insignificant and should just be ignored so embed it in the implicit object.
When no listeners match, each listener is called twice: once with the original message and once with a CatchAll message
When notified of a new count, replace the entry in the map and update the total.
When the cursor is on whitespace
When the marker moves, is invalidated, or is destroyed, the decoration will be updated to reflect the marker's state.
When the next token has been recorded, we move forward within the code past the token, and begin again.
When the schema is changed / added, there may be values set in the config that do not conform to the schema.
When the user selects a modified character from the OSX menu, `textInput` will occur twice, once for the initial character, and once for the modified character.
When the user selects text, the selection is visualized with a highlight decoration internally.
When this happens, subpixel anti-aliasing gets disabled.
When watching scripts, it's useful to log changes with the timestamp.
While loops, break and continue.
Will handle comments and code.
Will return one of `'dev', 'beta', 'stable'`
Wire commands that should be handled by Chromium for elements with the `.native-key-bindings` class.
With alterations for arbitrary delimiters, and to preserve whitespace.
With each match's action, the dollar-sign variables are provided by Jison as references to the value of their numeric position, so in this rule:
With scope descriptors you can get settings within a specific editor scope.
Work around for https://github.com/atom/atom-shell/issues/473
Work around what seems to be a bug in Chromium.
Workaround for focus getting cleared upon window creation
Workaround for https://github.com/atom/atom-shell/issues/380 Don't focus the window when it is being blurred during close or else the app will crash on Windows.
Workaround of the accented character suggestion feature in OS X.
Wrap up the given nodes as a **Block**, unless it already happens to be one.
Wrapped objects may be chained.
Wrapping Up ----------- Finally, now that we have our **grammar** and our **operators**, we can create our **Jison.Parser**.
Wraps the lines between two rows in comments.
Write out a JavaScript source file with the compiled code.
Yes, we tried to execute the listener callback (middleware may have intercepted before actually executing though)
Yield to the event loop
YieldReturn is a statement, but not included in Statement because that results in an ambiguous grammar.
You can access a global instance of this class via `atom.commands`, and commands registered there will be presented in the command palette.
You can access the `ViewRegistry` object via `atom.views`.
You can also chain them by specifying multiple in an an array.
You can also set scoped settings.
You can assign properties to `this` to dynamically compute the command, label, etc.
You can call `handle()` on the object passed to your callback to indicate that you have handled this error.
You can display a key binding in the tooltip as well with the `keyBindingCommand` option.
You can get the `TooltipManager` via `atom.tooltips`.
You can override this ordering with the order key.
You can run the atom command multiple times, but after the first launch the other launches will just pass their information to this server and then close immediately.
You can see the constructor, property assignments, and inheritance getting built out below.
You can then compile it by calling `.compile()` on the root, or traverse it by using `.traverseChildren()` with a callback.
You define tasks with names and descriptions in a Cakefile, and can call them from the command line, or invoke them from other tasks.
You may want to watch for changes.
You might want to be notified when the themes change.
You might want to change the themes programmatically:
You might want to know what themes are enabled, so check `core.themes`
You should not need to create a `ScopeDescriptor` directly.
Your callback will then be called with all current editor instances and also when any editor is created in the future.
Your choice of coordinates systems will depend on what you're trying to achieve.
Zip together multiple lists into a single array -- elements that share an index go together.
`'true'` and `'false'` will be coerced into a boolean.
`::scan` functions as the replace method as well via the `replace`
`StopIteration` is SOP on Mozilla.
```coffee Note that with no value set, ::get returns the setting's default value.
```coffee We want to provide an `enableThing`, and a `thingVolume` config: enableThing: type: 'boolean' default: false thingVolume: type: 'integer' default: 5 minimum: 1 maximum: 11 ```
```coffee atom.clipboard.write('hello')
```coffee atom.config.get('core.themes') ```
```coffee class MyPackageView extends View atom.deserializers.add(this)
```coffee config: someSetting: title: 'Setting Magnitude' description: 'This will affect the blah and the other blah' type: 'integer' default: 4 ```
```coffee config: someSetting: type: 'boolean' default: false ```
```coffee config: someSetting: type: 'color' default: 'white' ```
```coffee config: someSetting: type: 'integer' default: 5 minimum: 1 maximum: 11 ```
```coffee config: someSetting: type: 'number' default: 5.3 minimum: 1.5 maximum: 11.5 ```
```coffee config: someSetting: type: 'object' properties: myChildIntOption: type: 'integer' minimum: 1.5 maximum: 11.5 ```
```coffee config: someSetting: type: 'string' default: 'hello' ```
```coffee config: zSetting: type: 'integer' default: 4 order: 1 aSetting: type: 'integer' default: 4 order: 2 ```
```coffee marker.destroy() ```
```coffee type: 'string' default: 'ok' scopes: '.source.js': default: 'omg' ```
`class` by itself is an expression
`compileOrTest` only if we have an array literal with no splats
`contains` does not cross scope boundaries.
`else undefined` is implied.
`fragmentsList` is an array of arrays of fragments.
`instanceof` supports negation by prefixing the operator with `not`
`obj` can be a token, or a locationData.
`options.arguments` will be an array containing the remaining arguments.
`pattern` may consist of strings (equality), an array of strings (one of) or null (wildcard).
`red`, `green`, `blue` will be in the range 0 to 255 and `value` will be in the range 0 to 1.
`schema` will look something like this
`state` is a subset of the TextEditorPresenter state that is specific to this line number gutter.
`theme-` twice as it prefixes the name with `theme-`
`toString` representation of the node, for inspecting the parse tree.
`use strict` (and other directives) must be the first expression statement(s) of a function body.
`yield return` works exactly like `return`, except that it turns the function into a generator.
account for cursor width
adapter - A String of the adapter name to use.
adapterPath -  A String of the path to built-in adapters (defaults to src/adapters) adapter     - A String of the adapter name.
add or update cursors
add or update highlights
add or update regions
add(2, 4) string print
all WinRegistry APIs share the same signature
allow ENOENT errors to create an editor for paths that dont exist
allow arbitrarily switching between modes any time before multiple lines are entered
allow splats along side the special argument
allow the argument itself to be a splat
an override loaded in the base css
and shorthand syntax.
and to restart the connection:
another type of package manager can handle other package types.
anything but newlines escaped
api uses newline terminated json payloads buffer across tcp packets and parse out lines
args - The optional arguments to pass along.
assumption: startRow will always be the min indent level for the entire range
atom-dark-ui has an directory path, the syntax one doesn't
background tokenization has not begun
backward compatibility
based on end of the path (.git/config)
based on extension (.js)
based on the file's basename (Rakefile)
block decoration before decoration1
block decoration between decoration1 and decoration2
block decoration between decoration2 and decoration3
callback - A Function that is called with a Response object if the matcher function returns true.
callback - A Function that is called with a Response object.
callback - A Function that is called with the error object.
callback - A Function that is called with the loaded history items (or an empty array if there is no history)
callback - A Function that is triggered if the incoming message matches.
campfire api sends a ' ' heartbeat every 3s
campfire won't send messages from just before a room unlock.
cb - Optional callback that is called when message processing is complete
checkEmpty() Looks at the waypoints hashes.
clear flex-grow css style of both pane
clear the goal column by explicitly setting the cursor position
clear the initial call
clearing additional rows won't trigger a state update
command - The name of the command.
command - The string representing the command.
comment comment comment
commented lines preceding an indent aren't foldable
commits scroll position
complete pending save that was requested in ::set
compositionend fired 5.
compositionend fired OR User chooses a completion 4.
compositionstart fired 2.
compound assign / compare
console.log 'output write', arguments
console.log(atom.clipboard.read()) # 'hello' ```
consume (and preserve) an even number of backslashes
context - context object that is passed through the middleware stack.
create some new lines
currently checking only that the directory exists  and is writable, probably want to do some integrity checks on contents in future
decimals with a leading '0' are also prohibited
def away current_user.away end end
def unsubscribed current_user.disappear end
define module/require only if they chose not to specify their own
deleting the buffer causes the editor to autoscroll
destroy() Kills the waypoint for good.
disable() Temporarily disables a waypoint from firing its callback.
disabled until we fix an issue with display buffer markers not updating when they are moved on screen but not in the buffer
do nothing on command, just run passed callback
do nothing on registry, just run passed callback
doScroll() Looks at the new scroll values for the context, compares them to the old scroll values, and checks to see if any waypoints should be triggered by that change.
does not reopen items that are already open
does not reopen items with no uri
doesn't modify original item template
doesn't see the incompatible module
don't compute foldability more than once per buffer row
done - Optional callback that is called when message processing is complete
done() - Initial (final) completion callback.
dont need the dependencies of the dependencies
dynamically close pane, the pane's flexscale will recorver to origin value
dynamically split pane, pane's flexScale will become to 1
editor2 can now diverge from its origin edit session
enable - If true enables all window specific items, if false disables all window specific items.
enable async tokenization
enable() Breathe life back into the waypoint.
enabled - A boolean whether to autosave or not
ensure that RHS is treated as a group
ensure we don't infinitely loop (regression test)
ensure we have a Middleware object
envelope - A Object with message, room and user details.
err - An Error object.
event    - The event name.
event   - The event name.
eventName - The event to listen for.
exercises For.compile
exercises Range.compile
exercises Range.compileSimple
expect(win1Position.y).toBeGreaterThan(win0Position.y)
export Presses globally.
file - A String filename in path on the filesystem.
folds are also duplicated
for implicit destructuring assignment in comprehensions, see the comprehension tests
force it to stop at the beginning of each line
from this grammar file.
from within the theme itself
get current total flex scale of children
get the left and right width after move the resize view
goal range from previous add selection is honored next time
helper to assert that a string should fail compilation
heregex, stuffed with spicy characters
http://benalman.com/projects/jquery-throttle-debounce-plugin/
http://benalman.com/projects/jquery-throttle-debounce-plugin/ - scrollThrottle: For performance reasons, checking for any crossed waypoints during a scroll event is throttled.
httpd       - A Boolean whether to enable the HTTP daemon.
https://github.com/jashkenas/coffeescript/issues/3301#issuecomment-31735168
hubot-mock-adapter uses lodash Force hubot-mock-adapter to use the latest version of Adapter
id   - A String of the message ID.
if next element isnot resize element, then insert new resize element
if previous element is not pane resize element, then insert new resize element
if the current selection start row matches the next selections' end row - make them one selection
if this is called from an event handler, don't cancel it
in the middle of quicksort
indicate that the message matched the listener
init(function, object) Creates a new waypoint (and if needed, a new context) using the supplied callback function and options.
instead these return an object
into various forms: saved into `.js` files or printed to stdout or recompiled every time the source is saved, printed as a token stream or as the syntax tree, or launch an interactive REPL.
isAbsolute is inlined from fs-plus so that fs-plus itself can be required from this cache.
it would be nice to be smarter about omitting, but that would require a much more dynamic interaction between the currently focused element and the menu
items - An Array of items.
keydown(keyCode: X), keypress, keydown(keyCode: X)
keystrokesByCommand - An Object where the keys are commands and the values are Arrays containing the keystroke.
leave path alone if it has a scheme
legacy selector support
lines below deleted regions should be shifted upward
listen for activity in channels
listen for updates available locally (that have been successfully downloaded)
listener - A Function that is called with the event parameter when event happens.
log to stderr, which causes errors on Windows.
logic / shift / power / floor division / modulo
make editor display updates synchronous
make sure autosave is on
make sure next sibling view is pane resize view
make tokenization synchronous
makes the loop below inclusive
match   - A Match object from the successful Regex match.
matcher  - A Function that determines if this listener should trigger the callback.
matcher  - A Function that determines whether to call the callback.
matches against the beginning of the source code.
menu - A complete menu configuration object for atom-shell's menu API.
message - A Message instance.
message - The original message.
message will be EACCES permission denied, et al
middleware - A function that determines whether or not a given matching Listener should be executed.
middleware - A function that determines whether or not listeners should be checked.
middleware - A function that examines an outgoing message and can modify it or prevent its sending.
middleware - A generic pipeline component function that can either continue the pipeline or interrupt it.
middleware - Optional Middleware object to execute before the Listener callback callback - Optional Function called with a boolean of whether the matcher matched
middleware argument is optional
moving added selection
name        - A String of the robot name, defaults to Hubot.
new interval has passed
next(context, done) - Called when all middleware is complete (assuming all continued by calling respective 'next' functions)
no-op unless the current line is empty
nul character mistaken as octal escape
null sort of isnt supported.
numbers, national insurance numbers, etc.
old interval has passed
on Node.js/V8, or to run CoffeeScript directly in the browser.
on-screen, spans over 2 tiles
onPathsSearched should be called once by each DirectorySearcher.
only handle the left mouse button
options  - An Object of additional parameters keyed on extension name (optional).
options - :headless - A Boolean that, if true, will close the window upon completion.
options - :pathToOpen - The file path to open :pidToKillWhenClosed - The integer of the pid to kill :newWindow - Boolean of whether this should be opened in a new window.
options - :pathsToOpen - The array of file paths to open :pidToKillWhenClosed - The integer of the pid to kill :newWindow - Boolean of whether this should be opened in a new window.
options - :type - A String which specifies the type of the dialog, could be 'file', 'folder' or 'all'.
options - :urlToOpen - The atom:// url to open.
options - An optional Hash of key, value pairs for this user.
options - Optional options to pass on to the client
packages - An Array of packages containing hubot scripts to load.
pair might call outdentToken, so preserve decreasedIndent
partially off-screen above, 1 of 2 regions on screen
partially off-screen above, 2 of 3 regions on screen
partially off-screen above, empty
partially off-screen below, 1 of 3 regions on screen
partially off-screen below, spans over 3 tiles, 2 of 3 regions on screen
paste output from failing spec here
path    - A String of the path to adapter if local.
path    - A String path to the hubot-scripts files.
path - A String path on the filesystem.
path - A String path to the file on disk.
path.join isn't used in this function for speed since path.join calls path.normalize and all the paths are already normalized here.
pathToOpen - The path to open when the event is triggered.
possibly with a default value
prefixing `not` to `in and `of` should negate them
preserve escaped whitespace
prevent specs from modifying Atom's menus
previous line 0 remains
previous line 2 is joined with quux() on line 4
previous line 3 is pushed down to become line 5
previous line 3 should be combined with input to form line 1
primarily to skip .git folder
process updates requested as a result of reads
rebuild native modules after electron is updated
rebuild scope of last token if we iterated off the end
regex    - A Regex that determines if the callback should be called.
regex    - A Regex that determines if this listener should trigger the callback.
regex - A RegExp for the message part that follows the robot's name/alias
regex - A Regex to check.
remove escaped newlines
remove whitespace and comments
reopens items with uris
replacement for deprecated express.multipart/connect.multipart limit to 100mb, as per the old behavior
res - An optional Response object that generated the error
reset config before each spec
revival reconnections if things go astray.
robot    - A Robot instance.
robot   - A Robot instance.
robot - A Robot instance.
robot.http("http://example.com") set a single header .header('Authorization', 'bearer abcdef')
room    - String designating the room to message.
root of the syntax tree to a token including _all_ scope names for the entire path.
save and then save as
save, save as, save as
say things to this channel on behalf of the token user
scripts - An Array of scripts to load.
seconds - An Integer of seconds between saves.
see https://github.com/atom/atom/issues/4175
select to end of line 5 because line 4's goal range was reset by line 3 previously
set a goal column by moving down
set every child's flex scale by the ratio
set the flex grow by the ratio of left width and right width to change pane width
set up the spy after because 'close' calls 'save'
should be applied to `C::`
should cache the value used to test the array
should clear ::mouseWheelScreenRow after stoppedScrollingDelay elapses even if we don't scroll first
should copy the other object's properties as well (obviously)
should return the object being extended
simply ignore other commands
skips highlights node
slightly brittle because we are testing for the default options Object
some truthy number in `list`
specificity ties favor commands added later, like CSS
specs could be running under symbol path.
splatArgs is an array of CodeFragments to put into the 'apply'.
stack is the output from CSON in this case
strings  - One more more Strings to set as the topic.
strings  - One or more Strings for each message to send.
strings  - One or more Strings for each reply to send.
strings  - One or more strings for each play message to send.
strings - One or more Strings for each message to send.
strings - One or more strings to be posted as sounds to play.
strings - One or more strings to be posted.
strings - One or more strings to set as the topic of the room the bot is in.
subtract 1 for the row move
subtract vertical scrollbar width
syntax theme is not a dir at this time, so only two.
template - An Object conforming to atom-shell's menu api but lacking accelerator and click properties.
template - An object describing the menu item.
template - The Object which describes the menu to display.
text - A String message.
text - A String of the new topic id   - A String of the message ID.
the **Lexer**, **Rewriter**, and the **Nodes**.
the argument should not be able to be referenced normally
the following function expressions should **not** throw errors
this foul business...
this one is hard, as it requires files
to make things work smoothly when compiling code directly in the browser.
tokenize chunk 1 only
tokenize invalidated lines in background
trigger scroll update
trigger(array) Calls the waypoint's callback function, passing to it the arguments supplied in the "args" array.
url - String URL to access.
us ActionCable.Subscriptions#create, and it should be called through the consumer like so:
use the same hack node currently uses for their own REPL
used in spill detection below
user - A User instance for the user who changed the topic.
user - A User instance for the user who entered.
user - A User instance for the user who left.
user - A User instance that sent the message.
visible horizontal scrollbar makes the clientHeight smaller than the scrollHeight
visible vertical scrollbar makes the clientWidth smaller than the scrollWidth
we want to ensure that the 'done' callbacks are nested correctly (executed in reverse order of definition)
we're testing the lack of a third argument here.
when another change triggers a state update we remove useless lines
which is probably always unintended.
window - The BrowserWindow this menu template is associated with.
with multiple single-line functions on the same line.
yield to ui thread to make screen update more frequently
zero-fill right shift
